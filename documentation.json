{
    "pipes": [
        {
            "name": "AddOnUuidsToAddOnsPipe",
            "id": "pipe-AddOnUuidsToAddOnsPipe-a59c277142ca6a660d1248f746a26b5de16456894af9f884c47a93555974106473a064c2d4de99cf856f7949fc280813e9a500a8d0b045f914381b5ac691c983",
            "file": "src/app/pipes/add-on-uuids-to-add-ons.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "values",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lang",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "addOnUuidsToAddOns",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { LanguageType } from '../services/lang.service';\nimport { ItemsService } from '../services/items.service';\nimport { PropertiesTranslationPipe } from './properties-translation.pipe';\n\n@Pipe({\n  name: 'addOnUuidsToAddOns',\n})\nexport class AddOnUuidsToAddOnsPipe implements PipeTransform {\n  constructor(\n    private itemsService: ItemsService,\n    private propertiesTranslationPipe: PropertiesTranslationPipe\n  ) {}\n  transform(values: string[], lang: LanguageType) {\n    return values\n      .map((addOnUuid) => this.itemsService.getAddOnByUuid(addOnUuid))\n      .map((addOn) =>\n        this.propertiesTranslationPipe.transform(addOn, lang, 'Name')\n      )\n      .join(' + ');\n  }\n}\n"
        },
        {
            "name": "PreviewItemCostPipe",
            "id": "pipe-PreviewItemCostPipe-4209e9d53ebd1067946abd8aaaef079650df8bca16951d9f774b29dcf5cc80784f46cf3acbe8eb714508ca814eaa507f6ef08eeb671263ee0d3fa6f994eb9693",
            "file": "src/app/pipes/preview-item-cost.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "permutationUuids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "permutationUuids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "previewItemCost",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { CartItem, CartService } from '../services/cart.service';\n\n@Pipe({\n  name: 'previewItemCost',\n  pure: false,\n})\nexport class PreviewItemCostPipe implements PipeTransform {\n  constructor(private cartService: CartService) {}\n  transform(value?: CartItem, permutationUuids?: string[]): string {\n    return value\n      ? this.cartService.calcCartItemCost(value, permutationUuids)\n      : '0.0 GTQ';\n  }\n}\n"
        },
        {
            "name": "PropertiesTranslationPipe",
            "id": "pipe-PropertiesTranslationPipe-a3a41238ae33b509672e07b9ff837756b82c5382529aca3fec4d4e26c953a786895d74dd1b919980ae3a34ac0cc8dd77442ab30f9434deb50049c5cfb262fe21",
            "file": "src/app/pipes/properties-translation.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lang",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keySuffix",
                            "type": "\"Details\" | \"Name\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keySuffix",
                            "type": "\"Details\" | \"Name\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "propertiesTranslation",
            "sourceCode": "import { Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { LanguageType } from '../services/lang.service';\n\n@Pipe({\n  name: 'propertiesTranslation',\n})\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertiesTranslationPipe implements PipeTransform {\n  transform(value: any, lang: LanguageType, keySuffix: 'Details' | 'Name') {\n    return value[`${lang}${keySuffix}`];\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AddOn",
            "id": "interface-AddOn-ce4e683cc8e42db150aca59518bab9c7a045937b45f9690d3b5c603b409ee7cc2aeb83022b05f0fdd8e474cdb5811f6a4b7d62bcbe1e7ad42de1ee192be967e8",
            "file": "src/app/travler/travler.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AddOn {\n  uuid: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  inStock: boolean;\n}\n\nexport interface Item {\n  uuid: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  enDetails: string;\n  heDetails: string;\n  esDetails: string;\n  imageUrl: string;\n  price: number;\n  availableAddOnUuids?: string[];\n  addOnPrice?: number;\n  freeAvailableAddOns?: number;\n  kitchenOrders?: string;\n  availability?: {\n    monday: boolean;\n    tuesday: boolean;\n    wednesday: boolean;\n    thursday: boolean;\n    friday: boolean;\n    saturday: boolean;\n    sunday: boolean;\n  };\n}\n\nexport interface Category {\n  uuid: string;\n  type: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  imageUrl: string;\n  items: Item[];\n}\n",
            "properties": [
                {
                    "name": "enName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "esName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "heName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "inStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthResponse",
            "id": "interface-AuthResponse-48d13e0502ee14642ddd23c7d68130936395d7f3389240b56125c6241115f355338021fca2c296dce253ad3990bd6bd9c1929f0905da8b6f4a831447e2458944",
            "file": "src/app/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, catchError, map, of, tap } from 'rxjs';\nimport { NotificationsService } from './notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\n\ninterface AuthResponse {\n  auth: boolean;\n  token: string;\n}\n\nexport interface GuestDetails {\n  confirmation: boolean;\n  email?: string;\n  hebrewname: string;\n  id: string;\n  participants: string;\n  phone: string;\n  transport: boolean;\n  username?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private _guestDetails$ = new BehaviorSubject<GuestDetails | null>(null);\n\n  get guestDetails$(): Observable<GuestDetails | null> {\n    return this._guestDetails$.asObservable();\n  }\n\n  get guestDetails(): GuestDetails | null {\n    return this._guestDetails$.value;\n  }\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private translate: TranslateService\n  ) {}\n\n  login(username: string, password: string): Observable<boolean> {\n    return this.http\n      .post<AuthResponse>('/api/login', { username, password })\n      .pipe(\n        tap((authResponse: AuthResponse) => {\n          window.localStorage.removeItem('auth-user');\n          window.localStorage.setItem(\n            'auth-user',\n            JSON.stringify(authResponse.token)\n          );\n        }),\n        map((authResponse: AuthResponse) => {\n          return authResponse.auth;\n        }),\n        catchError((error) => {\n          if (error.status === 404) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else if (error.status === 401) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant('notifications.errors.general'),\n            });\n          }\n\n          console.error(error);\n          return of(false);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CartItem",
            "id": "interface-CartItem-4f4dc0fed3079f47193871acdb17aa8d71177608d3336453f411097e75b6198a691a71cb7e32f287177404d66fe56fd48be2df913c2b9028bda963ddb5c11f15",
            "file": "src/app/services/cart.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map, of } from 'rxjs';\nimport { Item } from '../travler/travler.models';\n\nexport interface CartItem {\n  itemUuid: string;\n  item: Item;\n  items: Map<string, string[]>;\n}\n\ninterface SerializableCartItem {\n  itemUuid: string;\n  item: Item;\n  items: Array<[string, string[]]>;\n}\n\ninterface CartState {\n  items: SerializableCartItem[];\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private readonly CART_KEY = 'shopping_cart';\n  private readonly EXPIRY_TIME = 15 * 60 * 1000;\n\n  private cartItems = new BehaviorSubject<CartItem[]>([]);\n  public cartItems$ = this.cartItems.asObservable();\n\n  constructor() {\n    this.initializeCart();\n    this.setupExpiryCheck();\n  }\n\n  private serializeCartItems(items: CartItem[]): SerializableCartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: Array.from(item.items.entries()),\n    }));\n  }\n\n  private deserializeCartItems(items: SerializableCartItem[]): CartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: new Map(item.items),\n    }));\n  }\n\n  private initializeCart(): void {\n    const savedCart = localStorage.getItem(this.CART_KEY);\n    if (savedCart) {\n      try {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp <= this.EXPIRY_TIME) {\n          const items = this.deserializeCartItems(cartState.items);\n          this.cartItems.next(items);\n        } else {\n          this.clearCart();\n        }\n      } catch (error) {\n        console.error('Error parsing cart from localStorage:', error);\n        this.clearCart();\n      }\n    }\n  }\n\n  private setupExpiryCheck(): void {\n    setInterval(() => {\n      const savedCart = localStorage.getItem(this.CART_KEY);\n      if (savedCart) {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp > this.EXPIRY_TIME) {\n          this.clearCart();\n        }\n      }\n    }, 60000);\n  }\n\n  private saveToLocalStorage(items: CartItem[]): void {\n    const cartState: CartState = {\n      items: this.serializeCartItems(items),\n      timestamp: Date.now(),\n    };\n    localStorage.setItem(this.CART_KEY, JSON.stringify(cartState));\n  }\n\n  private generateCartItemId(): string {\n    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  addItem(item: Item, selectedAddOns: string[] = []): void {\n    const currentItems = this.cartItems.value;\n    const cartItemId = this.generateCartItemId();\n\n    const existingItemIndex = currentItems.findIndex(\n      (i) => i.itemUuid === item.uuid\n    );\n\n    if (existingItemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[existingItemIndex].items.set(cartItemId, selectedAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    } else {\n      const newCartItem: CartItem = {\n        itemUuid: item.uuid,\n        item: item,\n        items: new Map([[cartItemId, selectedAddOns]]),\n      };\n      this.cartItems.next([...currentItems, newCartItem]);\n      this.saveToLocalStorage([...currentItems, newCartItem]);\n    }\n  }\n\n  removeVariant(itemUuid: string, cartItemId: string): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.delete(cartItemId);\n\n      if (updatedItems[itemIndex].items.size === 0) {\n        updatedItems.splice(itemIndex, 1);\n      }\n\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  updateVariantAddOns(\n    itemUuid: string,\n    cartItemId: string,\n    newAddOns: string[]\n  ): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1 && currentItems[itemIndex].items.has(cartItemId)) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.set(cartItemId, newAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  clearCart(): void {\n    this.cartItems.next([]);\n    localStorage.removeItem(this.CART_KEY);\n  }\n\n  getCartItem(itemUuid: string): CartItem | undefined {\n    return this.cartItems.value.find(\n      (cartItem) => cartItem.itemUuid === itemUuid\n    );\n  }\n\n  getItemCount(itemUuid: string): Observable<number> {\n    if (!itemUuid) {\n      return of(0);\n    }\n\n    return this.cartItems$.pipe(\n      map((items) => {\n        const item = items.find((i) => i.itemUuid === itemUuid);\n        return item ? item.items.size : 0;\n      })\n    );\n  }\n\n  getTotalItemsCount(): Observable<number> {\n    return this.cartItems$.pipe(\n      map((items) => items.reduce((total, item) => total + item.items.size, 0))\n    );\n  }\n\n  getVariantsForItem(\n    itemUuid: string\n  ): Observable<Map<string, string[]> | undefined> {\n    return this.cartItems$.pipe(\n      map((items) => items.find((i) => i.itemUuid === itemUuid)?.items)\n    );\n  }\n\n  calcCartItemCost(cartItem: CartItem, permutationUuids?: string[]): string {\n    const basePrice = cartItem.item.price;\n    const freeAddons = cartItem.item.freeAvailableAddOns || 0;\n    const pricePerAddOn = cartItem.item.addOnPrice || 0;\n    let totalPrice = 0;\n    cartItem.items.forEach((value, permutationUuid) => {\n      if (permutationUuids) {\n        if (permutationUuids.includes(permutationUuid)) {\n          totalPrice += basePrice;\n          if (value.length) {\n            const addOnsNeedsPay = value.length - freeAddons;\n            totalPrice += addOnsNeedsPay * pricePerAddOn;\n          }\n        }\n      } else {\n        totalPrice += basePrice;\n        if (value.length) {\n          const addOnsNeedsPay = value.length - freeAddons;\n          totalPrice += addOnsNeedsPay * pricePerAddOn;\n        }\n      }\n    });\n\n    return `${totalPrice.toFixed(2)} GTQ`;\n  }\n}\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "itemUuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CartItemPermutation",
            "id": "interface-CartItemPermutation-43a33f6896234e0ff7f96f0f526c937ecc4d7d764997d2967187b858cba8191d7327e5670be5de49685f183e2986b8ca0d1f7cfcb494ca488ea0868892b138f3",
            "file": "src/app/travler/item-preview/item-preview.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CartItem, CartService } from '../../services/cart.service';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { Observable } from 'rxjs';\nimport { LanguageType, LanguageService } from '../../services/lang.service';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddOnUuidsToAddOnsPipe } from '../../pipes/add-on-uuids-to-add-ons.pipe';\nimport { PreviewItemCostPipe } from '../../pipes/preview-item-cost.pipe';\n\ninterface GroupedCartItem {\n  addOns: string[];\n  permutationUuids: string[];\n  items: CartItemPermutation[];\n  count: number;\n}\n\ninterface CartItemPermutation {\n  id: string;\n  addOns: string[];\n}\n\n@Component({\n  selector: 'app-item-preview',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    LanguageDirectionDirective,\n    PropertiesTranslationPipe,\n    AddOnUuidsToAddOnsPipe,\n    PreviewItemCostPipe,\n    TranslateModule,\n  ],\n  templateUrl: './item-preview.component.html',\n  styleUrl: './item-preview.component.scss',\n})\nexport class ItemPreviewComponent {\n  // TODO: change to group by add-ons uuids\n  private _cartItem: CartItem | undefined;\n  @Input() set cartItem(value: CartItem) {\n    this._cartItem = value;\n    this.groupedCartItem = this.groupSimilarItems();\n  }\n  get cartItem(): CartItem | undefined {\n    return this._cartItem;\n  }\n  @Input() expanded = false;\n\n  @Output() opened = new EventEmitter<number>();\n\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public groupedCartItem: GroupedCartItem[] = [];\n\n  constructor(\n    private languageService: LanguageService,\n    private cartService: CartService\n  ) {}\n\n  ngOnInit(): void {\n    this.lang$ = this.languageService.currentLanguage$;\n  }\n\n  groupSimilarItems(): GroupedCartItem[] {\n    if (!this.cartItem?.items) return [];\n\n    const groupMap = new Map<string, GroupedCartItem>();\n\n    this.cartItem.items.forEach((addOns: string[], id: string) => {\n      console.log(id, addOns);\n\n      const sortedKey = [...addOns].sort().join(',');\n      console.log(sortedKey);\n\n      if (!groupMap.has(sortedKey)) {\n        groupMap.set(sortedKey, {\n          addOns: [...addOns].sort(),\n          permutationUuids: [id],\n          items: [],\n          count: 0,\n        });\n      }\n\n      const group = groupMap.get(sortedKey)!;\n      group.items.push({ id, addOns });\n      group.count++;\n      group.permutationUuids.push(id);\n    });\n\n    return Array.from(groupMap.values());\n  }\n\n  removeItemGroup(group: GroupedCartItem): void {\n    if (!this.cartItem?.itemUuid) return;\n\n    group.items.forEach((item) => {\n      this.cartService.removeVariant(this.cartItem!.itemUuid, item.id);\n    });\n    this.groupedCartItem = this.groupSimilarItems();\n  }\n}\n",
            "properties": [
                {
                    "name": "addOns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CartState",
            "id": "interface-CartState-4f4dc0fed3079f47193871acdb17aa8d71177608d3336453f411097e75b6198a691a71cb7e32f287177404d66fe56fd48be2df913c2b9028bda963ddb5c11f15",
            "file": "src/app/services/cart.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map, of } from 'rxjs';\nimport { Item } from '../travler/travler.models';\n\nexport interface CartItem {\n  itemUuid: string;\n  item: Item;\n  items: Map<string, string[]>;\n}\n\ninterface SerializableCartItem {\n  itemUuid: string;\n  item: Item;\n  items: Array<[string, string[]]>;\n}\n\ninterface CartState {\n  items: SerializableCartItem[];\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private readonly CART_KEY = 'shopping_cart';\n  private readonly EXPIRY_TIME = 15 * 60 * 1000;\n\n  private cartItems = new BehaviorSubject<CartItem[]>([]);\n  public cartItems$ = this.cartItems.asObservable();\n\n  constructor() {\n    this.initializeCart();\n    this.setupExpiryCheck();\n  }\n\n  private serializeCartItems(items: CartItem[]): SerializableCartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: Array.from(item.items.entries()),\n    }));\n  }\n\n  private deserializeCartItems(items: SerializableCartItem[]): CartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: new Map(item.items),\n    }));\n  }\n\n  private initializeCart(): void {\n    const savedCart = localStorage.getItem(this.CART_KEY);\n    if (savedCart) {\n      try {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp <= this.EXPIRY_TIME) {\n          const items = this.deserializeCartItems(cartState.items);\n          this.cartItems.next(items);\n        } else {\n          this.clearCart();\n        }\n      } catch (error) {\n        console.error('Error parsing cart from localStorage:', error);\n        this.clearCart();\n      }\n    }\n  }\n\n  private setupExpiryCheck(): void {\n    setInterval(() => {\n      const savedCart = localStorage.getItem(this.CART_KEY);\n      if (savedCart) {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp > this.EXPIRY_TIME) {\n          this.clearCart();\n        }\n      }\n    }, 60000);\n  }\n\n  private saveToLocalStorage(items: CartItem[]): void {\n    const cartState: CartState = {\n      items: this.serializeCartItems(items),\n      timestamp: Date.now(),\n    };\n    localStorage.setItem(this.CART_KEY, JSON.stringify(cartState));\n  }\n\n  private generateCartItemId(): string {\n    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  addItem(item: Item, selectedAddOns: string[] = []): void {\n    const currentItems = this.cartItems.value;\n    const cartItemId = this.generateCartItemId();\n\n    const existingItemIndex = currentItems.findIndex(\n      (i) => i.itemUuid === item.uuid\n    );\n\n    if (existingItemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[existingItemIndex].items.set(cartItemId, selectedAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    } else {\n      const newCartItem: CartItem = {\n        itemUuid: item.uuid,\n        item: item,\n        items: new Map([[cartItemId, selectedAddOns]]),\n      };\n      this.cartItems.next([...currentItems, newCartItem]);\n      this.saveToLocalStorage([...currentItems, newCartItem]);\n    }\n  }\n\n  removeVariant(itemUuid: string, cartItemId: string): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.delete(cartItemId);\n\n      if (updatedItems[itemIndex].items.size === 0) {\n        updatedItems.splice(itemIndex, 1);\n      }\n\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  updateVariantAddOns(\n    itemUuid: string,\n    cartItemId: string,\n    newAddOns: string[]\n  ): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1 && currentItems[itemIndex].items.has(cartItemId)) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.set(cartItemId, newAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  clearCart(): void {\n    this.cartItems.next([]);\n    localStorage.removeItem(this.CART_KEY);\n  }\n\n  getCartItem(itemUuid: string): CartItem | undefined {\n    return this.cartItems.value.find(\n      (cartItem) => cartItem.itemUuid === itemUuid\n    );\n  }\n\n  getItemCount(itemUuid: string): Observable<number> {\n    if (!itemUuid) {\n      return of(0);\n    }\n\n    return this.cartItems$.pipe(\n      map((items) => {\n        const item = items.find((i) => i.itemUuid === itemUuid);\n        return item ? item.items.size : 0;\n      })\n    );\n  }\n\n  getTotalItemsCount(): Observable<number> {\n    return this.cartItems$.pipe(\n      map((items) => items.reduce((total, item) => total + item.items.size, 0))\n    );\n  }\n\n  getVariantsForItem(\n    itemUuid: string\n  ): Observable<Map<string, string[]> | undefined> {\n    return this.cartItems$.pipe(\n      map((items) => items.find((i) => i.itemUuid === itemUuid)?.items)\n    );\n  }\n\n  calcCartItemCost(cartItem: CartItem, permutationUuids?: string[]): string {\n    const basePrice = cartItem.item.price;\n    const freeAddons = cartItem.item.freeAvailableAddOns || 0;\n    const pricePerAddOn = cartItem.item.addOnPrice || 0;\n    let totalPrice = 0;\n    cartItem.items.forEach((value, permutationUuid) => {\n      if (permutationUuids) {\n        if (permutationUuids.includes(permutationUuid)) {\n          totalPrice += basePrice;\n          if (value.length) {\n            const addOnsNeedsPay = value.length - freeAddons;\n            totalPrice += addOnsNeedsPay * pricePerAddOn;\n          }\n        }\n      } else {\n        totalPrice += basePrice;\n        if (value.length) {\n          const addOnsNeedsPay = value.length - freeAddons;\n          totalPrice += addOnsNeedsPay * pricePerAddOn;\n        }\n      }\n    });\n\n    return `${totalPrice.toFixed(2)} GTQ`;\n  }\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SerializableCartItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Category",
            "id": "interface-Category-ce4e683cc8e42db150aca59518bab9c7a045937b45f9690d3b5c603b409ee7cc2aeb83022b05f0fdd8e474cdb5811f6a4b7d62bcbe1e7ad42de1ee192be967e8",
            "file": "src/app/travler/travler.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AddOn {\n  uuid: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  inStock: boolean;\n}\n\nexport interface Item {\n  uuid: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  enDetails: string;\n  heDetails: string;\n  esDetails: string;\n  imageUrl: string;\n  price: number;\n  availableAddOnUuids?: string[];\n  addOnPrice?: number;\n  freeAvailableAddOns?: number;\n  kitchenOrders?: string;\n  availability?: {\n    monday: boolean;\n    tuesday: boolean;\n    wednesday: boolean;\n    thursday: boolean;\n    friday: boolean;\n    saturday: boolean;\n    sunday: boolean;\n  };\n}\n\nexport interface Category {\n  uuid: string;\n  type: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  imageUrl: string;\n  items: Item[];\n}\n",
            "properties": [
                {
                    "name": "enName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "esName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "heName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckboxState",
            "id": "interface-CheckboxState-ba02ffbcc5e6845eba0ef5ce834b4d031eb1831a0cefbba47376e183d86c6971fb9ed606a4a209e4855fa7ff27ffa31498dff89a6d31073c19f7a4b37088f35d",
            "file": "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { MaterialModule } from '../../material.module';\nimport { AddOn, Item } from '../travler.models';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ItemsService } from '../../services/items.service';\nimport { FormsModule } from '@angular/forms';\nimport { LanguageService, LanguageType } from '../../services/lang.service';\nimport { Observable } from 'rxjs';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { TranslateModule } from '@ngx-translate/core';\n\ninterface CheckboxState {\n  selected: boolean;\n}\ntype ModalAddOn = CheckboxState & AddOn;\n\n@Component({\n  selector: 'app-item-add-ons-selections',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    LanguageDirectionDirective,\n    PropertiesTranslationPipe,\n    TranslateModule,\n  ],\n  templateUrl: './item-add-ons-selections.component.html',\n  styleUrls: ['./item-add-ons-selections.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItemAddOnsSelectionsComponent {\n  public lang$: Observable<LanguageType> | undefined;\n  public availableAddOns: ModalAddOn[] = [];\n  public selectedAddOnUuids: string[] = [];\n  public pricePerAddOn: number | undefined;\n  public freeAvailableAddOns: number | undefined;\n  public selectedFreeAddOnUuids: string[] = [];\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Partial<Item>,\n    private languageService: LanguageService,\n    private itemsService: ItemsService,\n    private dialogRef: MatDialogRef<ItemAddOnsSelectionsComponent>\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n\n    this.pricePerAddOn = data?.addOnPrice;\n    this.freeAvailableAddOns = data?.freeAvailableAddOns;\n    this.availableAddOns = (data.availableAddOnUuids as string[])\n      .map((addOnUuid) => this.itemsService.getAddOnByUuid(addOnUuid))\n      .filter((addOn) => !!addOn)\n      .map((addOn) => ({\n        selected: false,\n        ...addOn,\n      }));\n  }\n\n  onCheckboxChange(addOn: ModalAddOn) {\n    if (addOn.selected) {\n      this.selectedAddOnUuids.push(addOn.uuid);\n      // TODO: display current cost\n      // if (\n      //   this.selectedFreeAddOnUuids.length !== this.freeAvailableAddOns &&\n      //   !this.selectedFreeAddOnUuids.includes(addOn.uuid)\n      // ) {\n      //   this.selectedFreeAddOnUuids.push(addOn.uuid);\n      // }\n    } else {\n      const index = this.selectedAddOnUuids.indexOf(addOn.uuid);\n      if (index >= 0) {\n        this.selectedAddOnUuids.splice(index, 1);\n      }\n    }\n  }\n\n  onSave() {\n    this.dialogRef.close(this.selectedAddOnUuids);\n  }\n}\n",
            "properties": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DashboardMenuButton",
            "id": "interface-DashboardMenuButton-ee2bd73fa231c2b100aabda5796d70925e3e785f0204fc412cd97929c569d43ea81dc3b5143f5b2cfcbaa11b744193b26e2419fb87aaddb67f92b39564a55b58",
            "file": "src/app/admin/dashboard/dashboard.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MaterialModule } from '../../material.module';\nimport { MenuIconComponent } from '../../components/menu-icon/menu-icon.component';\nimport { LanguagePickerComponent } from '../../components/language-picker/language-picker.component';\nimport { NavigationEnd, Router, RouterOutlet } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { filter, map, Observable, startWith } from 'rxjs';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\n\ninterface DashboardMenuButton {\n  titleKey: string;\n  icon: string;\n  route: string;\n}\n\nconst TRANSLATE_KEY_PREFIX = 'dashboard.menu.buttons.titles';\n@Component({\n  selector: 'app-dashboard',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    MenuIconComponent,\n    LanguagePickerComponent,\n    RouterOutlet,\n    TranslateModule,\n    LanguageDirectionDirective,\n  ],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n})\nexport class DashboardComponent {\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public selectedMenuButton: DashboardMenuButton | undefined;\n  public stickyLeft = false;\n\n  constructor(\n    private router: Router,\n    private languageService: LanguageService\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.router.events\n      .pipe(\n        filter(\n          (event): event is NavigationEnd => event instanceof NavigationEnd\n        ),\n        map((event: NavigationEnd) => event.urlAfterRedirects), // Using urlAfterRedirects for more accurate URL\n        startWith(this.router.url) // Ensure initial URL is captured\n      )\n      .subscribe((currentUrl) => {\n        this.selectedMenuButton = this.dashboardMenuButtons.find((button) =>\n          currentUrl.includes(button.route)\n        );\n      });\n  }\n\n  dashboardMenuButtons: DashboardMenuButton[] = [\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.generalOverview`,\n      icon: 'space_dashboard',\n      route: 'general-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.categoriesOverview`,\n      icon: 'apps',\n      route: 'categories-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.itemsOverview`,\n      icon: 'fastfood',\n      route: 'items-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.addOnsOverview`,\n      icon: 'extension',\n      route: 'add-ons-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.ordersOverview`,\n      icon: 'list_alt',\n      route: 'orders-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.scheduleOverview`,\n      icon: 'calendar_month',\n      route: 'schedule-overview',\n    },\n  ];\n\n  isSidenavExpanded = false;\n\n  toggleSidenav(_: boolean): void {\n    this.isSidenavExpanded = !this.isSidenavExpanded;\n  }\n\n  menuButtonClicked(menuButton: DashboardMenuButton): void {\n    if (menuButton.route !== this.selectedMenuButton?.route) {\n      this.selectedMenuButton = menuButton;\n      this.router.navigate([`/admin/${menuButton.route}`]);\n    }\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.stickyLeft = languageDirection === 'ltr';\n  }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "titleKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GroupedCartItem",
            "id": "interface-GroupedCartItem-43a33f6896234e0ff7f96f0f526c937ecc4d7d764997d2967187b858cba8191d7327e5670be5de49685f183e2986b8ca0d1f7cfcb494ca488ea0868892b138f3",
            "file": "src/app/travler/item-preview/item-preview.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CartItem, CartService } from '../../services/cart.service';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { Observable } from 'rxjs';\nimport { LanguageType, LanguageService } from '../../services/lang.service';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddOnUuidsToAddOnsPipe } from '../../pipes/add-on-uuids-to-add-ons.pipe';\nimport { PreviewItemCostPipe } from '../../pipes/preview-item-cost.pipe';\n\ninterface GroupedCartItem {\n  addOns: string[];\n  permutationUuids: string[];\n  items: CartItemPermutation[];\n  count: number;\n}\n\ninterface CartItemPermutation {\n  id: string;\n  addOns: string[];\n}\n\n@Component({\n  selector: 'app-item-preview',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    LanguageDirectionDirective,\n    PropertiesTranslationPipe,\n    AddOnUuidsToAddOnsPipe,\n    PreviewItemCostPipe,\n    TranslateModule,\n  ],\n  templateUrl: './item-preview.component.html',\n  styleUrl: './item-preview.component.scss',\n})\nexport class ItemPreviewComponent {\n  // TODO: change to group by add-ons uuids\n  private _cartItem: CartItem | undefined;\n  @Input() set cartItem(value: CartItem) {\n    this._cartItem = value;\n    this.groupedCartItem = this.groupSimilarItems();\n  }\n  get cartItem(): CartItem | undefined {\n    return this._cartItem;\n  }\n  @Input() expanded = false;\n\n  @Output() opened = new EventEmitter<number>();\n\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public groupedCartItem: GroupedCartItem[] = [];\n\n  constructor(\n    private languageService: LanguageService,\n    private cartService: CartService\n  ) {}\n\n  ngOnInit(): void {\n    this.lang$ = this.languageService.currentLanguage$;\n  }\n\n  groupSimilarItems(): GroupedCartItem[] {\n    if (!this.cartItem?.items) return [];\n\n    const groupMap = new Map<string, GroupedCartItem>();\n\n    this.cartItem.items.forEach((addOns: string[], id: string) => {\n      console.log(id, addOns);\n\n      const sortedKey = [...addOns].sort().join(',');\n      console.log(sortedKey);\n\n      if (!groupMap.has(sortedKey)) {\n        groupMap.set(sortedKey, {\n          addOns: [...addOns].sort(),\n          permutationUuids: [id],\n          items: [],\n          count: 0,\n        });\n      }\n\n      const group = groupMap.get(sortedKey)!;\n      group.items.push({ id, addOns });\n      group.count++;\n      group.permutationUuids.push(id);\n    });\n\n    return Array.from(groupMap.values());\n  }\n\n  removeItemGroup(group: GroupedCartItem): void {\n    if (!this.cartItem?.itemUuid) return;\n\n    group.items.forEach((item) => {\n      this.cartService.removeVariant(this.cartItem!.itemUuid, item.id);\n    });\n    this.groupedCartItem = this.groupSimilarItems();\n  }\n}\n",
            "properties": [
                {
                    "name": "addOns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItemPermutation[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "permutationUuids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GuestDetails",
            "id": "interface-GuestDetails-48d13e0502ee14642ddd23c7d68130936395d7f3389240b56125c6241115f355338021fca2c296dce253ad3990bd6bd9c1929f0905da8b6f4a831447e2458944",
            "file": "src/app/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, catchError, map, of, tap } from 'rxjs';\nimport { NotificationsService } from './notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\n\ninterface AuthResponse {\n  auth: boolean;\n  token: string;\n}\n\nexport interface GuestDetails {\n  confirmation: boolean;\n  email?: string;\n  hebrewname: string;\n  id: string;\n  participants: string;\n  phone: string;\n  transport: boolean;\n  username?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private _guestDetails$ = new BehaviorSubject<GuestDetails | null>(null);\n\n  get guestDetails$(): Observable<GuestDetails | null> {\n    return this._guestDetails$.asObservable();\n  }\n\n  get guestDetails(): GuestDetails | null {\n    return this._guestDetails$.value;\n  }\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private translate: TranslateService\n  ) {}\n\n  login(username: string, password: string): Observable<boolean> {\n    return this.http\n      .post<AuthResponse>('/api/login', { username, password })\n      .pipe(\n        tap((authResponse: AuthResponse) => {\n          window.localStorage.removeItem('auth-user');\n          window.localStorage.setItem(\n            'auth-user',\n            JSON.stringify(authResponse.token)\n          );\n        }),\n        map((authResponse: AuthResponse) => {\n          return authResponse.auth;\n        }),\n        catchError((error) => {\n          if (error.status === 404) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else if (error.status === 401) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant('notifications.errors.general'),\n            });\n          }\n\n          console.error(error);\n          return of(false);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "confirmation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hebrewname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "participants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "transport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Item",
            "id": "interface-Item-ce4e683cc8e42db150aca59518bab9c7a045937b45f9690d3b5c603b409ee7cc2aeb83022b05f0fdd8e474cdb5811f6a4b7d62bcbe1e7ad42de1ee192be967e8",
            "file": "src/app/travler/travler.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AddOn {\n  uuid: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  inStock: boolean;\n}\n\nexport interface Item {\n  uuid: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  enDetails: string;\n  heDetails: string;\n  esDetails: string;\n  imageUrl: string;\n  price: number;\n  availableAddOnUuids?: string[];\n  addOnPrice?: number;\n  freeAvailableAddOns?: number;\n  kitchenOrders?: string;\n  availability?: {\n    monday: boolean;\n    tuesday: boolean;\n    wednesday: boolean;\n    thursday: boolean;\n    friday: boolean;\n    saturday: boolean;\n    sunday: boolean;\n  };\n}\n\nexport interface Category {\n  uuid: string;\n  type: string;\n  enName: string;\n  heName: string;\n  esName: string;\n  imageUrl: string;\n  items: Item[];\n}\n",
            "properties": [
                {
                    "name": "addOnPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "availability",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "availableAddOnUuids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "enDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "enName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "esDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "esName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "freeAvailableAddOns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "heDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "heName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "kitchenOrders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MessagesRes",
            "id": "interface-MessagesRes-2464518be087d289300aff85d531e5ca2c7ae373734c974f532661c3625a8307013c9732adb7ff13f21931aca017ca81bdd37638d1000c7d57e8ff4825bf8786",
            "file": "src/app/admin/admin.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, take } from 'rxjs';\nimport { NotificationType } from '../services/notifications.service';\n\nexport interface WeddingGuest {\n  confirmation: boolean;\n  email?: string;\n  hebrewname: string;\n  id: string;\n  participants: string;\n  phone: string;\n  transport: boolean;\n  username?: string;\n  role?: string;\n  editing?: boolean;\n  deleted?: boolean;\n}\n\nexport interface MessagesRes {\n  status: NotificationType;\n  messages: string;\n  params: { sent: number; failed: number };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminService {\n  constructor(private http: HttpClient) {}\n\n  getAllGuests(): Observable<WeddingGuest[]> {\n    return this.http\n      .get<WeddingGuest[]>(`/api/admin/get-all-guests`)\n      .pipe(take(1));\n  }\n\n  downloadDb(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download-db', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n\n  downloadGuestList(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n\n  replaceDB(guests: WeddingGuest[]): Observable<WeddingGuest[]> {\n    return this.http\n      .post<WeddingGuest[]>('/api/admin/replace-db', { users: guests })\n      .pipe(take(1));\n  }\n\n  saveChangesToDB(guests: WeddingGuest[]): Observable<WeddingGuest[]> {\n    return this.http\n      .post<WeddingGuest[]>('/api/admin/save-changes-to-db', { users: guests })\n      .pipe(take(1));\n  }\n\n  sendMessage(\n    message: string,\n    invitation: boolean,\n    users: WeddingGuest[]\n  ): Observable<MessagesRes> {\n    return this.http\n      .post<MessagesRes>('/api/admin/send-message', {\n        message,\n        invitation,\n        users,\n      })\n      .pipe(take(1));\n  }\n\n  getBotStatus(): Observable<boolean> {\n    return this.http\n      .get<boolean>('/api/admin/bot-status');\n  }\n\n  getBotQrCode(): Observable<string> {\n    return this.http\n      .get('/api/admin/bot-qr', {responseType: 'text'}\n      )\n      .pipe(take(1));\n  }\n\n  downloadGuestMessages(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download-all-guests-messages', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n}\n",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-33798608b3df22132a604616ab5a3edaa794819dddcc7d5ee1d4b42bf8ba30abe1ca1425db09152a41c0f1bc6c1030628bc2831689996ff35ea95d087345fd42",
            "file": "src/app/services/notifications.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NotificationType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR';\n\nexport interface Notification {\n    type: NotificationType;\n    message: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationsService {\n  \n  private _notification$ = new BehaviorSubject<Notification | null>(null);\n\n  get notification$(): Observable<Notification | null> {\n    return this._notification$.asObservable();\n  }\n\n  setNotification(notification: Notification | null): void {\n    this._notification$.next(notification);\n  }\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NotificationConfigurations",
            "id": "interface-NotificationConfigurations-8f85fd5d137b1c2ae15ea9b883fcc68355859c1e5e92f8e944b6376c1486c6fd8467b6c7630aeafb85ed865113618cad62a403ed3325aa662f5fe97d846372cf",
            "file": "src/app/components/notification/notification.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport { Component, OnDestroy } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { LanguageService } from '../../services/lang.service';\nimport {\n  NotificationsService,\n  NotificationType,\n  Notification,\n} from '../../services/notifications.service';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\n\ntype NotificationTitle = 'info' | 'success' | 'warning' | 'error';\ntype NotificationIcon =\n  | 'info_outline'\n  | 'done'\n  | 'warning_amber_outline'\n  | 'close_outline';\ntype NotificationColor = '#4070f4' | '#12c99b' | '#f2a600' | '#e41749';\n\ninterface NotificationConfigurations {\n  title: NotificationTitle;\n  icon: NotificationIcon;\n  color: NotificationColor;\n}\n\n@Component({\n  selector: 'app-notification',\n  imports: [CommonModule, MaterialModule, TranslateModule],\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss'],\n  animations: [\n    trigger('showHideNotification', [\n      state(\n        'hide',\n        style({\n          transform: 'translateX(calc(100vw + 30px))',\n        })\n      ),\n      state(\n        'show',\n        style({\n          transform: 'translateX(0)',\n        })\n      ),\n      transition('show => hide', [animate('0.5s')]),\n      transition('hide => show', [animate('0.2s')]),\n    ]),\n  ],\n})\n// export class NotificationComponent {\nexport class NotificationComponent implements OnDestroy {\n  private readonly NOTIFICATIONS = new Map<\n    NotificationType,\n    NotificationConfigurations\n  >([\n    [\n      'INFO',\n      {\n        title: 'info',\n        color: '#4070f4',\n        icon: 'info_outline',\n      },\n    ],\n    [\n      'ERROR',\n      {\n        title: 'error',\n        color: '#e41749',\n        icon: 'close_outline',\n      },\n    ],\n    [\n      'SUCCESS',\n      {\n        title: 'success',\n        color: '#12c99b',\n        icon: 'done',\n      },\n    ],\n    [\n      'WARNING',\n      {\n        title: 'warning',\n        color: '#f2a600',\n        icon: 'warning_amber_outline',\n      },\n    ],\n  ]);\n  show = false;\n  showNotification: 'hide' | 'show' = 'hide';\n  isRtl = false;\n  title: NotificationTitle | undefined;\n  icon: NotificationIcon | undefined;\n  color: NotificationColor | undefined;\n  message: string | undefined;\n  private notificationShowId: NodeJS.Timeout | undefined;\n  private destroy$: Subject<void> = new Subject();\n  constructor(\n    private languageService: LanguageService,\n    private notificationsService: NotificationsService,\n    private translate: TranslateService\n  ) {\n    this.languageService.rtl$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((rtl) => (this.isRtl = rtl));\n    this.notificationsService.notification$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((notification: Notification | null) => {\n        if (!!notification) {\n          const currentNotification = this.NOTIFICATIONS.get(notification.type);\n          this.message = notification.message;\n          this.title = this.translate.instant(\n            `notifications.title.${currentNotification?.title}`\n          );\n          this.icon = currentNotification?.icon;\n          this.color = currentNotification?.color;\n          this.show = true;\n          setTimeout(() => (this.showNotification = 'show'), 100);\n          this.notificationShowId = setTimeout(() => {\n            this.showNotification = 'hide';\n            this.notificationsService.setNotification(null);\n            setTimeout(() => (this.show = false), 1000);\n          }, 500000);\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  close(): void {\n    this.showNotification = 'hide';\n    setTimeout(() => (this.show = false), 1000);\n    clearTimeout(this.notificationShowId);\n    this.notificationsService.setNotification(null);\n  }\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationColor",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationIcon",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationTitle",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PrintResult",
            "id": "interface-PrintResult-c4ff58f1f6d1f1fbfffa9a03867c71787dc928f6bede67da19645c7c9d55067e832f34444ec44d4944681b02bcddc6f4a423d4b585049bc0e9a6748da773485c",
            "file": "src/app/services/printer.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\n\nexport interface ReceiptData {\n  headerInfo?: {\n    storeName?: string;\n    storeAddress?: string;\n    storeCity?: string;\n    logo?: string;\n  };\n  date?: string;\n  referenceNumber?: string;\n  transactionType?: string;\n  items?: Array<{\n    sku?: string;\n    description?: string;\n    quantity?: number;\n    unitPrice?: number;\n    price?: number;\n  }>;\n  subtotal?: number;\n  tax?: number;\n  total?: number;\n  paymentInfo?: {\n    method?: string;\n    amount?: string;\n    cardNumber?: string;\n    authCode?: string;\n  };\n  footerInfo?: {\n    refundPolicy?: string;\n    returnPolicy?: string;\n    additionalInfo?: string;\n    thankYouMessage?: string;\n  };\n}\n\nexport interface PrintResult {\n  success: boolean;\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReceiptPrinterService {\n  private readonly androidPrinter: any;\n\n  constructor() {\n    // Check if the Android interface is available\n    this.androidPrinter = (window as any).AndroidPrinter;\n\n    // Setup callback function for print results\n    if (!('angularPrintCallback' in window)) {\n      (window as any).angularPrintCallback = (result: PrintResult) => {\n        this.handlePrintResult(result);\n      };\n    }\n  }\n\n  /**\n   * Check if printer is available\n   */\n  isPrinterAvailable(): Observable<boolean> {\n    return new Observable((observer) => {\n      if (!this.androidPrinter) {\n        observer.next(false);\n        observer.complete();\n        return;\n      }\n\n      try {\n        const result = JSON.parse(this.androidPrinter.isPrinterAvailable());\n        observer.next(result.available);\n        observer.complete();\n      } catch (error) {\n        console.error('Error checking printer availability:', error);\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n  /**\n   * Print a receipt using the connected printer\n   * @param receiptData The data for the receipt\n   */\n  printReceipt(receiptData: ReceiptData): Observable<boolean> {\n    return new Observable((observer) => {\n      if (!this.androidPrinter) {\n        console.error('Android printer interface not available');\n        observer.next(false);\n        observer.complete();\n        return;\n      }\n\n      try {\n        // Store the observer for callback response\n        this.currentPrintObserver = observer;\n\n        // Send print request to Android\n        const response = JSON.parse(\n          this.androidPrinter.printReceipt(JSON.stringify(receiptData))\n        );\n\n        console.log('Print job submitted:', response);\n\n        // We don't complete the observer here, it will be completed when\n        // the callback is received from Android\n      } catch (error) {\n        console.error('Error sending print request:', error);\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n  // Keep track of current print job observer\n  private currentPrintObserver: any = null;\n\n  /**\n   * Handle the print result callback from Android\n   */\n  private handlePrintResult(result: PrintResult): void {\n    console.log('Print result received:', result);\n\n    if (this.currentPrintObserver) {\n      this.currentPrintObserver.next(result.success);\n      this.currentPrintObserver.complete();\n      this.currentPrintObserver = null;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ReceiptData",
            "id": "interface-ReceiptData-c4ff58f1f6d1f1fbfffa9a03867c71787dc928f6bede67da19645c7c9d55067e832f34444ec44d4944681b02bcddc6f4a423d4b585049bc0e9a6748da773485c",
            "file": "src/app/services/printer.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\n\nexport interface ReceiptData {\n  headerInfo?: {\n    storeName?: string;\n    storeAddress?: string;\n    storeCity?: string;\n    logo?: string;\n  };\n  date?: string;\n  referenceNumber?: string;\n  transactionType?: string;\n  items?: Array<{\n    sku?: string;\n    description?: string;\n    quantity?: number;\n    unitPrice?: number;\n    price?: number;\n  }>;\n  subtotal?: number;\n  tax?: number;\n  total?: number;\n  paymentInfo?: {\n    method?: string;\n    amount?: string;\n    cardNumber?: string;\n    authCode?: string;\n  };\n  footerInfo?: {\n    refundPolicy?: string;\n    returnPolicy?: string;\n    additionalInfo?: string;\n    thankYouMessage?: string;\n  };\n}\n\nexport interface PrintResult {\n  success: boolean;\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReceiptPrinterService {\n  private readonly androidPrinter: any;\n\n  constructor() {\n    // Check if the Android interface is available\n    this.androidPrinter = (window as any).AndroidPrinter;\n\n    // Setup callback function for print results\n    if (!('angularPrintCallback' in window)) {\n      (window as any).angularPrintCallback = (result: PrintResult) => {\n        this.handlePrintResult(result);\n      };\n    }\n  }\n\n  /**\n   * Check if printer is available\n   */\n  isPrinterAvailable(): Observable<boolean> {\n    return new Observable((observer) => {\n      if (!this.androidPrinter) {\n        observer.next(false);\n        observer.complete();\n        return;\n      }\n\n      try {\n        const result = JSON.parse(this.androidPrinter.isPrinterAvailable());\n        observer.next(result.available);\n        observer.complete();\n      } catch (error) {\n        console.error('Error checking printer availability:', error);\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n  /**\n   * Print a receipt using the connected printer\n   * @param receiptData The data for the receipt\n   */\n  printReceipt(receiptData: ReceiptData): Observable<boolean> {\n    return new Observable((observer) => {\n      if (!this.androidPrinter) {\n        console.error('Android printer interface not available');\n        observer.next(false);\n        observer.complete();\n        return;\n      }\n\n      try {\n        // Store the observer for callback response\n        this.currentPrintObserver = observer;\n\n        // Send print request to Android\n        const response = JSON.parse(\n          this.androidPrinter.printReceipt(JSON.stringify(receiptData))\n        );\n\n        console.log('Print job submitted:', response);\n\n        // We don't complete the observer here, it will be completed when\n        // the callback is received from Android\n      } catch (error) {\n        console.error('Error sending print request:', error);\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n  // Keep track of current print job observer\n  private currentPrintObserver: any = null;\n\n  /**\n   * Handle the print result callback from Android\n   */\n  private handlePrintResult(result: PrintResult): void {\n    console.log('Print result received:', result);\n\n    if (this.currentPrintObserver) {\n      this.currentPrintObserver.next(result.success);\n      this.currentPrintObserver.complete();\n      this.currentPrintObserver = null;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "footerInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "headerInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "paymentInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "referenceNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "subtotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "transactionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SerializableCartItem",
            "id": "interface-SerializableCartItem-4f4dc0fed3079f47193871acdb17aa8d71177608d3336453f411097e75b6198a691a71cb7e32f287177404d66fe56fd48be2df913c2b9028bda963ddb5c11f15",
            "file": "src/app/services/cart.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map, of } from 'rxjs';\nimport { Item } from '../travler/travler.models';\n\nexport interface CartItem {\n  itemUuid: string;\n  item: Item;\n  items: Map<string, string[]>;\n}\n\ninterface SerializableCartItem {\n  itemUuid: string;\n  item: Item;\n  items: Array<[string, string[]]>;\n}\n\ninterface CartState {\n  items: SerializableCartItem[];\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private readonly CART_KEY = 'shopping_cart';\n  private readonly EXPIRY_TIME = 15 * 60 * 1000;\n\n  private cartItems = new BehaviorSubject<CartItem[]>([]);\n  public cartItems$ = this.cartItems.asObservable();\n\n  constructor() {\n    this.initializeCart();\n    this.setupExpiryCheck();\n  }\n\n  private serializeCartItems(items: CartItem[]): SerializableCartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: Array.from(item.items.entries()),\n    }));\n  }\n\n  private deserializeCartItems(items: SerializableCartItem[]): CartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: new Map(item.items),\n    }));\n  }\n\n  private initializeCart(): void {\n    const savedCart = localStorage.getItem(this.CART_KEY);\n    if (savedCart) {\n      try {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp <= this.EXPIRY_TIME) {\n          const items = this.deserializeCartItems(cartState.items);\n          this.cartItems.next(items);\n        } else {\n          this.clearCart();\n        }\n      } catch (error) {\n        console.error('Error parsing cart from localStorage:', error);\n        this.clearCart();\n      }\n    }\n  }\n\n  private setupExpiryCheck(): void {\n    setInterval(() => {\n      const savedCart = localStorage.getItem(this.CART_KEY);\n      if (savedCart) {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp > this.EXPIRY_TIME) {\n          this.clearCart();\n        }\n      }\n    }, 60000);\n  }\n\n  private saveToLocalStorage(items: CartItem[]): void {\n    const cartState: CartState = {\n      items: this.serializeCartItems(items),\n      timestamp: Date.now(),\n    };\n    localStorage.setItem(this.CART_KEY, JSON.stringify(cartState));\n  }\n\n  private generateCartItemId(): string {\n    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  addItem(item: Item, selectedAddOns: string[] = []): void {\n    const currentItems = this.cartItems.value;\n    const cartItemId = this.generateCartItemId();\n\n    const existingItemIndex = currentItems.findIndex(\n      (i) => i.itemUuid === item.uuid\n    );\n\n    if (existingItemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[existingItemIndex].items.set(cartItemId, selectedAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    } else {\n      const newCartItem: CartItem = {\n        itemUuid: item.uuid,\n        item: item,\n        items: new Map([[cartItemId, selectedAddOns]]),\n      };\n      this.cartItems.next([...currentItems, newCartItem]);\n      this.saveToLocalStorage([...currentItems, newCartItem]);\n    }\n  }\n\n  removeVariant(itemUuid: string, cartItemId: string): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.delete(cartItemId);\n\n      if (updatedItems[itemIndex].items.size === 0) {\n        updatedItems.splice(itemIndex, 1);\n      }\n\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  updateVariantAddOns(\n    itemUuid: string,\n    cartItemId: string,\n    newAddOns: string[]\n  ): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1 && currentItems[itemIndex].items.has(cartItemId)) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.set(cartItemId, newAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  clearCart(): void {\n    this.cartItems.next([]);\n    localStorage.removeItem(this.CART_KEY);\n  }\n\n  getCartItem(itemUuid: string): CartItem | undefined {\n    return this.cartItems.value.find(\n      (cartItem) => cartItem.itemUuid === itemUuid\n    );\n  }\n\n  getItemCount(itemUuid: string): Observable<number> {\n    if (!itemUuid) {\n      return of(0);\n    }\n\n    return this.cartItems$.pipe(\n      map((items) => {\n        const item = items.find((i) => i.itemUuid === itemUuid);\n        return item ? item.items.size : 0;\n      })\n    );\n  }\n\n  getTotalItemsCount(): Observable<number> {\n    return this.cartItems$.pipe(\n      map((items) => items.reduce((total, item) => total + item.items.size, 0))\n    );\n  }\n\n  getVariantsForItem(\n    itemUuid: string\n  ): Observable<Map<string, string[]> | undefined> {\n    return this.cartItems$.pipe(\n      map((items) => items.find((i) => i.itemUuid === itemUuid)?.items)\n    );\n  }\n\n  calcCartItemCost(cartItem: CartItem, permutationUuids?: string[]): string {\n    const basePrice = cartItem.item.price;\n    const freeAddons = cartItem.item.freeAvailableAddOns || 0;\n    const pricePerAddOn = cartItem.item.addOnPrice || 0;\n    let totalPrice = 0;\n    cartItem.items.forEach((value, permutationUuid) => {\n      if (permutationUuids) {\n        if (permutationUuids.includes(permutationUuid)) {\n          totalPrice += basePrice;\n          if (value.length) {\n            const addOnsNeedsPay = value.length - freeAddons;\n            totalPrice += addOnsNeedsPay * pricePerAddOn;\n          }\n        }\n      } else {\n        totalPrice += basePrice;\n        if (value.length) {\n          const addOnsNeedsPay = value.length - freeAddons;\n          totalPrice += addOnsNeedsPay * pricePerAddOn;\n        }\n      }\n    });\n\n    return `${totalPrice.toFixed(2)} GTQ`;\n  }\n}\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "itemUuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SupportedLanguages",
            "id": "interface-SupportedLanguages-b17bc79efb3072949ffdc8c00a9769c97dfc0fda282e678b0d79224e91fda3229e12f1c8a9cd363fab610224228cc389fbaef2dfdfcf73a83dbbd729d8af185f",
            "file": "src/app/services/lang.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, startWith } from 'rxjs';\n\nexport type LanguageType = 'en' | 'es' | 'he';\nexport type LanguageCode = 'EN' | 'ES' | 'HE';\nexport type LanguageName = 'English' | 'Español' | 'עברית';\nexport type LanguageIcon = '🇺🇸' | '🇪🇸' | '🇮🇱';\nexport type LanguageDirection = 'rtl' | 'ltr';\n\nexport interface SupportedLanguages {\n  languageType: LanguageType;\n  languageCode: LanguageCode;\n  languageName: LanguageName;\n  languageIcon: LanguageIcon;\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class LanguageService {\n  private readonly languageMap = new Map<LanguageType, LanguageDirection>([\n    ['en', 'ltr'],\n    ['es', 'ltr'],\n    ['he', 'rtl'],\n  ]);\n  private _rtl$ = new BehaviorSubject<boolean>(false);\n  private _currentLanguage$ = new BehaviorSubject<LanguageType>(\n    (localStorage.getItem('locale') as LanguageType) || 'en'\n  );\n  private _supportedLanguages = new Map<LanguageType, SupportedLanguages>([\n    [\n      'en',\n      {\n        languageType: 'en',\n        languageCode: 'EN',\n        languageName: 'English',\n        languageIcon: '🇺🇸',\n      },\n    ],\n    [\n      'es',\n      {\n        languageType: 'es',\n        languageCode: 'ES',\n        languageName: 'Español',\n        languageIcon: '🇪🇸',\n      },\n    ],\n    [\n      'he',\n      {\n        languageType: 'he',\n        languageCode: 'HE',\n        languageName: 'עברית',\n        languageIcon: '🇮🇱',\n      },\n    ],\n  ]);\n\n  get rtl$(): Observable<boolean> {\n    return this._rtl$.asObservable();\n  }\n\n  get rtl(): boolean {\n    return this._rtl$.value;\n  }\n\n  get currentLanguage$(): Observable<LanguageType> {\n    return this._currentLanguage$.asObservable();\n  }\n\n  get currentLanguage(): LanguageType {\n    return this._currentLanguage$.value;\n  }\n\n  get supportedLanguages(): SupportedLanguages[] {\n    return [...this._supportedLanguages.values()];\n  }\n\n  get activeSupportedLanguages(): SupportedLanguages | undefined {\n    return this._supportedLanguages.get(\n      (this.translate.currentLang ||\n        localStorage.getItem('locale') ||\n        'en') as LanguageType\n    );\n  }\n\n  constructor(private translate: TranslateService) {\n    const lang =\n      this.translate.currentLang || localStorage.getItem('locale') || 'en';\n    const translations = this.translate.translations[lang];\n    this.translate.onLangChange\n      .pipe(startWith({ lang, translations }))\n      .subscribe((event: LangChangeEvent) => {\n        const langDirection = this.languageMap.get(event.lang as LanguageType);\n        this._rtl$.next(langDirection === 'rtl');\n        this._currentLanguage$.next(event.lang as LanguageType);\n      });\n  }\n\n  getActiveLanguage(): LanguageType {\n    return this.translate.currentLang as LanguageType;\n  }\n}\n",
            "properties": [
                {
                    "name": "languageCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageCode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "languageIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageIcon",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "languageName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageName",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "languageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WeddingGuest",
            "id": "interface-WeddingGuest-2464518be087d289300aff85d531e5ca2c7ae373734c974f532661c3625a8307013c9732adb7ff13f21931aca017ca81bdd37638d1000c7d57e8ff4825bf8786",
            "file": "src/app/admin/admin.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, take } from 'rxjs';\nimport { NotificationType } from '../services/notifications.service';\n\nexport interface WeddingGuest {\n  confirmation: boolean;\n  email?: string;\n  hebrewname: string;\n  id: string;\n  participants: string;\n  phone: string;\n  transport: boolean;\n  username?: string;\n  role?: string;\n  editing?: boolean;\n  deleted?: boolean;\n}\n\nexport interface MessagesRes {\n  status: NotificationType;\n  messages: string;\n  params: { sent: number; failed: number };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminService {\n  constructor(private http: HttpClient) {}\n\n  getAllGuests(): Observable<WeddingGuest[]> {\n    return this.http\n      .get<WeddingGuest[]>(`/api/admin/get-all-guests`)\n      .pipe(take(1));\n  }\n\n  downloadDb(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download-db', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n\n  downloadGuestList(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n\n  replaceDB(guests: WeddingGuest[]): Observable<WeddingGuest[]> {\n    return this.http\n      .post<WeddingGuest[]>('/api/admin/replace-db', { users: guests })\n      .pipe(take(1));\n  }\n\n  saveChangesToDB(guests: WeddingGuest[]): Observable<WeddingGuest[]> {\n    return this.http\n      .post<WeddingGuest[]>('/api/admin/save-changes-to-db', { users: guests })\n      .pipe(take(1));\n  }\n\n  sendMessage(\n    message: string,\n    invitation: boolean,\n    users: WeddingGuest[]\n  ): Observable<MessagesRes> {\n    return this.http\n      .post<MessagesRes>('/api/admin/send-message', {\n        message,\n        invitation,\n        users,\n      })\n      .pipe(take(1));\n  }\n\n  getBotStatus(): Observable<boolean> {\n    return this.http\n      .get<boolean>('/api/admin/bot-status');\n  }\n\n  getBotQrCode(): Observable<string> {\n    return this.http\n      .get('/api/admin/bot-qr', {responseType: 'text'}\n      )\n      .pipe(take(1));\n  }\n\n  downloadGuestMessages(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download-all-guests-messages', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n}\n",
            "properties": [
                {
                    "name": "confirmation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "deleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "editing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hebrewname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "participants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "transport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AdminService",
            "id": "injectable-AdminService-2464518be087d289300aff85d531e5ca2c7ae373734c974f532661c3625a8307013c9732adb7ff13f21931aca017ca81bdd37638d1000c7d57e8ff4825bf8786",
            "file": "src/app/admin/admin.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "downloadDb",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "downloadGuestList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "downloadGuestMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllGuests",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<WeddingGuest[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBotQrCode",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBotStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "replaceDB",
                    "args": [
                        {
                            "name": "guests",
                            "type": "WeddingGuest[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WeddingGuest[]>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "guests",
                            "type": "WeddingGuest[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveChangesToDB",
                    "args": [
                        {
                            "name": "guests",
                            "type": "WeddingGuest[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WeddingGuest[]>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "guests",
                            "type": "WeddingGuest[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "invitation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "users",
                            "type": "WeddingGuest[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MessagesRes>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "invitation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "users",
                            "type": "WeddingGuest[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, take } from 'rxjs';\nimport { NotificationType } from '../services/notifications.service';\n\nexport interface WeddingGuest {\n  confirmation: boolean;\n  email?: string;\n  hebrewname: string;\n  id: string;\n  participants: string;\n  phone: string;\n  transport: boolean;\n  username?: string;\n  role?: string;\n  editing?: boolean;\n  deleted?: boolean;\n}\n\nexport interface MessagesRes {\n  status: NotificationType;\n  messages: string;\n  params: { sent: number; failed: number };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminService {\n  constructor(private http: HttpClient) {}\n\n  getAllGuests(): Observable<WeddingGuest[]> {\n    return this.http\n      .get<WeddingGuest[]>(`/api/admin/get-all-guests`)\n      .pipe(take(1));\n  }\n\n  downloadDb(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download-db', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n\n  downloadGuestList(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n\n  replaceDB(guests: WeddingGuest[]): Observable<WeddingGuest[]> {\n    return this.http\n      .post<WeddingGuest[]>('/api/admin/replace-db', { users: guests })\n      .pipe(take(1));\n  }\n\n  saveChangesToDB(guests: WeddingGuest[]): Observable<WeddingGuest[]> {\n    return this.http\n      .post<WeddingGuest[]>('/api/admin/save-changes-to-db', { users: guests })\n      .pipe(take(1));\n  }\n\n  sendMessage(\n    message: string,\n    invitation: boolean,\n    users: WeddingGuest[]\n  ): Observable<MessagesRes> {\n    return this.http\n      .post<MessagesRes>('/api/admin/send-message', {\n        message,\n        invitation,\n        users,\n      })\n      .pipe(take(1));\n  }\n\n  getBotStatus(): Observable<boolean> {\n    return this.http\n      .get<boolean>('/api/admin/bot-status');\n  }\n\n  getBotQrCode(): Observable<string> {\n    return this.http\n      .get('/api/admin/bot-qr', {responseType: 'text'}\n      )\n      .pipe(take(1));\n  }\n\n  downloadGuestMessages(): Observable<Blob> {\n    return this.http\n      .get<Blob>('/api/admin/download-all-guests-messages', { responseType: 'blob' as 'json' })\n      .pipe(take(1));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-48d13e0502ee14642ddd23c7d68130936395d7f3389240b56125c6241115f355338021fca2c296dce253ad3990bd6bd9c1929f0905da8b6f4a831447e2458944",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "_guestDetails$",
                    "defaultValue": "new BehaviorSubject<GuestDetails | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, catchError, map, of, tap } from 'rxjs';\nimport { NotificationsService } from './notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\n\ninterface AuthResponse {\n  auth: boolean;\n  token: string;\n}\n\nexport interface GuestDetails {\n  confirmation: boolean;\n  email?: string;\n  hebrewname: string;\n  id: string;\n  participants: string;\n  phone: string;\n  transport: boolean;\n  username?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private _guestDetails$ = new BehaviorSubject<GuestDetails | null>(null);\n\n  get guestDetails$(): Observable<GuestDetails | null> {\n    return this._guestDetails$.asObservable();\n  }\n\n  get guestDetails(): GuestDetails | null {\n    return this._guestDetails$.value;\n  }\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private translate: TranslateService\n  ) {}\n\n  login(username: string, password: string): Observable<boolean> {\n    return this.http\n      .post<AuthResponse>('/api/login', { username, password })\n      .pipe(\n        tap((authResponse: AuthResponse) => {\n          window.localStorage.removeItem('auth-user');\n          window.localStorage.setItem(\n            'auth-user',\n            JSON.stringify(authResponse.token)\n          );\n        }),\n        map((authResponse: AuthResponse) => {\n          return authResponse.auth;\n        }),\n        catchError((error) => {\n          if (error.status === 404) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else if (error.status === 401) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant('notifications.errors.general'),\n            });\n          }\n\n          console.error(error);\n          return of(false);\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "guestDetails$": {
                    "name": "guestDetails$",
                    "getSignature": {
                        "name": "guestDetails$",
                        "type": "",
                        "returnType": "Observable<GuestDetails | null>",
                        "line": 29
                    }
                },
                "guestDetails": {
                    "name": "guestDetails",
                    "getSignature": {
                        "name": "guestDetails",
                        "type": "",
                        "returnType": "GuestDetails | null",
                        "line": 33
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CartService",
            "id": "injectable-CartService-4f4dc0fed3079f47193871acdb17aa8d71177608d3336453f411097e75b6198a691a71cb7e32f287177404d66fe56fd48be2df913c2b9028bda963ddb5c11f15",
            "file": "src/app/services/cart.service.ts",
            "properties": [
                {
                    "name": "CART_KEY",
                    "defaultValue": "'shopping_cart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "cartItems",
                    "defaultValue": "new BehaviorSubject<CartItem[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cartItems$",
                    "defaultValue": "this.cartItems.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "EXPIRY_TIME",
                    "defaultValue": "15 * 60 * 1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectedAddOns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedAddOns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcCartItemCost",
                    "args": [
                        {
                            "name": "cartItem",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "permutationUuids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cartItem",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "permutationUuids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deserializeCartItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "SerializableCartItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CartItem[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "SerializableCartItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCartItemId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCartItem",
                    "args": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CartItem | undefined",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemCount",
                    "args": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalItemsCount",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVariantsForItem",
                    "args": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Map | undefined>",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeVariant",
                    "args": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cartItemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cartItemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToLocalStorage",
                    "args": [
                        {
                            "name": "items",
                            "type": "CartItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "CartItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeCartItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "CartItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SerializableCartItem[]",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "CartItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupExpiryCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateVariantAddOns",
                    "args": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cartItemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newAddOns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cartItemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newAddOns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map, of } from 'rxjs';\nimport { Item } from '../travler/travler.models';\n\nexport interface CartItem {\n  itemUuid: string;\n  item: Item;\n  items: Map<string, string[]>;\n}\n\ninterface SerializableCartItem {\n  itemUuid: string;\n  item: Item;\n  items: Array<[string, string[]]>;\n}\n\ninterface CartState {\n  items: SerializableCartItem[];\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private readonly CART_KEY = 'shopping_cart';\n  private readonly EXPIRY_TIME = 15 * 60 * 1000;\n\n  private cartItems = new BehaviorSubject<CartItem[]>([]);\n  public cartItems$ = this.cartItems.asObservable();\n\n  constructor() {\n    this.initializeCart();\n    this.setupExpiryCheck();\n  }\n\n  private serializeCartItems(items: CartItem[]): SerializableCartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: Array.from(item.items.entries()),\n    }));\n  }\n\n  private deserializeCartItems(items: SerializableCartItem[]): CartItem[] {\n    return items.map((item) => ({\n      itemUuid: item.itemUuid,\n      item: item.item,\n      items: new Map(item.items),\n    }));\n  }\n\n  private initializeCart(): void {\n    const savedCart = localStorage.getItem(this.CART_KEY);\n    if (savedCart) {\n      try {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp <= this.EXPIRY_TIME) {\n          const items = this.deserializeCartItems(cartState.items);\n          this.cartItems.next(items);\n        } else {\n          this.clearCart();\n        }\n      } catch (error) {\n        console.error('Error parsing cart from localStorage:', error);\n        this.clearCart();\n      }\n    }\n  }\n\n  private setupExpiryCheck(): void {\n    setInterval(() => {\n      const savedCart = localStorage.getItem(this.CART_KEY);\n      if (savedCart) {\n        const cartState: CartState = JSON.parse(savedCart);\n        const now = Date.now();\n\n        if (now - cartState.timestamp > this.EXPIRY_TIME) {\n          this.clearCart();\n        }\n      }\n    }, 60000);\n  }\n\n  private saveToLocalStorage(items: CartItem[]): void {\n    const cartState: CartState = {\n      items: this.serializeCartItems(items),\n      timestamp: Date.now(),\n    };\n    localStorage.setItem(this.CART_KEY, JSON.stringify(cartState));\n  }\n\n  private generateCartItemId(): string {\n    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  addItem(item: Item, selectedAddOns: string[] = []): void {\n    const currentItems = this.cartItems.value;\n    const cartItemId = this.generateCartItemId();\n\n    const existingItemIndex = currentItems.findIndex(\n      (i) => i.itemUuid === item.uuid\n    );\n\n    if (existingItemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[existingItemIndex].items.set(cartItemId, selectedAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    } else {\n      const newCartItem: CartItem = {\n        itemUuid: item.uuid,\n        item: item,\n        items: new Map([[cartItemId, selectedAddOns]]),\n      };\n      this.cartItems.next([...currentItems, newCartItem]);\n      this.saveToLocalStorage([...currentItems, newCartItem]);\n    }\n  }\n\n  removeVariant(itemUuid: string, cartItemId: string): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.delete(cartItemId);\n\n      if (updatedItems[itemIndex].items.size === 0) {\n        updatedItems.splice(itemIndex, 1);\n      }\n\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  updateVariantAddOns(\n    itemUuid: string,\n    cartItemId: string,\n    newAddOns: string[]\n  ): void {\n    const currentItems = this.cartItems.value;\n    const itemIndex = currentItems.findIndex((i) => i.itemUuid === itemUuid);\n\n    if (itemIndex > -1 && currentItems[itemIndex].items.has(cartItemId)) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].items.set(cartItemId, newAddOns);\n      this.cartItems.next(updatedItems);\n      this.saveToLocalStorage(updatedItems);\n    }\n  }\n\n  clearCart(): void {\n    this.cartItems.next([]);\n    localStorage.removeItem(this.CART_KEY);\n  }\n\n  getCartItem(itemUuid: string): CartItem | undefined {\n    return this.cartItems.value.find(\n      (cartItem) => cartItem.itemUuid === itemUuid\n    );\n  }\n\n  getItemCount(itemUuid: string): Observable<number> {\n    if (!itemUuid) {\n      return of(0);\n    }\n\n    return this.cartItems$.pipe(\n      map((items) => {\n        const item = items.find((i) => i.itemUuid === itemUuid);\n        return item ? item.items.size : 0;\n      })\n    );\n  }\n\n  getTotalItemsCount(): Observable<number> {\n    return this.cartItems$.pipe(\n      map((items) => items.reduce((total, item) => total + item.items.size, 0))\n    );\n  }\n\n  getVariantsForItem(\n    itemUuid: string\n  ): Observable<Map<string, string[]> | undefined> {\n    return this.cartItems$.pipe(\n      map((items) => items.find((i) => i.itemUuid === itemUuid)?.items)\n    );\n  }\n\n  calcCartItemCost(cartItem: CartItem, permutationUuids?: string[]): string {\n    const basePrice = cartItem.item.price;\n    const freeAddons = cartItem.item.freeAvailableAddOns || 0;\n    const pricePerAddOn = cartItem.item.addOnPrice || 0;\n    let totalPrice = 0;\n    cartItem.items.forEach((value, permutationUuid) => {\n      if (permutationUuids) {\n        if (permutationUuids.includes(permutationUuid)) {\n          totalPrice += basePrice;\n          if (value.length) {\n            const addOnsNeedsPay = value.length - freeAddons;\n            totalPrice += addOnsNeedsPay * pricePerAddOn;\n          }\n        }\n      } else {\n        totalPrice += basePrice;\n        if (value.length) {\n          const addOnsNeedsPay = value.length - freeAddons;\n          totalPrice += addOnsNeedsPay * pricePerAddOn;\n        }\n      }\n    });\n\n    return `${totalPrice.toFixed(2)} GTQ`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ItemsService",
            "id": "injectable-ItemsService-3c04122b21b9f0f8852c33fb059c6c279b97125d02af4e18cfa0d8bc1af181bfe6e9499c08340c3201b6170fa7992d88db2d60953b9ca595b3d121b7aa5173a9",
            "file": "src/app/services/items.service.ts",
            "properties": [
                {
                    "name": "_addOns$",
                    "defaultValue": "new BehaviorSubject<Map<string, AddOn>>(\n    new Map<string, AddOn>()\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_allItems$",
                    "defaultValue": "new BehaviorSubject<Category[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "Partial<Category>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Partial<Category>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Partial<Item>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Partial<Item>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "Partial<Category>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Partial<Category>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Partial<Item>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Partial<Item>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageFile",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAddOnByUuid",
                    "args": [
                        {
                            "name": "addOnUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AddOn | undefined",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addOnUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAllAddOns",
                    "args": [
                        {
                            "name": "addOns",
                            "type": "AddOn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addOns",
                            "type": "AddOn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAllItems",
                    "args": [
                        {
                            "name": "allItems",
                            "type": "Category[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allItems",
                            "type": "Category[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  BehaviorSubject,\n  catchError,\n  combineLatest,\n  Observable,\n  of,\n  tap,\n} from 'rxjs';\nimport { AddOn, Category, Item } from '../travler/travler.models';\nimport { HttpClient } from '@angular/common/http';\nimport { NotificationsService } from './notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsService {\n  private _allItems$ = new BehaviorSubject<Category[]>([]);\n  private _addOns$ = new BehaviorSubject<Map<string, AddOn>>(\n    new Map<string, AddOn>()\n  );\n\n  get allItems$(): Observable<Category[]> {\n    return this._allItems$.asObservable();\n  }\n\n  get allItems(): Category[] {\n    return this._allItems$.value;\n  }\n\n  setAllItems(allItems: Category[]): void {\n    this._allItems$.next(allItems);\n  }\n\n  get addOns$(): Observable<Map<string, AddOn>> {\n    return this._addOns$.asObservable();\n  }\n\n  get addOns(): Map<string, AddOn> {\n    return this._addOns$.value;\n  }\n\n  setAllAddOns(addOns: AddOn[]): void {\n    const addOnsMap = new Map<string, AddOn>();\n    addOns.forEach((addOn) => {\n      addOnsMap.set(addOn.uuid, addOn);\n    });\n\n    this._addOns$.next(addOnsMap);\n  }\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private translate: TranslateService\n  ) {\n    combineLatest([\n      this.http.get<Category[]>('/api/categories'),\n      this.http.get<AddOn[]>('/api/add-ons'),\n    ])\n      .pipe(\n        catchError((error) => {\n          if (error.status === 404) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else if (error.status === 401) {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant(\n                `notifications.errors.${error.error.message}`,\n                { user: error.error.params }\n              ),\n            });\n          } else {\n            this.notificationsService.setNotification({\n              type: 'ERROR',\n              message: this.translate.instant('notifications.errors.general'),\n            });\n          }\n\n          console.error(error);\n          return of([]);\n        })\n      )\n      .subscribe(([categories, addOns]) => {\n        this.setAllAddOns(addOns);\n        this.setAllItems(categories);\n      });\n  }\n\n  getAddOnByUuid(addOnUuid: string): AddOn | undefined {\n    return this._addOns$.value.get(addOnUuid);\n  }\n\n  createCategory(\n    category: Partial<Category>,\n    imageFile: File\n  ): Observable<Category[]> {\n    const formData = new FormData();\n    formData.append('category', JSON.stringify(category));\n\n    if (imageFile) {\n      formData.append('image', imageFile);\n    }\n\n    return this.http\n      .post<Category[]>(`api/admin/category`, formData)\n      .pipe(tap((categories: Category[]) => this.setAllItems(categories)));\n  }\n\n  editCategory(\n    category: Partial<Category>,\n    imageFile?: File\n  ): Observable<Category[]> {\n    const formData = new FormData();\n    formData.append('category', JSON.stringify(category));\n\n    if (imageFile) {\n      formData.append('image', imageFile);\n    }\n\n    return this.http\n      .put<Category[]>(`api/admin/category`, formData)\n      .pipe(tap((categories: Category[]) => this.setAllItems(categories)));\n  }\n\n  deleteCategory(category: Category): Observable<Category[]> {\n    return this.http\n      .delete<Category[]>(`api/admin/category/${category.uuid}`)\n      .pipe(tap((categories: Category[]) => this.setAllItems(categories)));\n  }\n\n  createItem(item: Partial<Item>, imageFile: File): Observable<Category[]> {\n    const formData = new FormData();\n    formData.append('item', JSON.stringify(item));\n\n    if (imageFile) {\n      formData.append('image', imageFile);\n    }\n\n    return this.http\n      .post<Category[]>(`api/admin/item`, formData)\n      .pipe(tap((categories: Category[]) => this.setAllItems(categories)));\n  }\n\n  editItem(item: Partial<Item>, imageFile?: File): Observable<Category[]> {\n    const formData = new FormData();\n    formData.append('item', JSON.stringify(item));\n\n    if (imageFile) {\n      formData.append('image', imageFile);\n    }\n\n    return this.http\n      .put<Category[]>(`api/admin/item/${item.uuid}`, formData)\n      .pipe(tap((categories: Category[]) => this.setAllItems(categories)));\n  }\n\n  deleteItem(item: Item): Observable<Category[]> {\n    return this.http\n      .delete<Category[]>(`api/admin/item/${item.uuid}`)\n      .pipe(tap((categories: Category[]) => this.setAllItems(categories)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "allItems$": {
                    "name": "allItems$",
                    "getSignature": {
                        "name": "allItems$",
                        "type": "",
                        "returnType": "Observable<Category[]>",
                        "line": 24
                    }
                },
                "allItems": {
                    "name": "allItems",
                    "getSignature": {
                        "name": "allItems",
                        "type": "[]",
                        "returnType": "Category[]",
                        "line": 28
                    }
                },
                "addOns$": {
                    "name": "addOns$",
                    "getSignature": {
                        "name": "addOns$",
                        "type": "",
                        "returnType": "Observable<Map<string, AddOn>>",
                        "line": 36
                    }
                },
                "addOns": {
                    "name": "addOns",
                    "getSignature": {
                        "name": "addOns",
                        "type": "",
                        "returnType": "Map<string, AddOn>",
                        "line": 40
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-b17bc79efb3072949ffdc8c00a9769c97dfc0fda282e678b0d79224e91fda3229e12f1c8a9cd363fab610224228cc389fbaef2dfdfcf73a83dbbd729d8af185f",
            "file": "src/app/services/lang.service.ts",
            "properties": [
                {
                    "name": "_currentLanguage$",
                    "defaultValue": "new BehaviorSubject<LanguageType>(\n    (localStorage.getItem('locale') as LanguageType) || 'en'\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_rtl$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_supportedLanguages",
                    "defaultValue": "new Map<LanguageType, SupportedLanguages>([\n    [\n      'en',\n      {\n        languageType: 'en',\n        languageCode: 'EN',\n        languageName: 'English',\n        languageIcon: '🇺🇸',\n      },\n    ],\n    [\n      'es',\n      {\n        languageType: 'es',\n        languageCode: 'ES',\n        languageName: 'Español',\n        languageIcon: '🇪🇸',\n      },\n    ],\n    [\n      'he',\n      {\n        languageType: 'he',\n        languageCode: 'HE',\n        languageName: 'עברית',\n        languageIcon: '🇮🇱',\n      },\n    ],\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languageMap",
                    "defaultValue": "new Map<LanguageType, LanguageDirection>([\n    ['en', 'ltr'],\n    ['es', 'ltr'],\n    ['he', 'rtl'],\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "LanguageType",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, startWith } from 'rxjs';\n\nexport type LanguageType = 'en' | 'es' | 'he';\nexport type LanguageCode = 'EN' | 'ES' | 'HE';\nexport type LanguageName = 'English' | 'Español' | 'עברית';\nexport type LanguageIcon = '🇺🇸' | '🇪🇸' | '🇮🇱';\nexport type LanguageDirection = 'rtl' | 'ltr';\n\nexport interface SupportedLanguages {\n  languageType: LanguageType;\n  languageCode: LanguageCode;\n  languageName: LanguageName;\n  languageIcon: LanguageIcon;\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class LanguageService {\n  private readonly languageMap = new Map<LanguageType, LanguageDirection>([\n    ['en', 'ltr'],\n    ['es', 'ltr'],\n    ['he', 'rtl'],\n  ]);\n  private _rtl$ = new BehaviorSubject<boolean>(false);\n  private _currentLanguage$ = new BehaviorSubject<LanguageType>(\n    (localStorage.getItem('locale') as LanguageType) || 'en'\n  );\n  private _supportedLanguages = new Map<LanguageType, SupportedLanguages>([\n    [\n      'en',\n      {\n        languageType: 'en',\n        languageCode: 'EN',\n        languageName: 'English',\n        languageIcon: '🇺🇸',\n      },\n    ],\n    [\n      'es',\n      {\n        languageType: 'es',\n        languageCode: 'ES',\n        languageName: 'Español',\n        languageIcon: '🇪🇸',\n      },\n    ],\n    [\n      'he',\n      {\n        languageType: 'he',\n        languageCode: 'HE',\n        languageName: 'עברית',\n        languageIcon: '🇮🇱',\n      },\n    ],\n  ]);\n\n  get rtl$(): Observable<boolean> {\n    return this._rtl$.asObservable();\n  }\n\n  get rtl(): boolean {\n    return this._rtl$.value;\n  }\n\n  get currentLanguage$(): Observable<LanguageType> {\n    return this._currentLanguage$.asObservable();\n  }\n\n  get currentLanguage(): LanguageType {\n    return this._currentLanguage$.value;\n  }\n\n  get supportedLanguages(): SupportedLanguages[] {\n    return [...this._supportedLanguages.values()];\n  }\n\n  get activeSupportedLanguages(): SupportedLanguages | undefined {\n    return this._supportedLanguages.get(\n      (this.translate.currentLang ||\n        localStorage.getItem('locale') ||\n        'en') as LanguageType\n    );\n  }\n\n  constructor(private translate: TranslateService) {\n    const lang =\n      this.translate.currentLang || localStorage.getItem('locale') || 'en';\n    const translations = this.translate.translations[lang];\n    this.translate.onLangChange\n      .pipe(startWith({ lang, translations }))\n      .subscribe((event: LangChangeEvent) => {\n        const langDirection = this.languageMap.get(event.lang as LanguageType);\n        this._rtl$.next(langDirection === 'rtl');\n        this._currentLanguage$.next(event.lang as LanguageType);\n      });\n  }\n\n  getActiveLanguage(): LanguageType {\n    return this.translate.currentLang as LanguageType;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "rtl$": {
                    "name": "rtl$",
                    "getSignature": {
                        "name": "rtl$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 60
                    }
                },
                "rtl": {
                    "name": "rtl",
                    "getSignature": {
                        "name": "rtl",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 64
                    }
                },
                "currentLanguage$": {
                    "name": "currentLanguage$",
                    "getSignature": {
                        "name": "currentLanguage$",
                        "type": "",
                        "returnType": "Observable<LanguageType>",
                        "line": 68
                    }
                },
                "currentLanguage": {
                    "name": "currentLanguage",
                    "getSignature": {
                        "name": "currentLanguage",
                        "type": "",
                        "returnType": "LanguageType",
                        "line": 72
                    }
                },
                "supportedLanguages": {
                    "name": "supportedLanguages",
                    "getSignature": {
                        "name": "supportedLanguages",
                        "type": "[]",
                        "returnType": "SupportedLanguages[]",
                        "line": 76
                    }
                },
                "activeSupportedLanguages": {
                    "name": "activeSupportedLanguages",
                    "getSignature": {
                        "name": "activeSupportedLanguages",
                        "type": "",
                        "returnType": "SupportedLanguages | undefined",
                        "line": 80
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NotificationsService",
            "id": "injectable-NotificationsService-33798608b3df22132a604616ab5a3edaa794819dddcc7d5ee1d4b42bf8ba30abe1ca1425db09152a41c0f1bc6c1030628bc2831689996ff35ea95d087345fd42",
            "file": "src/app/services/notifications.service.ts",
            "properties": [
                {
                    "name": "_notification$",
                    "defaultValue": "new BehaviorSubject<Notification | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setNotification",
                    "args": [
                        {
                            "name": "notification",
                            "type": "Notification | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "Notification | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NotificationType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR';\n\nexport interface Notification {\n    type: NotificationType;\n    message: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationsService {\n  \n  private _notification$ = new BehaviorSubject<Notification | null>(null);\n\n  get notification$(): Observable<Notification | null> {\n    return this._notification$.asObservable();\n  }\n\n  setNotification(notification: Notification | null): void {\n    this._notification$.next(notification);\n  }\n}\n",
            "accessors": {
                "notification$": {
                    "name": "notification$",
                    "getSignature": {
                        "name": "notification$",
                        "type": "",
                        "returnType": "Observable<Notification | null>",
                        "line": 18
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PropertiesTranslationPipe",
            "id": "injectable-PropertiesTranslationPipe-a3a41238ae33b509672e07b9ff837756b82c5382529aca3fec4d4e26c953a786895d74dd1b919980ae3a34ac0cc8dd77442ab30f9434deb50049c5cfb262fe21",
            "file": "src/app/pipes/properties-translation.pipe.ts",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lang",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keySuffix",
                            "type": "\"Details\" | \"Name\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keySuffix",
                            "type": "\"Details\" | \"Name\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { LanguageType } from '../services/lang.service';\n\n@Pipe({\n  name: 'propertiesTranslation',\n})\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertiesTranslationPipe implements PipeTransform {\n  transform(value: any, lang: LanguageType, keySuffix: 'Details' | 'Name') {\n    return value[`${lang}${keySuffix}`];\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ReceiptPrinterService",
            "id": "injectable-ReceiptPrinterService-c4ff58f1f6d1f1fbfffa9a03867c71787dc928f6bede67da19645c7c9d55067e832f34444ec44d4944681b02bcddc6f4a423d4b585049bc0e9a6748da773485c",
            "file": "src/app/services/printer.service.ts",
            "properties": [
                {
                    "name": "androidPrinter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentPrintObserver",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handlePrintResult",
                    "args": [
                        {
                            "name": "result",
                            "type": "PrintResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle the print result callback from Android\n",
                    "description": "<p>Handle the print result callback from Android</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "PrintResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPrinterAvailable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if printer is available\n",
                    "description": "<p>Check if printer is available</p>\n"
                },
                {
                    "name": "printReceipt",
                    "args": [
                        {
                            "name": "receiptData",
                            "type": "ReceiptData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrint a receipt using the connected printer\n",
                    "description": "<p>Print a receipt using the connected printer</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2010,
                                "end": 2021,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "receiptData"
                            },
                            "type": "ReceiptData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2004,
                                "end": 2009,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The data for the receipt</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\n\nexport interface ReceiptData {\n  headerInfo?: {\n    storeName?: string;\n    storeAddress?: string;\n    storeCity?: string;\n    logo?: string;\n  };\n  date?: string;\n  referenceNumber?: string;\n  transactionType?: string;\n  items?: Array<{\n    sku?: string;\n    description?: string;\n    quantity?: number;\n    unitPrice?: number;\n    price?: number;\n  }>;\n  subtotal?: number;\n  tax?: number;\n  total?: number;\n  paymentInfo?: {\n    method?: string;\n    amount?: string;\n    cardNumber?: string;\n    authCode?: string;\n  };\n  footerInfo?: {\n    refundPolicy?: string;\n    returnPolicy?: string;\n    additionalInfo?: string;\n    thankYouMessage?: string;\n  };\n}\n\nexport interface PrintResult {\n  success: boolean;\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReceiptPrinterService {\n  private readonly androidPrinter: any;\n\n  constructor() {\n    // Check if the Android interface is available\n    this.androidPrinter = (window as any).AndroidPrinter;\n\n    // Setup callback function for print results\n    if (!('angularPrintCallback' in window)) {\n      (window as any).angularPrintCallback = (result: PrintResult) => {\n        this.handlePrintResult(result);\n      };\n    }\n  }\n\n  /**\n   * Check if printer is available\n   */\n  isPrinterAvailable(): Observable<boolean> {\n    return new Observable((observer) => {\n      if (!this.androidPrinter) {\n        observer.next(false);\n        observer.complete();\n        return;\n      }\n\n      try {\n        const result = JSON.parse(this.androidPrinter.isPrinterAvailable());\n        observer.next(result.available);\n        observer.complete();\n      } catch (error) {\n        console.error('Error checking printer availability:', error);\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n  /**\n   * Print a receipt using the connected printer\n   * @param receiptData The data for the receipt\n   */\n  printReceipt(receiptData: ReceiptData): Observable<boolean> {\n    return new Observable((observer) => {\n      if (!this.androidPrinter) {\n        console.error('Android printer interface not available');\n        observer.next(false);\n        observer.complete();\n        return;\n      }\n\n      try {\n        // Store the observer for callback response\n        this.currentPrintObserver = observer;\n\n        // Send print request to Android\n        const response = JSON.parse(\n          this.androidPrinter.printReceipt(JSON.stringify(receiptData))\n        );\n\n        console.log('Print job submitted:', response);\n\n        // We don't complete the observer here, it will be completed when\n        // the callback is received from Android\n      } catch (error) {\n        console.error('Error sending print request:', error);\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n  // Keep track of current print job observer\n  private currentPrintObserver: any = null;\n\n  /**\n   * Handle the print result callback from Android\n   */\n  private handlePrintResult(result: PrintResult): void {\n    console.log('Print result received:', result);\n\n    if (this.currentPrintObserver) {\n      this.currentPrintObserver.next(result.success);\n      this.currentPrintObserver.complete();\n      this.currentPrintObserver = null;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 48
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-12753e9f5740a021ed081ecc514ecc9f4a6e1cde1c0da0881e35a6af4adf00211ee81e0e172b21dc2942c7423a0560bd8e3b7cd7c86a5483a0a18bf38d266482",
            "file": "src/app/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate():\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const authUser = window.localStorage.getItem('auth-user');\n    if (authUser) {\n      const token = JSON.parse(authUser);\n      if (token) {\n        const tokenPayload = JSON.parse(window.atob(token.split('.')[1]));\n\n        if (tokenPayload.role === 'admin') {\n          if (Date.now() < tokenPayload.exp * 1000) {\n            return true;\n          }\n        }\n      }\n    }\n\n    // Redirect to login page or any other non-admin page\n    this.router.navigate(['/login']);\n\n    return false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "JwtInterceptor",
            "id": "injectable-JwtInterceptor-8824280aebfaec4524214d8b8a6e58ac99d48f3a3d54819c0e93acc87f55658a8a2c79ea49829d41a04b2337e3d0d176770f4c797d8e9aba434f4cdba0447d37",
            "file": "src/app/admin/jwt.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nconst TOKEN_HEADER_KEY = 'authorization';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!req.url.includes('admin')) {\n      return next.handle(req);\n    }\n\n    var authReq = req;\n    const authUser = window.localStorage.getItem('auth-user');\n    if (authUser) {\n      const token = JSON.parse(authUser);\n\n      if (token) {\n        authReq = req.clone({\n          headers: req.headers.set(TOKEN_HEADER_KEY, token),\n        });\n      }\n    }\n\n    return next.handle(authReq);\n  }\n}\n",
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-a8efd7b02753f77b67945f528ed7d93e861ab8233b47e539ab81fcc35d8e2c3704bc1b483d034fe3ce3eb1092a8d6e6e990179c555d6a8f9df3fbf2e43802012",
            "file": "src/app/directives/outside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  HostListener,\n} from '@angular/core';\n\n@Directive({\n  selector: '[clickOutside]',\n})\nexport class ClickOutsideDirective {\n  @Output() clickOutside = new EventEmitter<void>();\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(target: any) {\n    const clickedInside = this.elementRef.nativeElement.contains(target);\n    if (!clickedInside) {\n      this.clickOutside.emit();\n    }\n  }\n}\n",
            "selector": "[clickOutside]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DndDirective",
            "id": "directive-DndDirective-a4af3b4bf9f2c4afc9f902d2633f136abb1f43b927231169e05551fd37498a1a0107f546d3fe92154a314ddadd6f2d25597a7f6460712b9a4d8ac735c7dede0b",
            "file": "src/app/directives/dnd.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Output,\n} from '@angular/core';\n\n@Directive({\n  selector: '[fileDnd]',\n})\nexport class DndDirective {\n  @HostBinding('class.fileover') fileOver: boolean | undefined;\n  @Output() fileDropped = new EventEmitter<any>();\n\n  // Dragover listener\n  @HostListener('dragover', ['$event']) onDragOver(evt: any) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.fileOver = true;\n  }\n\n  // Dragleave listener\n  @HostListener('dragleave', ['$event']) public onDragLeave(evt: any) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.fileOver = false;\n  }\n\n  // Drop listener\n  @HostListener('drop', ['$event']) public ondrop(evt: any) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.fileOver = false;\n    let files = evt.dataTransfer.files;\n    if (files.length > 0) {\n      this.fileDropped.emit(files);\n    }\n  }\n}\n",
            "selector": "[fileDnd]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "fileDropped",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.fileover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31
                }
            ],
            "propertiesClass": [
                {
                    "name": "fileOver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.fileover'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ondrop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "LanguageDirectionDirective",
            "id": "directive-LanguageDirectionDirective-fb4bbf9b06b72fc63c8def7761a031b2a7ca4a60e53b653a65d0deb92df8b3e40cdbdcfb11f679ccb044342aed478a2cbd6a71b63292810971f7e16eb8bd4153",
            "file": "src/app/directives/language-direction.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Output,\n} from '@angular/core';\nimport { LanguageDirection, LanguageService } from '../services/lang.service';\nimport { Subject, takeUntil } from 'rxjs';\n\n@Directive({\n  selector: '[appLanguageDirection]',\n})\nexport class LanguageDirectionDirective {\n  @HostBinding('class.rtl') rtl: boolean | undefined;\n  @HostBinding('class.ltr') ltr: boolean | undefined;\n  @Output() languageChanged = new EventEmitter<LanguageDirection>();\n\n  private destroy$: Subject<void> = new Subject();\n\n  constructor(private languageService: LanguageService) {}\n\n  ngOnInit(): void {\n    this.languageService.rtl$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((rtl) => {\n        if (rtl) {\n          this.rtl = true;\n          this.ltr = false;\n        } else {\n          this.ltr = true;\n          this.rtl = false;\n        }\n\n        if (this.languageChanged) {\n          this.languageChanged.emit(rtl ? 'rtl' : 'ltr');\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "selector": "[appLanguageDirection]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "languageChanged",
                    "defaultValue": "new EventEmitter<LanguageDirection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.ltr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean | undefined",
                    "decorators": []
                },
                {
                    "name": "class.rtl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ltr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.ltr'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "rtl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.rtl'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AddOnFormComponent",
            "id": "component-AddOnFormComponent-1ec5aaa45da88d5a9cc69c40b4da7716633cf1a31b107f81ca0acacc15095a7e3212d70d11c0b7c22df5a6e2a67dcc45453e6f91d231862a8740bcc2c3aba88f",
            "file": "src/app/admin/add-on-form/add-on-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-on-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-on-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addOnForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageDirection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { MaterialModule } from '../../material.module';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\nimport { AddOn } from '../../travler/travler.models';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-add-on-form',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    LanguageDirectionDirective,\n    TranslateModule,\n  ],\n  templateUrl: './add-on-form.component.html',\n  styleUrl: './add-on-form.component.scss',\n})\nexport class AddOnFormComponent {\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public addOnForm!: FormGroup;\n  public dir: LanguageDirection = 'ltr';\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { addOn?: AddOn },\n    private dialogRef: MatDialogRef<AddOnFormComponent>,\n    private languageService: LanguageService,\n    private fb: FormBuilder\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.initForm();\n  }\n\n  private initForm(): void {\n    this.addOnForm = this.fb.group({\n      uuid: [this.data.addOn?.uuid || ''],\n      enName: [this.data.addOn?.enName || '', Validators.required],\n      heName: [this.data.addOn?.heName || '', Validators.required],\n      esName: [this.data.addOn?.esName || '', Validators.required],\n      inStock: [this.data.addOn?.inStock || true],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.addOnForm.valid) {\n      this.dialogRef.close(this.addOnForm.value);\n    }\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.dir = languageDirection;\n  }\n}\n",
            "styleUrl": "./add-on-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddOnFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddOnFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  class=\"add-on-form-container\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <ng-container *ngIf=\"data.addOn; else newForm\">\n    <h2 mat-dialog-title>\n      {{ \"addOnForm.edit\" | translate }}\n    </h2>\n  </ng-container>\n  <ng-template #newForm>\n    <h2 mat-dialog-title>\n      {{ \"addOnForm.create\" | translate }}\n    </h2>\n  </ng-template>\n\n  <form [formGroup]=\"addOnForm\" (ngSubmit)=\"onSubmit()\">\n    <div mat-dialog-content>\n      <div class=\"form-fields\">\n        <mat-form-field appearance=\"outline\" class=\"full-width\" [dir]=\"dir\">\n          <mat-label>{{ \"addOnForm.enName\" | translate }}</mat-label>\n          <input matInput formControlName=\"enName\" required />\n          <mat-error\n            appLanguageDirection\n            *ngIf=\"\n              addOnForm.get('enName')?.invalid &&\n              addOnForm.get('enName')?.touched\n            \"\n          >\n            {{ \"addOnForm.enError\" | translate }}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\" [dir]=\"dir\">\n          <mat-label>{{ \"addOnForm.heName\" | translate }}</mat-label>\n          <input matInput formControlName=\"heName\" required />\n          <mat-error\n            appLanguageDirection\n            *ngIf=\"\n              addOnForm.get('heName')?.invalid &&\n              addOnForm.get('heName')?.touched\n            \"\n          >\n            {{ \"addOnForm.heError\" | translate }}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\" [dir]=\"dir\">\n          <mat-label>{{ \"addOnForm.esName\" | translate }}</mat-label>\n          <input matInput formControlName=\"esName\" required />\n          <mat-error\n            appLanguageDirection\n            *ngIf=\"\n              addOnForm.get('esName')?.invalid &&\n              addOnForm.get('esName')?.touched\n            \"\n          >\n            {{ \"addOnForm.esError\" | translate }}\n          </mat-error>\n        </mat-form-field>\n        <mat-checkbox [disableRipple]=\"true\" formControlName=\"inStock\">\n          A\n        </mat-checkbox>\n      </div>\n    </div>\n\n    <div mat-dialog-actions align=\"center\">\n      <button mat-button type=\"button\" mat-dialog-close>\n        {{ \"addOnForm.cancel\" | translate }}\n      </button>\n      <button\n        mat-flat-button\n        color=\"primary\"\n        type=\"submit\"\n        [disabled]=\"addOnForm.invalid\"\n      >\n        <ng-container *ngIf=\"data.addOn; else createAction\">\n          {{ \"addOnForm.save\" | translate }}\n        </ng-container>\n        <ng-template #createAction>\n          {{ \"addOnForm.create\" | translate }}\n        </ng-template>\n      </button>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "AddOnsOverviewComponent",
            "id": "component-AddOnsOverviewComponent-c127c7128d3051a3988e5710062d92180bbb0107533f3c516dc9d6f42041b23249bd221d1ce6c965cb79e23f11068d82c1c70b08a46d949f677b71d347f955a8",
            "file": "src/app/admin/add-ons-overview/add-ons-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-ons-overview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-ons-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addOns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddOn[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageDirection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['enName', 'heName', 'esName', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "filteredAddOns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddOn[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "searchTerm",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewAddOn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteAddOn",
                    "args": [
                        {
                            "name": "addOn",
                            "type": "AddOn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addOn",
                            "type": "AddOn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editAddOn",
                    "args": [
                        {
                            "name": "addOn",
                            "type": "AddOn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addOn",
                            "type": "AddOn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterAddOns",
                    "args": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAddOns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { filter, Observable, of, switchMap } from 'rxjs';\nimport { ItemsService } from '../../services/items.service';\nimport { AddOn } from '../../travler/travler.models';\nimport { MaterialModule } from '../../material.module';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddOnFormComponent } from '../add-on-form/add-on-form.component';\nimport { DeleteConfirmationModalComponent } from '../delete-confirmation-modal/delete-confirmation-modal.component';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\n\n@Component({\n  selector: 'app-add-ons-overview',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    PropertiesTranslationPipe,\n    LanguageDirectionDirective,\n  ],\n  templateUrl: './add-ons-overview.component.html',\n  styleUrl: './add-ons-overview.component.scss',\n})\nexport class AddOnsOverviewComponent {\n  readonly dialog = inject(MatDialog);\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n\n  searchTerm = new FormControl('');\n  displayedColumns: string[] = ['enName', 'heName', 'esName', 'actions'];\n\n  addOns: AddOn[] = [];\n  filteredAddOns: AddOn[] = [];\n  dir: LanguageDirection = 'ltr';\n\n  constructor(\n    private itemsService: ItemsService,\n    private languageService: LanguageService\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.loadAddOns();\n\n    this.searchTerm.valueChanges\n      .pipe(filter((term) => term !== null))\n      .subscribe((term) => {\n        this.filterAddOns(term);\n      });\n  }\n\n  private loadAddOns(): void {\n    this.itemsService.addOns$.subscribe((addOns) => {\n      const v = Array.from(addOns.values());\n      this.addOns = v;\n      this.filteredAddOns = v;\n    });\n  }\n\n  private filterAddOns(term: string): void {\n    const value = term.toLowerCase();\n    this.filteredAddOns = this.addOns.filter(\n      (addOn) =>\n        addOn.enName.toLowerCase().includes(value) ||\n        addOn.esName.toLowerCase().includes(value) ||\n        addOn.heName.toLowerCase().includes(value)\n    );\n  }\n\n  addNewAddOn(): void {\n    const dialogRef = this.dialog.open(AddOnFormComponent, {\n      width: '500px',\n      data: {},\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(\n        switchMap((result) => {\n          // if (result) {\n          //   return this.itemsService.createAddOn(result);\n          // }\n          return of(null);\n        })\n      )\n      .subscribe((result) => {\n        if (result) {\n          this.loadAddOns();\n        }\n      });\n  }\n\n  editAddOn(addOn: AddOn): void {\n    const dialogRef = this.dialog.open(AddOnFormComponent, {\n      width: '500px',\n      data: { addOn },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(\n        switchMap((result) => {\n          // if (result) {\n          //   return this.itemsService.updateAddOn(result);\n          // }\n          return of(null);\n        })\n      )\n      .subscribe((result) => {\n        if (result) {\n          this.loadAddOns();\n        }\n      });\n  }\n\n  deleteAddOn(addOn: AddOn): void {\n    // Check if this addon is used by any items before deletion\n    // this.itemsService.getItemsUsingAddOn(addOn.uuid).subscribe((count) => {\n    //   const dialogRef = this.dialog.open(DeleteConfirmationModalComponent, {\n    //     autoFocus: false,\n    //     data: {\n    //       type: 'addon',\n    //       objectToDelete: addOn,\n    //       usedAmount: count,\n    //     },\n    //   });\n    //   dialogRef\n    //     .afterClosed()\n    //     .pipe(\n    //       switchMap((result) => {\n    //         if (result) {\n    //           return this.itemsService.deleteAddOn(addOn);\n    //         }\n    //         return of(null);\n    //       })\n    //     )\n    //     .subscribe((result) => {\n    //       if (result) {\n    //         this.loadAddOns();\n    //       }\n    //     });\n    // });\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.dir = languageDirection;\n  }\n}\n",
            "styleUrl": "./add-ons-overview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  *ngIf=\"lang$ | async; let lang\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <mat-toolbar class=\"controls\">\n    <div class=\"tool-bar-actions\">\n      <button mat-fab aria-label=\"Add new add-on\" (click)=\"addNewAddOn()\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <div [dir]=\"dir\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>{{ \"addOnOverview.searchLabel\" | translate }}</mat-label>\n          <input\n            matInput\n            [formControl]=\"searchTerm\"\n            [placeholder]=\"'addOnOverview.searchPlaceholder' | translate\"\n          />\n        </mat-form-field>\n      </div>\n    </div>\n    <div class=\"spacer\"></div>\n  </mat-toolbar>\n\n  <table\n    mat-table\n    [dataSource]=\"filteredAddOns\"\n    appLanguageDirection\n    class=\"add-ons-table\"\n  >\n    <ng-container matColumnDef=\"enName\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"addOnOverview.tableHeader.enName\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let addOn\">{{ addOn.enName }}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"heName\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"addOnOverview.tableHeader.heName\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let addOn\">{{ addOn.heName }}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"esName\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"addOnOverview.tableHeader.esName\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let addOn\">{{ addOn.esName }}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"addOnOverview.tableHeader.actions\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let addOn\">\n        <button mat-icon-button (click)=\"editAddOn(addOn)\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-icon-button color=\"warn\" (click)=\"deleteAddOn(addOn)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n    <!-- No data row -->\n    <tr class=\"mat-row\" *matNoDataRow>\n      <td\n        class=\"mat-cell no-data-cell\"\n        [attr.colspan]=\"displayedColumns.length\"\n      >\n        {{ \"addOnOverview.noAddOns\" | translate }}\n      </td>\n    </tr>\n  </table>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a71b137476ebe8f78ab52efa071fa9d841fc9c4267d37e3422080444d0237e6e9c3d027b1ad44c6695a244292996862de9395936cedb93290a669a6db2f2bbf5",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'food-4-you'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NotificationComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { MaterialModule } from './material.module';\nimport { NotificationsService } from './services/notifications.service';\n\n@Component({\n  selector: 'app-root',\n  imports: [\n    RouterOutlet,\n    NotificationComponent,\n    TranslateModule,\n    CommonModule,\n    MaterialModule,\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'food-4-you';\n\n  constructor(private notificationsService: NotificationsService) {}\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"notification\">\n  <app-notification></app-notification>\n</div>\n\n<router-outlet />\n"
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-39265c4e80166ecbcb1c759437b3693a1b99e7e619ed52860b771399b21d3824dd83c27afa41c48f3c36f7d8664001419df8283225a3bd9b8d01bb4d13ea30c9",
            "file": "src/app/travler/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cartItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "itemCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "printerAvailable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "printResult",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPrinter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "printSampleReceipt",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ItemsPreviewComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CartItem, CartService } from '../../services/cart.service';\nimport { CommonModule } from '@angular/common';\nimport {\n  PrintResult,\n  ReceiptData,\n  ReceiptPrinterService,\n} from '../../services/printer.service';\nimport { ItemsPreviewComponent } from '../items-preview/items-preview.component';\nimport { combineLatest, filter } from 'rxjs';\nimport { ItemsService } from '../../services/items.service';\n\n@Component({\n  selector: 'app-cart',\n  imports: [CommonModule, ItemsPreviewComponent],\n  templateUrl: './cart.component.html',\n  styleUrl: './cart.component.scss',\n})\nexport class CartComponent {\n  cartItems: CartItem[] = [];\n  itemCount = 0;\n  printerAvailable = false;\n  printResult: boolean | null = null;\n\n  constructor(\n    private cartService: CartService,\n    private itemsService: ItemsService,\n    private printerService: ReceiptPrinterService\n  ) {}\n\n  ngOnInit(): void {\n    combineLatest([\n      this.itemsService.addOns$,\n      this.cartService.cartItems$,\n      this.cartService.getTotalItemsCount(),\n    ])\n      .pipe(filter(([addOns, _, _1]) => !!addOns?.size))\n      .subscribe(([_, cartItems, count]) => {\n        this.cartItems = cartItems;\n        this.itemCount = count;\n      });\n\n    this.checkPrinter();\n  }\n\n  checkPrinter(): void {\n    this.printerService.isPrinterAvailable().subscribe((available) => {\n      this.printerAvailable = available;\n      if (available) {\n        this.printSampleReceipt();\n      }\n    });\n  }\n\n  // TODO: change to kitchen order\n  printSampleReceipt(): void {\n    const sampleReceipt: ReceiptData = {\n      headerInfo: {\n        storeName: 'My Angular Store',\n        storeAddress: '123 Web Avenue',\n        storeCity: 'Internet City, Web 54321',\n      },\n      date: new Date().toLocaleString(),\n      transactionType: 'SALE',\n      items: [\n        {\n          sku: 'ANG001',\n          description: 'Angular Book',\n          price: 29.99,\n        },\n        {\n          sku: 'TS002',\n          description: 'TypeScript Guide',\n          price: 19.99,\n        },\n      ],\n      subtotal: 49.98,\n      tax: 3.0,\n      total: 52.98,\n      paymentInfo: {\n        method: 'Credit Card',\n        amount: '52.98',\n        cardNumber: 'Visa XXXX-XXXX-XXXX-4321',\n      },\n      footerInfo: {\n        refundPolicy: 'Return Policy',\n        returnPolicy: 'Returns accepted within 14 days',\n        thankYouMessage: 'Thank you for your purchase!',\n      },\n    };\n\n    this.printerService.printReceipt(sampleReceipt).subscribe((result) => {\n      this.printResult = result;\n      console.log('Print completed with result:', result);\n    });\n  }\n}\n",
            "styleUrl": "./cart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "printerService",
                        "type": "ReceiptPrinterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "printerService",
                        "type": "ReceiptPrinterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"gradient top-gradient\"></div>\n\n<div class=\"cart-wrapper\">\n  <img *ngIf=\"itemCount === 0\" class=\"empty-cart\" [src]=\"'/empty-cart.svg'\" />\n  <div *ngIf=\"itemCount !== 0\" class=\"cart-items\">\n    <app-items-preview [cartItems]=\"cartItems\"></app-items-preview>\n  </div>\n</div>\n<div class=\"gradient bottom-gradient\"></div>\n"
        },
        {
            "name": "CategoriesOverviewComponent",
            "id": "component-CategoriesOverviewComponent-d3d6a84e6dea3e889f032c1caf1bfb4750f4a93a2b00f2cb41b06bd70bcfef4847f14e4cb832d4a18b180d1fed555cfe311252709f578f8137345ec09aa3902c",
            "file": "src/app/admin/categories-overview/categories-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-categories-overview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./categories-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageDirection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'items', 'image', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "filteredCategories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "searchTerm",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "viewMode",
                    "defaultValue": "'grid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"grid\" | \"table\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { delay, filter, Observable, take } from 'rxjs';\nimport { ItemsService } from '../../services/items.service';\nimport { Category } from '../../travler/travler.models';\nimport { MaterialModule } from '../../material.module';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CategoryFormComponent } from '../category-form/category-form.component';\nimport { DeleteConfirmationModalComponent } from '../delete-confirmation-modal/delete-confirmation-modal.component';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\n\n@Component({\n  selector: 'app-categories-overview',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    PropertiesTranslationPipe,\n    LanguageDirectionDirective,\n  ],\n  templateUrl: './categories-overview.component.html',\n  styleUrl: './categories-overview.component.scss',\n})\nexport class CategoriesOverviewComponent {\n  readonly dialog = inject(MatDialog);\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n\n  viewMode: 'grid' | 'table' = 'grid';\n  searchTerm = new FormControl('');\n  displayedColumns: string[] = ['name', 'items', 'image', 'actions'];\n\n  categories: Category[] = [];\n  filteredCategories: Category[] = [];\n  dir: LanguageDirection = 'ltr';\n\n  constructor(\n    private itemsService: ItemsService,\n    private languageService: LanguageService\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.itemsService.allItems$.subscribe((categories) => {\n      this.categories = categories;\n      this.filteredCategories = categories;\n    });\n\n    this.searchTerm.valueChanges\n      .pipe(filter((term) => term !== null))\n      .subscribe((term) => {\n        this.filteredCategories = this.categories.filter((category) => {\n          const value = term.toLowerCase();\n          return (\n            category.enName.toLowerCase().includes(value) ||\n            category.esName.toLowerCase().includes(value) ||\n            category.heName.toLowerCase().includes(value)\n          );\n        });\n      });\n  }\n\n  addNewCategory(): void {\n    const dialogRef = this.dialog.open(CategoryFormComponent, {\n      data: {\n        cb: (data: { category: Category; image: File }) =>\n          this.itemsService.createCategory(data.category, data.image),\n      },\n    });\n\n    dialogRef.afterClosed().pipe(take(1)).subscribe();\n  }\n\n  editCategory(category: Category) {\n    const dialogRef = this.dialog.open(CategoryFormComponent, {\n      data: {\n        category,\n        cb: (data: { category: Category; image?: File }) =>\n          this.itemsService\n            .editCategory(data.category, data.image)\n            .pipe(delay(2000)),\n      },\n    });\n\n    dialogRef.afterClosed().pipe(take(1)).subscribe();\n  }\n\n  deleteCategory(category: Category) {\n    const dialogRef = this.dialog.open(DeleteConfirmationModalComponent, {\n      autoFocus: false,\n      data: {\n        type: 'category',\n        cb: (category: Category) =>\n          this.itemsService.deleteCategory(category).pipe(delay(2000)),\n        objectToDelete: category,\n        usedAmund: category.items.length,\n      },\n    });\n\n    dialogRef.afterClosed().pipe(take(1)).subscribe();\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.dir = languageDirection;\n  }\n}\n",
            "styleUrl": "./categories-overview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  *ngIf=\"lang$ | async; let lang\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <mat-toolbar class=\"controls\">\n    <div class=\"tool-bar-actions\">\n      <button mat-fab aria-label=\"Add new category\" (click)=\"addNewCategory()\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <div [dir]=\"dir\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>{{ \"categoryOverview.serchLabel\" | translate }}</mat-label>\n          <input\n            matInput\n            [formControl]=\"searchTerm\"\n            [placeholder]=\"'categoryOverview.serchPlaceholder' | translate\"\n          />\n        </mat-form-field>\n      </div>\n    </div>\n    <div class=\"spacer\"></div>\n    <mat-button-toggle-group class=\"view-mode-buttons\" [(value)]=\"viewMode\">\n      <mat-button-toggle value=\"grid\">\n        <mat-icon>grid_view</mat-icon\n        >{{ \"categoryOverview.gridView\" | translate }}\n      </mat-button-toggle>\n      <mat-button-toggle value=\"table\">\n        <mat-icon>table_chart</mat-icon>\n        {{ \"categoryOverview.tableView\" | translate }}\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </mat-toolbar>\n\n  <div *ngIf=\"viewMode === 'grid'\" class=\"grid-view\" appLanguageDirection>\n    <mat-card *ngFor=\"let category of filteredCategories\" class=\"card\">\n      <img\n        [src]=\"category.imageUrl\"\n        alt=\"{{ category.enName }}\"\n        class=\"card-image\"\n      />\n      <div class=\"card-content\">\n        <mat-card-title>{{\n          category | propertiesTranslation : lang : \"Name\"\n        }}</mat-card-title>\n        <mat-card-content>\n          <p>\n            {category.items.length, plural, =0 {\n            {{ \"categoryOverview.notContainItems\" | translate }} } =1 {\n            {{\n              \"categoryOverview.containOneItem\"\n                | translate : { includingItems: 1 }\n            }}\n            } other {\n            {{\n              \"categoryOverview.containItems\"\n                | translate : { includingItems: category.items.length }\n            }}\n            }}\n          </p>\n        </mat-card-content>\n      </div>\n      <mat-divider></mat-divider>\n\n      <mat-card-actions class=\"mat-card-actions\">\n        <div\n          class=\"action-icon-wrapper edit-action\"\n          (click)=\"editCategory(category)\"\n        >\n          <mat-icon>edit</mat-icon>\n        </div>\n        <mat-divider vertical></mat-divider>\n        <div\n          class=\"action-icon-wrapper delete-action\"\n          (click)=\"deleteCategory(category)\"\n        >\n          <mat-icon>delete</mat-icon>\n        </div>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n\n  <table\n    mat-table\n    [dataSource]=\"filteredCategories\"\n    *ngIf=\"viewMode === 'table'\"\n    appLanguageDirection\n  >\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"categoryOverview.tableHeader.name\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let category\">\n        {{ category | propertiesTranslation : lang : \"Name\" }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"items\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"categoryOverview.tableHeader.itemsIncluded\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let category\">\n        {category.items.length, plural, =0 {\n        {{ \"categoryOverview.notContainItems\" | translate }} } =1 {\n        {{\n          \"categoryOverview.containOneItem\" | translate : { includingItems: 1 }\n        }}\n        } other {\n        {{\n          \"categoryOverview.containItems\"\n            | translate : { includingItems: category.items.length }\n        }}\n        }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"image\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"categoryOverview.tableHeader.image\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let category\">\n        <img [src]=\"category.imageUrl\" alt=\"{{ category.enName }}\" width=\"50\" />\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"categoryOverview.tableHeader.actions\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let category\">\n        <button mat-icon-button (click)=\"editCategory(category)\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-icon-button color=\"warn\" (click)=\"deleteCategory(category)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n  </table>\n</div>\n"
        },
        {
            "name": "CategoryComponent",
            "id": "component-CategoryComponent-500a6bc3018afcd07f8a8d69dcc29372f46cc205002c5580faa776c7cde8bf1c4880cd2e685bd385dc1c3feee711264816dc81c3005b5ee523a56d214a0d9083",
            "file": "src/app/travler/category/category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./category.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Category | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ItemComponent",
                    "type": "component"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Category } from '../travler.models';\nimport { CommonModule } from '@angular/common';\nimport { ItemComponent } from '../item/item.component';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { Observable } from 'rxjs';\nimport { LanguageService, LanguageType } from '../../services/lang.service';\n\n@Component({\n  selector: 'app-category',\n  imports: [CommonModule, ItemComponent, PropertiesTranslationPipe],\n  templateUrl: './category.component.html',\n  styleUrl: './category.component.scss',\n})\nexport class CategoryComponent implements OnInit {\n  @Input() category: Category | undefined;\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n\n  constructor(private languageService: LanguageService) {}\n\n  ngOnInit(): void {\n    this.lang$ = this.languageService.currentLanguage$;\n  }\n}\n",
            "styleUrl": "./category.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"lang$ | async; let lang\">\n  <h2 class=\"item-name\" appLanguageDirection>\n    {{ category | propertiesTranslation : lang : \"Name\" }}\n  </h2>\n  <ul class=\"items\">\n    <li class=\"item\" *ngFor=\"let item of category?.items\" [id]=\"item.uuid\">\n      <app-item [item]=\"item\"></app-item>\n    </li>\n  </ul>\n</ng-container>\n"
        },
        {
            "name": "CategoryFormComponent",
            "id": "component-CategoryFormComponent-c4bc5029d44a19dac2503eafea249502a504b022d61441ba95cf1c74295c6a48ecd4969049eef7c6927dbfe29ef5134d7eab775b13ada0f90d9e3a4ecff8a8f5",
            "file": "src/app/admin/category-form/category-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./category-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "categoryImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cbPennding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageDirection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "imageChanged",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imageRemoved",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "LoadFileComponent",
                    "type": "component"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Observable, take } from 'rxjs';\nimport { MaterialModule } from '../../material.module';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\nimport { Category } from '../../travler/travler.models';\nimport { LoadFileComponent } from '../../components/load-file/load-file.component';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-category-form',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    LoadFileComponent,\n    LanguageDirectionDirective,\n    TranslateModule,\n  ],\n  templateUrl: './category-form.component.html',\n  styleUrl: './category-form.component.scss',\n})\nexport class CategoryFormComponent {\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public categoryForm!: FormGroup;\n  public categoryImage: File | undefined;\n  public dir: LanguageDirection = 'ltr';\n  public cbPennding = false;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA)\n    public data: {\n      category?: Category;\n      cb: (data: { category: Category; image?: File }) => Observable<any>;\n    },\n    private dialogRef: MatDialogRef<CategoryFormComponent>,\n    private languageService: LanguageService,\n    private fb: FormBuilder\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.initForm();\n  }\n\n  private initForm(): void {\n    this.categoryForm = this.fb.group({\n      uuid: [this.data.category?.uuid || ''],\n      type: [this.data.category?.type || ''],\n      enName: [this.data.category?.enName || '', Validators.required],\n      heName: [this.data.category?.heName || '', Validators.required],\n      esName: [this.data.category?.esName || '', Validators.required],\n      imageUrl: [this.data.category?.imageUrl || ''],\n    });\n  }\n\n  onSubmit(): void {\n    if (\n      this.categoryForm.valid &&\n      (this.categoryForm.controls['imageUrl'].value || this.categoryImage)\n    ) {\n      const formData = {\n        category: this.categoryForm.value,\n        image: this.categoryImage,\n      };\n\n      this.cbPennding = true;\n      this.dialogRef.disableClose = true;\n\n      this.data\n        .cb(formData)\n        .pipe(take(1))\n        .subscribe(() => {\n          this.dialogRef.close(true);\n        });\n    }\n  }\n\n  imageChanged(file: File): void {\n    const formData = new FormData();\n    formData.set('file', file, file.name);\n    this.categoryImage = file;\n  }\n\n  imageRemoved(): void {\n    this.categoryImage = undefined;\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.dir = languageDirection;\n  }\n}\n",
            "styleUrl": "./category-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CategoryFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CategoryFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  class=\"category-form-container\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <ng-container *ngIf=\"!cbPennding; else cbPenndingTitle\">\n    <ng-container *ngIf=\"data.category; else newForm\">\n      <h2 mat-dialog-title>\n        {{ \"categoryForm.edit\" | translate }}\n      </h2>\n    </ng-container>\n    <ng-template #newForm>\n      <h2 mat-dialog-title>\n        {{ \"categoryForm.new\" | translate }}\n      </h2>\n    </ng-template>\n  </ng-container>\n  <ng-template #cbPenndingTitle>\n    <h2 mat-dialog-title>\n      {{ \"categoryForm.saveCategory\" | translate }}\n    </h2>\n  </ng-template>\n\n  <form [formGroup]=\"categoryForm\" (ngSubmit)=\"onSubmit()\">\n    <div mat-dialog-content>\n      <ng-container *ngIf=\"!cbPennding; else cbPenndingContent\">\n        <div class=\"form-feilds\">\n          <mat-form-field appearance=\"outline\" class=\"full-width\" [dir]=\"dir\">\n            <mat-label>{{ \"categoryForm.enName\" | translate }}</mat-label>\n            <input matInput formControlName=\"enName\" required />\n            <mat-error\n              appLanguageDirection\n              *ngIf=\"\n                categoryForm.get('enName')?.invalid &&\n                categoryForm.get('enName')?.touched\n              \"\n            >\n              {{ \"categoryForm.enError\" | translate }}\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"full-width\" [dir]=\"dir\">\n            <mat-label>{{ \"categoryForm.heName\" | translate }}</mat-label>\n            <input matInput formControlName=\"heName\" required />\n            <mat-error\n              appLanguageDirection\n              *ngIf=\"\n                categoryForm.get('heName')?.invalid &&\n                categoryForm.get('heName')?.touched\n              \"\n            >\n              {{ \"categoryForm.heError\" | translate }}\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"full-width\" [dir]=\"dir\">\n            <mat-label>{{ \"categoryForm.esName\" | translate }}</mat-label>\n            <input matInput formControlName=\"esName\" required />\n            <mat-error\n              appLanguageDirection\n              *ngIf=\"\n                categoryForm.get('esName')?.invalid &&\n                categoryForm.get('esName')?.touched\n              \"\n            >\n              {{ \"categoryForm.esError\" | translate }}\n            </mat-error>\n          </mat-form-field>\n          <ng-container\n            *ngIf=\"categoryForm.get('imageUrl')?.value; else noExistingImage\"\n          >\n            <div class=\"image-section\">\n              <mat-tab-group>\n                <mat-tab [label]=\"'categoryForm.existingImage' | translate\">\n                  <div class=\"tab-body-content\">\n                    <img\n                      [src]=\"categoryForm.get('imageUrl')?.value\"\n                      class=\"existing-image\"\n                      [alt]=\"categoryForm.get('enName')?.value\"\n                    />\n                  </div>\n                </mat-tab>\n                <mat-tab>\n                  <ng-template mat-tab-label>\n                    <div\n                      *ngIf=\"categoryImage; else withoutBadge\"\n                      appLanguageDirection\n                      matBadge=\"!\"\n                      matBadgeOverlap=\"false\"\n                    >\n                      {{ \"categoryForm.newImage\" | translate }}\n                    </div>\n                    <ng-template #withoutBadge>\n                      <div>\n                        {{ \"categoryForm.newImage\" | translate }}\n                      </div>\n                    </ng-template>\n                  </ng-template>\n                  <div class=\"tab-body-content\">\n                    <div class=\"form-load-file\">\n                      <load-file\n                        (fileSelected)=\"imageChanged($event)\"\n                        (fileRemoved)=\"imageRemoved()\"\n                      ></load-file>\n                    </div></div\n                ></mat-tab>\n              </mat-tab-group>\n            </div>\n          </ng-container>\n          <ng-template #noExistingImage>\n            <div class=\"form-load-file\">\n              <load-file\n                (fileSelected)=\"imageChanged($event)\"\n                (fileRemoved)=\"imageRemoved()\"\n              ></load-file>\n            </div>\n          </ng-template>\n        </div>\n      </ng-container>\n      <ng-template #cbPenndingContent>\n        <div class=\"saving-spinner\">\n          <mat-spinner></mat-spinner>\n        </div>\n      </ng-template>\n    </div>\n\n    <div mat-dialog-actions align=\"center\">\n      <button mat-button type=\"button\" mat-dialog-close [disabled]=\"cbPennding\">\n        {{ \"categoryForm.cancel\" | translate }}\n      </button>\n      <button\n        mat-flat-button\n        color=\"primary\"\n        type=\"submit\"\n        [disabled]=\"\n          cbPennding ||\n          categoryForm.invalid ||\n          (!this.categoryForm.controls['imageUrl'].value && !this.categoryImage)\n        \"\n      >\n        <ng-container *ngIf=\"data.category; else createAction\">\n          {{ \"categoryForm.save\" | translate }}\n        </ng-container>\n        <ng-template #createAction>\n          {{ \"categoryForm.create\" | translate }}\n        </ng-template>\n      </button>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-ee2bd73fa231c2b100aabda5796d70925e3e785f0204fc412cd97929c569d43ea81dc3b5143f5b2cfcbaa11b744193b26e2419fb87aaddb67f92b39564a55b58",
            "file": "src/app/admin/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dashboardMenuButtons",
                    "defaultValue": "[\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.generalOverview`,\n      icon: 'space_dashboard',\n      route: 'general-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.categoriesOverview`,\n      icon: 'apps',\n      route: 'categories-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.itemsOverview`,\n      icon: 'fastfood',\n      route: 'items-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.addOnsOverview`,\n      icon: 'extension',\n      route: 'add-ons-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.ordersOverview`,\n      icon: 'list_alt',\n      route: 'orders-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.scheduleOverview`,\n      icon: 'calendar_month',\n      route: 'schedule-overview',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardMenuButton[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isSidenavExpanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedMenuButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardMenuButton | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "stickyLeft",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "menuButtonClicked",
                    "args": [
                        {
                            "name": "menuButton",
                            "type": "DashboardMenuButton",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuButton",
                            "type": "DashboardMenuButton",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSidenav",
                    "args": [
                        {
                            "name": "_",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "MenuIconComponent",
                    "type": "component"
                },
                {
                    "name": "LanguagePickerComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MaterialModule } from '../../material.module';\nimport { MenuIconComponent } from '../../components/menu-icon/menu-icon.component';\nimport { LanguagePickerComponent } from '../../components/language-picker/language-picker.component';\nimport { NavigationEnd, Router, RouterOutlet } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { filter, map, Observable, startWith } from 'rxjs';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\n\ninterface DashboardMenuButton {\n  titleKey: string;\n  icon: string;\n  route: string;\n}\n\nconst TRANSLATE_KEY_PREFIX = 'dashboard.menu.buttons.titles';\n@Component({\n  selector: 'app-dashboard',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    MenuIconComponent,\n    LanguagePickerComponent,\n    RouterOutlet,\n    TranslateModule,\n    LanguageDirectionDirective,\n  ],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n})\nexport class DashboardComponent {\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public selectedMenuButton: DashboardMenuButton | undefined;\n  public stickyLeft = false;\n\n  constructor(\n    private router: Router,\n    private languageService: LanguageService\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.router.events\n      .pipe(\n        filter(\n          (event): event is NavigationEnd => event instanceof NavigationEnd\n        ),\n        map((event: NavigationEnd) => event.urlAfterRedirects), // Using urlAfterRedirects for more accurate URL\n        startWith(this.router.url) // Ensure initial URL is captured\n      )\n      .subscribe((currentUrl) => {\n        this.selectedMenuButton = this.dashboardMenuButtons.find((button) =>\n          currentUrl.includes(button.route)\n        );\n      });\n  }\n\n  dashboardMenuButtons: DashboardMenuButton[] = [\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.generalOverview`,\n      icon: 'space_dashboard',\n      route: 'general-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.categoriesOverview`,\n      icon: 'apps',\n      route: 'categories-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.itemsOverview`,\n      icon: 'fastfood',\n      route: 'items-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.addOnsOverview`,\n      icon: 'extension',\n      route: 'add-ons-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.ordersOverview`,\n      icon: 'list_alt',\n      route: 'orders-overview',\n    },\n    {\n      titleKey: `${TRANSLATE_KEY_PREFIX}.scheduleOverview`,\n      icon: 'calendar_month',\n      route: 'schedule-overview',\n    },\n  ];\n\n  isSidenavExpanded = false;\n\n  toggleSidenav(_: boolean): void {\n    this.isSidenavExpanded = !this.isSidenavExpanded;\n  }\n\n  menuButtonClicked(menuButton: DashboardMenuButton): void {\n    if (menuButton.route !== this.selectedMenuButton?.route) {\n      this.selectedMenuButton = menuButton;\n      this.router.navigate([`/admin/${menuButton.route}`]);\n    }\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.stickyLeft = languageDirection === 'ltr';\n  }\n}\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  class=\"dashboard-wrapper\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <mat-toolbar>\n    <mat-toolbar-row>\n      <menu-icon (menuStateChanged)=\"toggleSidenav($event)\"></menu-icon>\n      <div class=\"spacer\"></div>\n      <app-language-picker></app-language-picker>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <mat-sidenav-container class=\"content\" [hasBackdrop]=\"false\">\n    <mat-sidenav\n      #sidenav\n      mode=\"over\"\n      [ngClass]=\"{ expanded: isSidenavExpanded, collapsed: !isSidenavExpanded }\"\n      opened=\"true\"\n    >\n      <div class=\"menu-buttons\">\n        <div\n          class=\"menu-button\"\n          [class.active-menu-button]=\"\n            selectedMenuButton?.route === button.route\n          \"\n          *ngFor=\"let button of dashboardMenuButtons\"\n          (click)=\"menuButtonClicked(button)\"\n        >\n          <mat-icon\n            class=\"menu-icon\"\n            aria-hidden=\"false\"\n            aria-label=\"Remove all items\"\n            [fontIcon]=\"button.icon\"\n          ></mat-icon>\n          <div class=\"menu-text\">\n            {{ button.titleKey | translate }}\n          </div>\n        </div>\n      </div>\n    </mat-sidenav>\n    <mat-sidenav-content>\n      <div\n        class=\"content-body\"\n        [style.margin-left]=\"\n          stickyLeft ? (isSidenavExpanded ? '200px' : '70px') : ''\n        \"\n        [style.margin-right]=\"\n          !stickyLeft ? (isSidenavExpanded ? '200px' : '70px') : ''\n        \"\n      >\n        <router-outlet />\n      </div>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n"
        },
        {
            "name": "DeleteConfirmationModalComponent",
            "id": "component-DeleteConfirmationModalComponent-26299df7a7511631fb6db689e6d07f67c628f1453221552d387d7a7c76ddc5b7385efafb2ba04eaf310343e4a8e8ebf3eadadd44aa3b98046d47d473916c5fde",
            "file": "src/app/admin/delete-confirmation-modal/delete-confirmation-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-confirmation-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./delete-confirmation-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cbPennding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "objectToDelete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category | Item | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeleteTyep | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "usedAmund",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Observable, take } from 'rxjs';\nimport { LanguageType, LanguageService } from '../../services/lang.service';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../../material.module';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { CommonModule } from '@angular/common';\nimport { Category, Item } from '../../travler/travler.models';\n\ntype DeleteTyep = 'category' | 'item' | 'add-on';\n\n@Component({\n  selector: 'app-delete-confirmation-modal',\n  imports: [\n    CommonModule,\n    TranslateModule,\n    MaterialModule,\n    PropertiesTranslationPipe,\n    LanguageDirectionDirective,\n  ],\n  templateUrl: './delete-confirmation-modal.component.html',\n  styleUrl: './delete-confirmation-modal.component.scss',\n})\nexport class DeleteConfirmationModalComponent {\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public type: DeleteTyep | undefined;\n  public usedAmund: number | undefined;\n  public objectToDelete: Category | Item | undefined;\n  public cbPennding = false;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA)\n    public data: {\n      type?: DeleteTyep;\n      cb: (obj?: Category | Item) => Observable<any>;\n      objectToDelete: Category | Item;\n      usedAmund?: number;\n    },\n    private dialogRef: MatDialogRef<DeleteConfirmationModalComponent>,\n    private languageService: LanguageService\n  ) {\n    this.type = this.data.type;\n    this.objectToDelete = this.data.objectToDelete;\n    this.usedAmund = this.data.usedAmund;\n    this.lang$ = this.languageService.currentLanguage$;\n  }\n\n  onSubmit(): void {\n    this.cbPennding = true;\n    this.dialogRef.disableClose = true;\n\n    this.data\n      .cb(this.objectToDelete)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.dialogRef.close(true);\n      });\n  }\n}\n",
            "styleUrl": "./delete-confirmation-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteConfirmationModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteConfirmationModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  class=\"delete-confirmation-modal-container\"\n  *ngIf=\"lang$ | async; let lang\"\n  appLanguageDirection\n>\n  <ng-container *ngIf=\"!cbPennding; else deleteTitle\">\n    <h2 mat-dialog-title>\n      {{\n        \"deleteConfirmationModal.title\"\n          | translate\n            : { name: objectToDelete | propertiesTranslation : lang : \"Name\" }\n      }}\n    </h2>\n  </ng-container>\n  <ng-template #deleteTitle>\n    <h2 mat-dialog-title>\n      {{ \"deleteConfirmationModal.titleOnCallback\" | translate }}\n    </h2>\n  </ng-template>\n\n  <div mat-dialog-content class=\"content\">\n    <ng-container *ngIf=\"!cbPennding; else deleteLoader\">\n      <ng-container [ngSwitch]=\"type\">\n        <ng-container *ngSwitchCase=\"'category'\">\n          <ng-container *ngIf=\"usedAmund; else noItemsInCategory\">\n            {{\n              \"deleteConfirmationModal.categoryWithItems\"\n                | translate : { itemAmount: usedAmund }\n            }}\n          </ng-container>\n          <ng-template #noItemsInCategory>\n            {{ \"deleteConfirmationModal.categoryWithoutItems\" | translate }}\n          </ng-template>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'item'\">\n          {{ \"deleteConfirmationModal.item\" | translate }}\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'add-on'\">\n          <ng-container *ngIf=\"usedAmund; else noItemsInCategory\">\n            {{\n              \"deleteConfirmationModal.addOnExistOnItems\"\n                | translate : { itemName: usedAmund }\n            }}\n          </ng-container>\n          <ng-template #noItemsInCategory>\n            {{ \"deleteConfirmationModal.addOnNotExistOnItems\" | translate }}\n          </ng-template>\n        </ng-container>\n        <ng-container *ngSwitchDefault> AAAAA </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #deleteLoader>\n      <div class=\"loader-wrapper\">\n        <span class=\"loader\"></span>\n      </div>\n    </ng-template>\n  </div>\n\n  <div mat-dialog-actions align=\"center\">\n    <button mat-stroked-button mat-dialog-close [disabled]=\"cbPennding\">\n      {{ \"deleteConfirmationModal.cancel\" | translate }}\n    </button>\n    <button\n      mat-stroked-button\n      class=\"delete-permanently\"\n      type=\"button\"\n      (click)=\"onSubmit()\"\n      [disabled]=\"cbPennding\"\n    >\n      {{ \"deleteConfirmationModal.submit\" | translate }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "GeneralOverviewComponent",
            "id": "component-GeneralOverviewComponent-c03b72321e8021480fcfe47a576daaedae773137d0ab2c249ad95ef43e6dfe52c0812c1a8055a596e5917ab04dd362c065a97fdf39f9f905f2881da2a4827411",
            "file": "src/app/admin/general-overview/general-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-general-overview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./general-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-general-overview',\n  imports: [],\n  templateUrl: './general-overview.component.html',\n  styleUrl: './general-overview.component.scss'\n})\nexport class GeneralOverviewComponent {\n\n}\n",
            "styleUrl": "./general-overview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>general-overview works!</p>\n"
        },
        {
            "name": "HeaderActionsComponent",
            "id": "component-HeaderActionsComponent-88456722f46f12e6e9ca97fb3b6661da79178c35dd679353a9e932556487944baa7ed8119cf973fabeb1c1e2d19674d3480f28d4d283d3c2b026fc155a048b59",
            "file": "src/app/travler/header-actions/header-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-actions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header-actions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRoute$",
                    "defaultValue": "new Observable<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "filteredResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(Category | Item)[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "itemCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "searchOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "searchQuery",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollToCategory",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchCliked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SearchComponent",
                    "type": "component"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CartService } from '../../services/cart.service';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, map, Observable, startWith } from 'rxjs';\nimport { Category, Item } from '../travler.models';\nimport { SearchComponent } from '../search/search.component';\n\n@Component({\n  selector: 'app-header-actions',\n  imports: [CommonModule, SearchComponent, MaterialModule],\n  templateUrl: './header-actions.component.html',\n  styleUrl: './header-actions.component.scss',\n})\nexport class HeaderActionsComponent implements OnInit {\n  itemCount = 0;\n  currentRoute$: Observable<string> = new Observable<string>();\n  searchOpen = false;\n\n  searchQuery: string = '';\n  filteredResults: (Category | Item)[] = [];\n\n  constructor(private cartService: CartService, private _router: Router) {}\n\n  ngOnInit(): void {\n    this.currentRoute$ = this._router.events.pipe(\n      filter((event): event is NavigationEnd => event instanceof NavigationEnd),\n      map((event: NavigationEnd) => event.urlAfterRedirects), // Using urlAfterRedirects for more accurate URL\n      startWith(this._router.url) // Ensure initial URL is captured\n    );\n\n    this.cartService.getTotalItemsCount().subscribe((count) => {\n      this.itemCount = count;\n    });\n  }\n\n  searchCliked(): void {\n    this.searchOpen = !this.searchOpen;\n  }\n\n  scrollToCategory(uuid: string) {\n    const element = document.getElementById(uuid);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n  navigateTo(route: string) {\n    this._router.navigate([`/travler/${route}`]);\n  }\n}\n",
            "styleUrl": "./header-actions.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"currentRoute$ | async as currentRoute\">\n  <ng-container *ngIf=\"currentRoute.includes('cart') !== true; else cartHeader\">\n    <div class=\"header-actions\">\n      <div class=\"cart-icon-container\" (click)=\"navigateTo('cart')\">\n        <mat-icon\n          class=\"cart-icon\"\n          aria-hidden=\"false\"\n          aria-label=\"Go to cart\"\n          fontSet=\"material-icons-outlined\"\n        >\n          shopping_bag\n        </mat-icon>\n        <span class=\"cart-badge\" *ngIf=\"itemCount > 0\">{{ itemCount }}</span>\n      </div>\n      <app-search></app-search>\n    </div>\n  </ng-container>\n  <ng-template #cartHeader>\n    <mat-icon\n      (click)=\"navigateTo('')\"\n      class=\"cart-icon\"\n      aria-hidden=\"false\"\n      aria-label=\"Go to menu\"\n      fontSet=\"material-icons-outlined\"\n    >\n      menu_book\n    </mat-icon>\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "ImagePreviewComponent",
            "id": "component-ImagePreviewComponent-be6e1fd3893da0adc8f35181c0d761f5eba3d5e101b0dc85edbbdb59190995911b84a6d4fd513a0a8c285706afa2f1c08d183bb87083ef475813ab49437afb42",
            "file": "src/app/components/image-preview/image-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-preview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./image-preview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "attachment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "File | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageLoaded",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "imageUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-image-preview',\n  imports: [CommonModule],\n  templateUrl: './image-preview.component.html',\n  styleUrl: './image-preview.component.scss',\n})\nexport class ImagePreviewComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() attachment: File | undefined;\n\n  imageLoaded: boolean | null = null;\n  imageUrl: string | null = null;\n\n  ngOnInit(): void {\n    this.setupPreview();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.setupPreview();\n  }\n\n  ngOnDestroy(): void {\n    if (this.imageUrl) {\n      URL.revokeObjectURL(this.imageUrl);\n    }\n  }\n\n  private setupPreview(): void {\n    if (this.attachment && this.attachment.type.startsWith('image/')) {\n      this.imageUrl = URL.createObjectURL(this.attachment);\n\n      const img = new Image();\n      img.src = this.imageUrl;\n      img.onload = () => {\n        this.imageLoaded = true;\n      };\n    } else {\n      this.imageUrl = null;\n    }\n  }\n}\n",
            "styleUrl": "./image-preview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<div class=\"image-preview-wrapper\">\n  <ng-container *ngIf=\"imageLoaded && !!attachment; else loading\">\n    <img [src]=\"imageUrl\" [alt]=\"attachment.name\" />\n  </ng-container>\n  <ng-template #loading>\n    <div class=\"spinner\"></div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "ItemAddOnsSelectionsComponent",
            "id": "component-ItemAddOnsSelectionsComponent-ba02ffbcc5e6845eba0ef5ce834b4d031eb1831a0cefbba47376e183d86c6971fb9ed606a4a209e4855fa7ff27ffa31498dff89a6d31073c19f7a4b37088f35d",
            "file": "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-add-ons-selections",
            "styleUrls": [
                "./item-add-ons-selections.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./item-add-ons-selections.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableAddOns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalAddOn[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Item>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "freeAvailableAddOns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "pricePerAddOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedAddOnUuids",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedFreeAddOnUuids",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCheckboxChange",
                    "args": [
                        {
                            "name": "addOn",
                            "type": "ModalAddOn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addOn",
                            "type": "ModalAddOn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { MaterialModule } from '../../material.module';\nimport { AddOn, Item } from '../travler.models';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ItemsService } from '../../services/items.service';\nimport { FormsModule } from '@angular/forms';\nimport { LanguageService, LanguageType } from '../../services/lang.service';\nimport { Observable } from 'rxjs';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { TranslateModule } from '@ngx-translate/core';\n\ninterface CheckboxState {\n  selected: boolean;\n}\ntype ModalAddOn = CheckboxState & AddOn;\n\n@Component({\n  selector: 'app-item-add-ons-selections',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    LanguageDirectionDirective,\n    PropertiesTranslationPipe,\n    TranslateModule,\n  ],\n  templateUrl: './item-add-ons-selections.component.html',\n  styleUrls: ['./item-add-ons-selections.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItemAddOnsSelectionsComponent {\n  public lang$: Observable<LanguageType> | undefined;\n  public availableAddOns: ModalAddOn[] = [];\n  public selectedAddOnUuids: string[] = [];\n  public pricePerAddOn: number | undefined;\n  public freeAvailableAddOns: number | undefined;\n  public selectedFreeAddOnUuids: string[] = [];\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Partial<Item>,\n    private languageService: LanguageService,\n    private itemsService: ItemsService,\n    private dialogRef: MatDialogRef<ItemAddOnsSelectionsComponent>\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n\n    this.pricePerAddOn = data?.addOnPrice;\n    this.freeAvailableAddOns = data?.freeAvailableAddOns;\n    this.availableAddOns = (data.availableAddOnUuids as string[])\n      .map((addOnUuid) => this.itemsService.getAddOnByUuid(addOnUuid))\n      .filter((addOn) => !!addOn)\n      .map((addOn) => ({\n        selected: false,\n        ...addOn,\n      }));\n  }\n\n  onCheckboxChange(addOn: ModalAddOn) {\n    if (addOn.selected) {\n      this.selectedAddOnUuids.push(addOn.uuid);\n      // TODO: display current cost\n      // if (\n      //   this.selectedFreeAddOnUuids.length !== this.freeAvailableAddOns &&\n      //   !this.selectedFreeAddOnUuids.includes(addOn.uuid)\n      // ) {\n      //   this.selectedFreeAddOnUuids.push(addOn.uuid);\n      // }\n    } else {\n      const index = this.selectedAddOnUuids.indexOf(addOn.uuid);\n      if (index >= 0) {\n        this.selectedAddOnUuids.splice(index, 1);\n      }\n    }\n  }\n\n  onSave() {\n    this.dialogRef.close(this.selectedAddOnUuids);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n  padding: 20px 24px 0;\n\n  .sub-title {\n    color: gray;\n  }\n}\n\n.mdc-list-item {\n  padding: 0;\n}\n\n.add-on-name {\n  font-size: 18px;\n}\n\n.actions-button {\n  font-size: 18px;\n}\n",
                    "styleUrl": "./item-add-ons-selections.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<Item>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ItemAddOnsSelectionsComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<Item>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ItemAddOnsSelectionsComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  *ngIf=\"lang$ | async; let lang\"\n  class=\"available-add-ons\"\n  appLanguageDirection\n>\n  <div class=\"title\">\n    <h1>{{ \"addOns.title\" | translate }}</h1>\n    <h3 class=\"sub-title\">\n      {{\n        \"addOns.subTitle\" | translate : { amountOfAddOns: freeAvailableAddOns }\n      }}\n    </h3>\n  </div>\n  <div mat-dialog-content>\n    <mat-list>\n      <mat-list-item *ngFor=\"let addOn of availableAddOns\">\n        <mat-checkbox\n          [disableRipple]=\"true\"\n          [(ngModel)]=\"addOn.selected\"\n          (change)=\"onCheckboxChange(addOn)\"\n        >\n          <div class=\"add-on-row\">\n            <span class=\"add-on-name\">{{\n              addOn | propertiesTranslation : lang : \"Name\"\n            }}</span>\n            <span\n              *ngIf=\"\n                freeAvailableAddOns &&\n                pricePerAddOn &&\n                !addOn.selected &&\n                selectedAddOnUuids.length >= freeAvailableAddOns\n              \"\n              class=\"add-on-name\"\n            >\n              - {{ pricePerAddOn }}GTQ</span\n            >\n          </div>\n        </mat-checkbox>\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <div mat-dialog-actions align=\"center\">\n    <button mat-button class=\"actions-button\" (click)=\"onSave()\">\n      {{ \"addOns.add\" | translate }}\n    </button>\n    <button mat-button class=\"actions-button\" mat-dialog-close>\n      {{ \"addOns.close\" | translate }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "ItemComponent",
            "id": "component-ItemComponent-4360c618f69bc84f898804b965aa2983ef4355b41c99b5b4ee85a363959c09ba55759c7e709fe39c799095537ef88b287ee8f4851107fa17d38dfd51f8acfc79",
            "file": "src/app/travler/item/item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Item | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "itemCounter$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItemToCart",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSelectedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Item } from '../travler.models';\nimport { Observable } from 'rxjs';\nimport { LanguageService, LanguageType } from '../../services/lang.service';\nimport { CommonModule } from '@angular/common';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { MaterialModule } from '../../material.module';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { CartService } from '../../services/cart.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ItemsSummaryModalComponent } from '../items-summary-modal/items-summary-modal.component';\nimport { ItemAddOnsSelectionsComponent } from '../item-add-ons-selections/item-add-ons-selections.component';\n\n@Component({\n  selector: 'app-item',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    LanguageDirectionDirective,\n    PropertiesTranslationPipe,\n  ],\n  templateUrl: './item.component.html',\n  styleUrl: './item.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItemComponent implements OnInit {\n  @Input() item: Item | undefined;\n\n  readonly dialog = inject(MatDialog);\n\n  public lang$: Observable<LanguageType> | undefined;\n  public itemCounter$: Observable<number> | undefined;\n\n  constructor(\n    private languageService: LanguageService,\n    private cartService: CartService\n  ) {}\n\n  ngOnInit(): void {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.itemCounter$ = this.cartService.getItemCount(this.item?.uuid || '');\n  }\n\n  addItemToCart(item?: Item): void {\n    if (item?.availableAddOnUuids && item.availableAddOnUuids.length) {\n      const dialogRef = this.dialog.open(ItemAddOnsSelectionsComponent, {\n        // width: '80%',\n        data: {\n          availableAddOnUuids: item?.availableAddOnUuids,\n          addOnPrice: item?.addOnPrice,\n          freeAvailableAddOns: item?.freeAvailableAddOns,\n        },\n      });\n\n      dialogRef.afterClosed().subscribe((selectedAddOnUuids?: string[]) => {\n        if (selectedAddOnUuids) {\n          // Handle the selected add-ons UUIDs\n          console.log('Selected Add-Ons:', selectedAddOnUuids);\n          this.cartService.addItem(item, selectedAddOnUuids);\n        }\n      });\n    } else if (item) {\n      this.cartService.addItem(item);\n    }\n  }\n\n  showSelectedItems() {\n    if (!this.item) {\n      return;\n    }\n    const itemUuid = this.item.uuid;\n\n    const cartItem = this.cartService.getCartItem(itemUuid);\n    if (cartItem) {\n      const dialogRef = this.dialog.open(ItemsSummaryModalComponent, {\n        width: '80%',\n        data: cartItem,\n      });\n\n      dialogRef.afterClosed().subscribe((result) => {\n        console.log(`Dialog result: ${result}`);\n      });\n    }\n  }\n}\n",
            "styleUrl": "./item.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"lang$ | async; let lang\" class=\"item\">\n  <div\n    *ngIf=\"itemCounter$ | async; let itemCounter\"\n    class=\"item-counter\"\n    appLanguageDirection\n    (click)=\"showSelectedItems()\"\n  >\n    <div class=\"puls\"></div>\n    <div class=\"number\">\n      {{ itemCounter }}\n    </div>\n  </div>\n  <div class=\"item-first-half\">\n    <div class=\"item-name\" appLanguageDirection>\n      {{ item | propertiesTranslation : lang : \"Name\" }}\n    </div>\n    <img\n      [src]=\"item?.imageUrl\"\n      alt=\"{{ item | propertiesTranslation : lang : 'Name' }}\"\n    />\n  </div>\n  <div class=\"item-last-half\">\n    <div class=\"item-details\">\n      {{ item | propertiesTranslation : lang : \"Details\" }}\n    </div>\n    <div class=\"item-actions\">\n      <div class=\"item-price\">{{ item?.price }} GTQ</div>\n      <button\n        class=\"add-to-cart\"\n        appLanguageDirection\n        (click)=\"addItemToCart(item)\"\n      >\n        <mat-icon\n          aria-hidden=\"false\"\n          aria-label=\"Add to cart\"\n          fontIcon=\"add\"\n        ></mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ItemFormComponent",
            "id": "component-ItemFormComponent-55a1c652f378267439071cc41fe2bd719049d12fd76a4b6c015d3c3c137cf2a66571940913c38e96557e48c4e551de9c00c2a48756b8edafca679f60b6392cbc",
            "file": "src/app/admin/item-form/item-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./item-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addOnCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "availableAddOns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddOn[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cbPennding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageDirection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "filteredAddOns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AddOn[]> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "itemForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "itemImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterAddOns",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AddOn[]",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAddOnName",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AddOn | undefined",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imageChanged",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imageRemoved",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAddOns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "addOnUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addOnUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "LoadFileComponent",
                    "type": "component"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { combineLatest, map, Observable, of, startWith, take, tap } from 'rxjs';\nimport { MaterialModule } from '../../material.module';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\nimport { AddOn, Category, Item } from '../../travler/travler.models';\nimport { LoadFileComponent } from '../../components/load-file/load-file.component';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItemsService } from '../../services/items.service';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\n\n@Component({\n  selector: 'app-item-form',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    LoadFileComponent,\n    LanguageDirectionDirective,\n    TranslateModule,\n    PropertiesTranslationPipe,\n  ],\n  templateUrl: './item-form.component.html',\n  styleUrl: './item-form.component.scss',\n})\nexport class ItemFormComponent implements OnInit {\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public itemForm!: FormGroup;\n  public itemImage: File | undefined;\n  public dir: LanguageDirection = 'ltr';\n  public availableAddOns: AddOn[] = [];\n  public categories: Category[] = [];\n\n  public addOnCtrl = new FormControl();\n  public filteredAddOns: Observable<AddOn[]> | undefined;\n  cbPennding = false;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA)\n    public data: {\n      item?: Item;\n      categoryUuid?: string;\n      cb: (data: { item: Item; image?: File }) => Observable<any>;\n    },\n    private dialogRef: MatDialogRef<ItemFormComponent>,\n    private languageService: LanguageService,\n    private itemsService: ItemsService,\n    private fb: FormBuilder\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n\n    this.filteredAddOns = this.addOnCtrl.valueChanges.pipe(\n      startWith(null),\n      map((addOn: string | null) =>\n        addOn\n          ? this._filterAddOns(addOn)\n          : this.availableAddOns\n              .slice()\n              .filter(\n                (addOn) =>\n                  !this.itemForm\n                    .get('availableAddOnUuids')\n                    ?.value?.includes(addOn.uuid)\n              )\n      )\n    );\n  }\n\n  ngOnInit(): void {\n    this.loadAddOns();\n    this.initForm();\n  }\n\n  private loadAddOns(): void {\n    combineLatest([\n      this.itemsService.addOns$,\n      this.itemsService.allItems$,\n    ]).subscribe(([addOns, categories]) => {\n      this.categories = categories;\n\n      this.availableAddOns = Array.from(addOns.values());\n    });\n  }\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    if (value) {\n      const addOn = this.availableAddOns.find((addOn) => addOn.uuid === value);\n      if (addOn) {\n        this.itemForm.get('availableAddOnUuids')?.value?.push(addOn.uuid);\n        this.addOnCtrl.setValue(null);\n      }\n    }\n  }\n\n  remove(addOnUuid: string): void {\n    const selectedAddOns = this.itemForm.get('availableAddOnUuids')?.value;\n    const index = selectedAddOns.indexOf(addOnUuid);\n\n    if (index >= 0) {\n      selectedAddOns.splice(index, 1);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    const addOnUuid = event.option.value;\n    if (!this.itemForm.get('availableAddOnUuids')?.value?.includes(addOnUuid)) {\n      this.itemForm.get('availableAddOnUuids')?.value.push(addOnUuid);\n    }\n    this.addOnCtrl.setValue(null);\n  }\n\n  onSubmit(): void {\n    if (\n      this.itemForm.valid &&\n      (this.itemForm.controls['imageUrl'].value || this.itemImage)\n    ) {\n      const formData = {\n        item: this.itemForm.value,\n        image: this.itemImage,\n      };\n\n      this.cbPennding = true;\n      this.dialogRef.disableClose = true;\n\n      this.data\n        .cb(formData)\n        .pipe(take(1))\n        .subscribe(() => {\n          this.dialogRef.close(true);\n        });\n    }\n  }\n\n  imageChanged(file: File): void {\n    const formData = new FormData();\n    formData.set('file', file, file.name);\n    this.itemImage = file;\n  }\n\n  imageRemoved(): void {\n    this.itemImage = undefined;\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.dir = languageDirection;\n  }\n\n  getAddOnName(uuid: string): AddOn | undefined {\n    const addOn = this.availableAddOns.find((addOn) => addOn.uuid === uuid);\n    return addOn;\n  }\n\n  private initForm(): void {\n    this.itemForm = this.fb.group({\n      uuid: [this.data.item?.uuid || ''],\n      categoryId: [this.data.categoryUuid || '', Validators.required],\n      enName: [this.data.item?.enName || '', Validators.required],\n      heName: [this.data.item?.heName || '', Validators.required],\n      esName: [this.data.item?.esName || '', Validators.required],\n      enDetails: [this.data.item?.enDetails || '', Validators.required],\n      heDetails: [this.data.item?.heDetails || '', Validators.required],\n      esDetails: [this.data.item?.esDetails || '', Validators.required],\n      imageUrl: [this.data.item?.imageUrl || ''],\n      price: [\n        this.data.item?.price || 0,\n        [Validators.required, Validators.min(0)],\n      ],\n      availableAddOnUuids: [this.data.item?.availableAddOnUuids || []],\n      addOnPrice: [this.data.item?.addOnPrice || 0],\n      freeAvailableAddOns: [this.data.item?.freeAvailableAddOns || 0],\n    });\n  }\n\n  private _filterAddOns(value: string): AddOn[] {\n    const filterValue = value.toLowerCase();\n    return this.availableAddOns.filter(\n      (addOn) =>\n        addOn.enName.toLowerCase().includes(filterValue) ||\n        addOn.heName.toLowerCase().includes(filterValue) ||\n        addOn.esName.toLowerCase().includes(filterValue)\n    );\n  }\n}\n",
            "styleUrl": "./item-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ItemFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ItemFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  *ngIf=\"lang$ | async; let lang\"\n  class=\"item-form-container\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <ng-container *ngIf=\"!cbPennding; else cbPendingTitle\">\n    <ng-container *ngIf=\"data.item; else newForm\">\n      <h2 mat-dialog-title>\n        {{ \"itemForm.edit\" | translate }}\n      </h2>\n    </ng-container>\n    <ng-template #newForm>\n      <h2 mat-dialog-title>\n        {{ \"itemForm.create\" | translate }}\n      </h2>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #cbPendingTitle>\n    <h2 mat-dialog-title>\n      {{ \"itemForm.savingItem\" | translate }}\n    </h2>\n  </ng-template>\n\n  <form [formGroup]=\"itemForm\" (ngSubmit)=\"onSubmit()\">\n    <div mat-dialog-content>\n      <ng-container *ngIf=\"!cbPennding; else cbPendingContent\">\n        <div class=\"form-row\">\n          <div class=\"form-column\">\n            <!-- Basic Info Section -->\n            <div class=\"form-section\">\n              <mat-form-field appearance=\"outline\" [dir]=\"dir\">\n                <mat-label>{{\n                  \"itemForm.parentCategory\" | translate\n                }}</mat-label>\n                <mat-select formControlName=\"categoryId\" required>\n                  <mat-option>--</mat-option>\n                  <ng-container *ngFor=\"let category of categories\">\n                    <mat-option [value]=\"category.uuid\">{{\n                      category | propertiesTranslation : lang : \"Name\"\n                    }}</mat-option>\n                  </ng-container>\n                </mat-select>\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('categoryId')?.invalid &&\n                    itemForm.get('categoryId')?.touched\n                  \"\n                >\n                  {{ \"itemForm.parentCategoryError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{ \"itemForm.enName\" | translate }}</mat-label>\n                <input matInput formControlName=\"enName\" required />\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('enName')?.invalid &&\n                    itemForm.get('enName')?.touched\n                  \"\n                >\n                  {{ \"itemForm.enError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{ \"itemForm.heName\" | translate }}</mat-label>\n                <input matInput formControlName=\"heName\" required />\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('heName')?.invalid &&\n                    itemForm.get('heName')?.touched\n                  \"\n                >\n                  {{ \"itemForm.heError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{ \"itemForm.esName\" | translate }}</mat-label>\n                <input matInput formControlName=\"esName\" required />\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('esName')?.invalid &&\n                    itemForm.get('esName')?.touched\n                  \"\n                >\n                  {{ \"itemForm.esError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n            </div>\n\n            <!-- Image Section -->\n            <div class=\"form-section\">\n              <ng-container\n                *ngIf=\"itemForm.get('imageUrl')?.value; else noExistingImage\"\n              >\n                <div class=\"image-section\">\n                  <mat-tab-group>\n                    <mat-tab [label]=\"'itemForm.existingImage' | translate\">\n                      <div class=\"tab-body-content\">\n                        <img\n                          [src]=\"itemForm.get('imageUrl')?.value\"\n                          class=\"existing-image\"\n                          [alt]=\"itemForm.get('enName')?.value\"\n                        />\n                      </div>\n                    </mat-tab>\n                    <mat-tab>\n                      <ng-template mat-tab-label>\n                        <div\n                          *ngIf=\"itemImage; else withoutBadge\"\n                          appLanguageDirection\n                          matBadge=\"!\"\n                          matBadgeOverlap=\"false\"\n                        >\n                          {{ \"itemForm.newImage\" | translate }}\n                        </div>\n                        <ng-template #withoutBadge>\n                          <div>\n                            {{ \"itemForm.newImage\" | translate }}\n                          </div>\n                        </ng-template>\n                      </ng-template>\n                      <div class=\"tab-body-content\">\n                        <div class=\"form-load-file\">\n                          <load-file\n                            (fileSelected)=\"imageChanged($event)\"\n                            (fileRemoved)=\"imageRemoved()\"\n                          ></load-file>\n                        </div>\n                      </div>\n                    </mat-tab>\n                  </mat-tab-group>\n                </div>\n              </ng-container>\n              <ng-template #noExistingImage>\n                <div class=\"form-load-file\">\n                  <load-file\n                    (fileSelected)=\"imageChanged($event)\"\n                    (fileRemoved)=\"imageRemoved()\"\n                  ></load-file>\n                </div>\n              </ng-template>\n            </div>\n          </div>\n\n          <div class=\"form-column\">\n            <!-- Details Section -->\n            <div class=\"form-section\">\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{ \"itemForm.enDetails\" | translate }}</mat-label>\n                <textarea\n                  matInput\n                  formControlName=\"enDetails\"\n                  required\n                  rows=\"2\"\n                ></textarea>\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('enDetails')?.invalid &&\n                    itemForm.get('enDetails')?.touched\n                  \"\n                >\n                  {{ \"itemForm.enDetailsError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{ \"itemForm.heDetails\" | translate }}</mat-label>\n                <textarea\n                  matInput\n                  formControlName=\"heDetails\"\n                  required\n                  rows=\"2\"\n                ></textarea>\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('heDetails')?.invalid &&\n                    itemForm.get('heDetails')?.touched\n                  \"\n                >\n                  {{ \"itemForm.heDetailsError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{ \"itemForm.esDetails\" | translate }}</mat-label>\n                <textarea\n                  matInput\n                  formControlName=\"esDetails\"\n                  required\n                  rows=\"2\"\n                ></textarea>\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('esDetails')?.invalid &&\n                    itemForm.get('esDetails')?.touched\n                  \"\n                >\n                  {{ \"itemForm.esDetailsError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{ \"itemForm.price\" | translate }}</mat-label>\n                <input\n                  matInput\n                  type=\"number\"\n                  formControlName=\"price\"\n                  required\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n                <span matTextSuffix>GTQ</span>\n                <mat-error\n                  appLanguageDirection\n                  *ngIf=\"\n                    itemForm.get('price')?.invalid &&\n                    itemForm.get('price')?.touched\n                  \"\n                >\n                  {{ \"itemForm.priceError\" | translate }}\n                </mat-error>\n              </mat-form-field>\n            </div>\n\n            <!-- Add-ons Section -->\n            <div class=\"form-section\" *ngIf=\"availableAddOns?.length\">\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"full-width\"\n                [dir]=\"dir\"\n              >\n                <mat-label>{{\n                  \"itemForm.availableAddOns\" | translate\n                }}</mat-label>\n                <mat-chip-grid #chipGrid aria-label=\"Add-On selection\">\n                  <mat-chip-row\n                    *ngFor=\"\n                      let addOnUuid of itemForm.get('availableAddOnUuids')\n                        ?.value\n                    \"\n                    selectable\n                    [removable]=\"true\"\n                    (removed)=\"remove(addOnUuid)\"\n                  >\n                    {{\n                      getAddOnName(addOnUuid)\n                        | propertiesTranslation : lang : \"Name\"\n                    }}\n                    <button matChipRemove>\n                      <mat-icon>cancel</mat-icon>\n                    </button>\n                  </mat-chip-row>\n                </mat-chip-grid>\n                <input\n                  [placeholder]=\"'itemForm.availableAddOns' | translate\"\n                  #addOnInput\n                  [formControl]=\"addOnCtrl\"\n                  [matChipInputFor]=\"chipGrid\"\n                  [matAutocomplete]=\"auto\"\n                  (matChipInputTokenEnd)=\"add($event)\"\n                />\n                <mat-autocomplete\n                  #auto=\"matAutocomplete\"\n                  (optionSelected)=\"selected($event)\"\n                >\n                  <mat-option\n                    *ngFor=\"let addOn of filteredAddOns | async\"\n                    [value]=\"addOn.uuid\"\n                  >\n                    {{ addOn | propertiesTranslation : lang : \"Name\" }}\n                  </mat-option>\n                </mat-autocomplete>\n              </mat-form-field>\n\n              <div class=\"split-width-row\">\n                <mat-form-field\n                  appearance=\"outline\"\n                  class=\"full-width\"\n                  [dir]=\"dir\"\n                  *ngIf=\"itemForm.get('availableAddOnUuids')?.value?.length\"\n                >\n                  <mat-label>{{ \"itemForm.addOnPrice\" | translate }}</mat-label>\n                  <input\n                    matInput\n                    type=\"number\"\n                    formControlName=\"addOnPrice\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                  <span matTextSuffix>GTQ</span>\n                </mat-form-field>\n                <mat-form-field\n                  appearance=\"outline\"\n                  class=\"full-width\"\n                  [dir]=\"dir\"\n                  *ngIf=\"itemForm.get('availableAddOnUuids')?.value?.length\"\n                >\n                  <mat-label>{{\n                    \"itemForm.freeAvailableAddOns\" | translate\n                  }}</mat-label>\n                  <input\n                    matInput\n                    type=\"number\"\n                    formControlName=\"freeAvailableAddOns\"\n                    min=\"0\"\n                    step=\"1\"\n                  />\n                </mat-form-field>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n\n      <ng-template #cbPendingContent>\n        <div class=\"saving-spinner\">\n          <mat-spinner></mat-spinner>\n        </div>\n      </ng-template>\n    </div>\n\n    <div mat-dialog-actions align=\"center\">\n      <button mat-button type=\"button\" mat-dialog-close [disabled]=\"cbPennding\">\n        {{ \"itemForm.cancel\" | translate }}\n      </button>\n      <button\n        mat-flat-button\n        color=\"primary\"\n        type=\"submit\"\n        [disabled]=\"\n          cbPennding ||\n          itemForm.invalid ||\n          (!this.itemForm.controls['imageUrl'].value && !this.itemImage)\n        \"\n      >\n        <ng-container *ngIf=\"data.item; else createAction\">\n          {{ \"itemForm.save\" | translate }}\n        </ng-container>\n        <ng-template #createAction>\n          {{ \"itemForm.create\" | translate }}\n        </ng-template>\n      </button>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "ItemPreviewComponent",
            "id": "component-ItemPreviewComponent-43a33f6896234e0ff7f96f0f526c937ecc4d7d764997d2967187b858cba8191d7327e5670be5de49685f183e2986b8ca0d1f7cfcb494ca488ea0868892b138f3",
            "file": "src/app/travler/item-preview/item-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-preview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./item-preview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cartItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "CartItem",
                    "decorators": []
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "opened",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_cartItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "groupedCartItem",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupedCartItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "groupSimilarItems",
                    "args": [],
                    "optional": false,
                    "returnType": "GroupedCartItem[]",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItemGroup",
                    "args": [
                        {
                            "name": "group",
                            "type": "GroupedCartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "GroupedCartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "AddOnUuidsToAddOnsPipe",
                    "type": "pipe"
                },
                {
                    "name": "PreviewItemCostPipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CartItem, CartService } from '../../services/cart.service';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { Observable } from 'rxjs';\nimport { LanguageType, LanguageService } from '../../services/lang.service';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddOnUuidsToAddOnsPipe } from '../../pipes/add-on-uuids-to-add-ons.pipe';\nimport { PreviewItemCostPipe } from '../../pipes/preview-item-cost.pipe';\n\ninterface GroupedCartItem {\n  addOns: string[];\n  permutationUuids: string[];\n  items: CartItemPermutation[];\n  count: number;\n}\n\ninterface CartItemPermutation {\n  id: string;\n  addOns: string[];\n}\n\n@Component({\n  selector: 'app-item-preview',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    LanguageDirectionDirective,\n    PropertiesTranslationPipe,\n    AddOnUuidsToAddOnsPipe,\n    PreviewItemCostPipe,\n    TranslateModule,\n  ],\n  templateUrl: './item-preview.component.html',\n  styleUrl: './item-preview.component.scss',\n})\nexport class ItemPreviewComponent {\n  // TODO: change to group by add-ons uuids\n  private _cartItem: CartItem | undefined;\n  @Input() set cartItem(value: CartItem) {\n    this._cartItem = value;\n    this.groupedCartItem = this.groupSimilarItems();\n  }\n  get cartItem(): CartItem | undefined {\n    return this._cartItem;\n  }\n  @Input() expanded = false;\n\n  @Output() opened = new EventEmitter<number>();\n\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n  public groupedCartItem: GroupedCartItem[] = [];\n\n  constructor(\n    private languageService: LanguageService,\n    private cartService: CartService\n  ) {}\n\n  ngOnInit(): void {\n    this.lang$ = this.languageService.currentLanguage$;\n  }\n\n  groupSimilarItems(): GroupedCartItem[] {\n    if (!this.cartItem?.items) return [];\n\n    const groupMap = new Map<string, GroupedCartItem>();\n\n    this.cartItem.items.forEach((addOns: string[], id: string) => {\n      console.log(id, addOns);\n\n      const sortedKey = [...addOns].sort().join(',');\n      console.log(sortedKey);\n\n      if (!groupMap.has(sortedKey)) {\n        groupMap.set(sortedKey, {\n          addOns: [...addOns].sort(),\n          permutationUuids: [id],\n          items: [],\n          count: 0,\n        });\n      }\n\n      const group = groupMap.get(sortedKey)!;\n      group.items.push({ id, addOns });\n      group.count++;\n      group.permutationUuids.push(id);\n    });\n\n    return Array.from(groupMap.values());\n  }\n\n  removeItemGroup(group: GroupedCartItem): void {\n    if (!this.cartItem?.itemUuid) return;\n\n    group.items.forEach((item) => {\n      this.cartService.removeVariant(this.cartItem!.itemUuid, item.id);\n    });\n    this.groupedCartItem = this.groupSimilarItems();\n  }\n}\n",
            "styleUrl": "./item-preview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "cartItem": {
                    "name": "cartItem",
                    "setSignature": {
                        "name": "cartItem",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "CartItem",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "CartItem",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "cartItem",
                        "type": "",
                        "returnType": "CartItem | undefined",
                        "line": 46
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"lang$ | async; let lang\">\n  <mat-expansion-panel\n    [expanded]=\"expanded\"\n    (opened)=\"opened.emit()\"\n    hideToggle\n    appLanguageDirection\n  >\n    <mat-expansion-panel-header>\n      <mat-panel-title\n        >{{ cartItem?.item | propertiesTranslation : lang : \"Name\" }} -\n        {{ cartItem?.items?.size }}</mat-panel-title\n      >\n      <mat-panel-description>\n        <span>{{ cartItem | previewItemCost }}</span>\n        <img [src]=\"cartItem?.item?.imageUrl\" class=\"item-image\" />\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <div *ngFor=\"let group of groupedCartItem\" class=\"cart-item-permutations\">\n      <div class=\"cart-item-permutation-name\">\n        <span class=\"item-count\" *ngIf=\"group.count > 1\">\n          {{ group.count }} ×\n        </span>\n        <span *ngIf=\"group.addOns.length !== 0\">\n          {{ group.addOns | addOnUuidsToAddOns : lang }}\n        </span>\n        <span *ngIf=\"group.addOns.length === 0\">\n          {{ \"itemPreview.noAdditions\" | translate }}\n        </span>\n      </div>\n\n      <div class=\"cart-item-permutation-price-and-actions\">\n        <span>{{ cartItem | previewItemCost : group.permutationUuids }}</span>\n        <div>\n          <mat-icon\n            *ngIf=\"group.count > 1\"\n            class=\"action-icon\"\n            aria-hidden=\"false\"\n            aria-label=\"Remove one item\"\n            fontIcon=\"remove\"\n          ></mat-icon>\n          <mat-icon\n            class=\"delete-item\"\n            aria-hidden=\"false\"\n            aria-label=\"Remove all items\"\n            fontIcon=\"delete_forever__outline\"\n            (click)=\"removeItemGroup(group)\"\n          ></mat-icon>\n\n          <mat-icon\n            class=\"action-icon enable-icon\"\n            aria-hidden=\"false\"\n            aria-label=\"Add one more item\"\n            fontIcon=\"add\"\n          ></mat-icon>\n        </div>\n      </div>\n    </div>\n  </mat-expansion-panel>\n</ng-container>\n"
        },
        {
            "name": "ItemsOverviewComponent",
            "id": "component-ItemsOverviewComponent-fdd1a3b3e90525b79933b3a60afc96094388da35d8110451c5844e5cbb44ef7ed452d896c67f87a5141408ff174154f2464db320b5aa72d9de07caaf28814598",
            "file": "src/app/admin/items-overview/items-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-items-overview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./items-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageDirection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'name',\n    'price',\n    'addOns',\n    'addOnPrice',\n    'freeAddOnAllowed',\n    'image',\n    'actions',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "filteredItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "searchTerm",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedCategory",
                    "defaultValue": "new FormControl<Category | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "viewMode",
                    "defaultValue": "'grid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"grid\" | \"table\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { combineLatest, delay, Observable, startWith, take } from 'rxjs';\nimport { ItemsService } from '../../services/items.service';\nimport { Category, Item } from '../../travler/travler.models';\nimport { MaterialModule } from '../../material.module';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ItemFormComponent } from '../item-form/item-form.component';\nimport { DeleteConfirmationModalComponent } from '../delete-confirmation-modal/delete-confirmation-modal.component';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\n\n@Component({\n  selector: 'app-items-overview',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    PropertiesTranslationPipe,\n    LanguageDirectionDirective,\n  ],\n  templateUrl: './items-overview.component.html',\n  styleUrl: './items-overview.component.scss',\n})\nexport class ItemsOverviewComponent {\n  readonly dialog = inject(MatDialog);\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n\n  viewMode: 'grid' | 'table' = 'grid';\n  searchTerm = new FormControl('');\n  selectedCategory = new FormControl<Category | null>(null);\n\n  displayedColumns: string[] = [\n    'name',\n    'price',\n    'addOns',\n    'addOnPrice',\n    'freeAddOnAllowed',\n    'image',\n    'actions',\n  ];\n\n  items: Item[] = [];\n  categories: Category[] = [];\n  filteredItems: Item[] = [];\n  dir: LanguageDirection = 'ltr';\n\n  constructor(\n    private itemsService: ItemsService,\n    private languageService: LanguageService\n  ) {\n    this.lang$ = this.languageService.currentLanguage$;\n    this.itemsService.allItems$.subscribe((categories) => {\n      this.categories = categories;\n      this.items = categories.map((category) => category.items).flat();\n      this.filteredItems = categories.map((category) => category.items).flat();\n    });\n\n    combineLatest([\n      this.selectedCategory.valueChanges.pipe(startWith(null)),\n      this.searchTerm.valueChanges.pipe(startWith('')),\n    ]).subscribe(([selectedCategory, term]) => {\n      const value = term?.toLowerCase() || '';\n      if (!selectedCategory) {\n        this.filteredItems = this.items.filter((item) => {\n          return (\n            item.enName.toLowerCase().includes(value) ||\n            item.esName.toLowerCase().includes(value) ||\n            item.heName.toLowerCase().includes(value)\n          );\n        });\n      } else {\n        this.filteredItems = this.categories\n          .filter(\n            (currentCategory) => currentCategory.uuid === selectedCategory.uuid\n          )\n          .map((category) => category.items)\n          .flat()\n          .filter((item) => {\n            return (\n              item.enName.toLowerCase().includes(value) ||\n              item.esName.toLowerCase().includes(value) ||\n              item.heName.toLowerCase().includes(value)\n            );\n          });\n      }\n    });\n  }\n\n  addNewItem(): void {\n    const dialogRef = this.dialog.open(ItemFormComponent, {\n      width: 'auto',\n      maxWidth: '90%',\n      data: {\n        cb: (data: { item: Item; image: File }) =>\n          this.itemsService.createItem(data.item, data.image),\n      },\n    });\n\n    dialogRef.afterClosed().pipe(take(1)).subscribe();\n  }\n\n  editItem(item: Item) {\n    const categoryUuid = this.categories.find((cat) =>\n      cat.items.some((ite) => ite.uuid === item.uuid)\n    )?.uuid;\n    const dialogRef = this.dialog.open(ItemFormComponent, {\n      width: 'auto',\n      maxWidth: '90%',\n      data: {\n        item,\n        categoryUuid,\n        cb: (data: { item: Item; image: File }) =>\n          this.itemsService.editItem(data.item, data.image),\n      },\n    });\n\n    dialogRef.afterClosed().pipe(take(1)).subscribe();\n  }\n\n  deleteItem(item: Item) {\n    const dialogRef = this.dialog.open(DeleteConfirmationModalComponent, {\n      autoFocus: false,\n      data: {\n        type: 'item',\n        cb: (item: Item) =>\n          this.itemsService.deleteItem(item).pipe(delay(2000)),\n        objectToDelete: item,\n      },\n    });\n\n    dialogRef.afterClosed().pipe(take(1)).subscribe();\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.dir = languageDirection;\n  }\n}\n",
            "styleUrl": "./items-overview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  *ngIf=\"lang$ | async; let lang\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <mat-toolbar class=\"controls\">\n    <div class=\"tool-bar-actions\">\n      <button mat-fab aria-label=\"Add new item\" (click)=\"addNewItem()\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <div [dir]=\"dir\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>{{ \"itemOverview.searchLabel\" | translate }}</mat-label>\n          <input\n            matInput\n            [formControl]=\"searchTerm\"\n            [placeholder]=\"'itemOverview.searchPlaceholder' | translate\"\n          />\n        </mat-form-field>\n      </div>\n      <div [dir]=\"dir\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>{{\n            \"itemOverview.categoryFilterLabel\" | translate\n          }}</mat-label>\n          <mat-select [formControl]=\"selectedCategory\">\n            <mat-option>--</mat-option>\n            <ng-container *ngFor=\"let category of categories\">\n              <mat-option [value]=\"category\">{{\n                category | propertiesTranslation : lang : \"Name\"\n              }}</mat-option>\n            </ng-container>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n    <div class=\"spacer\"></div>\n    <mat-button-toggle-group class=\"view-mode-buttons\" [(value)]=\"viewMode\">\n      <mat-button-toggle value=\"grid\">\n        <mat-icon>grid_view</mat-icon>{{ \"itemOverview.gridView\" | translate }}\n      </mat-button-toggle>\n      <mat-button-toggle value=\"table\">\n        <mat-icon>table_chart</mat-icon>\n        {{ \"itemOverview.tableView\" | translate }}\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </mat-toolbar>\n\n  <div *ngIf=\"viewMode === 'grid'\" class=\"grid-view\" appLanguageDirection>\n    <mat-card *ngFor=\"let item of filteredItems\" class=\"card\">\n      <div class=\"card-image\">\n        <img [src]=\"item.imageUrl\" alt=\"{{ item.enName }}\" />\n      </div>\n      <div class=\"card-content\">\n        <mat-card-title\n          ><span>\n            {{ item | propertiesTranslation : lang : \"Name\" }}\n          </span>\n          -\n          <span class=\"item-price\">{{ item?.price }} GTQ</span>\n        </mat-card-title>\n        <mat-card-content>\n          <p class=\"item-details\">\n            {{ item | propertiesTranslation : lang : \"Details\" }}\n          </p>\n          <p *ngIf=\"item.availableAddOnUuids?.length\">\n            {{\n              \"itemOverview.addOnsAvailable\"\n                | translate : { count: item.availableAddOnUuids?.length }\n            }}\n          </p>\n        </mat-card-content>\n      </div>\n      <mat-divider></mat-divider>\n\n      <mat-card-actions class=\"mat-card-actions\">\n        <div class=\"action-icon-wrapper edit-action\" (click)=\"editItem(item)\">\n          <mat-icon>edit</mat-icon>\n        </div>\n        <mat-divider vertical></mat-divider>\n        <div\n          class=\"action-icon-wrapper delete-action\"\n          (click)=\"deleteItem(item)\"\n        >\n          <mat-icon>delete</mat-icon>\n        </div>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n\n  <table\n    mat-table\n    [dataSource]=\"filteredItems\"\n    *ngIf=\"viewMode === 'table'\"\n    appLanguageDirection\n  >\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"itemOverview.tableHeader.name\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let item\">\n        {{ item | propertiesTranslation : lang : \"Name\" }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"price\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"itemOverview.tableHeader.price\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let item\">{{ item?.price }} GTQ</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"addOns\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"itemOverview.tableHeader.addOns\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let item\">\n        {{ item.availableAddOnUuids?.length || 0 }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"addOnPrice\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"itemOverview.tableHeader.addOnPrice\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let item\">{{ item.addOnPrice || 0 }} GTQ</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"freeAddOnAllowed\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"itemOverview.tableHeader.freeAddOnAllowed\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let item\">\n        {{ item.freeAvailableAddOns || 0 }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"image\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"itemOverview.tableHeader.image\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let item\">\n        <img [src]=\"item.imageUrl\" alt=\"{{ item.enName }}\" width=\"50\" />\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ \"itemOverview.tableHeader.actions\" | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let item\">\n        <button mat-icon-button (click)=\"editItem(item)\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-icon-button color=\"warn\" (click)=\"deleteItem(item)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n  </table>\n\n  <ng-container *ngIf=\"items && items.length > 0; else noData\">\n    <ng-container *ngIf=\"filteredItems.length === 0\"> </ng-container>\n  </ng-container>\n  <ng-template #noData> </ng-template>\n</div>\n"
        },
        {
            "name": "ItemsPreviewComponent",
            "id": "component-ItemsPreviewComponent-371a758b654384eb0c3ae0217450c278c814afae1497579cb72eaf0f7d7e60dbbcdc95907d776feeb7fe8f7bd8898f27abb426c10941da590b1ceb5923943ac9",
            "file": "src/app/travler/items-preview/items-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideNativeDateAdapter()"
                }
            ],
            "selector": "app-items-preview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./items-preview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cartItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "CartItem[] | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "expandedItem",
                    "defaultValue": "signal<number | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setExpandedItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItemPreviewComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, signal } from '@angular/core';\nimport { CartItem } from '../../services/cart.service';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItemPreviewComponent } from '../item-preview/item-preview.component';\nimport { provideNativeDateAdapter } from '@angular/material/core';\n\n@Component({\n  selector: 'app-items-preview',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    TranslateModule,\n    ItemPreviewComponent,\n  ],\n  providers: [provideNativeDateAdapter()],\n  templateUrl: './items-preview.component.html',\n  styleUrl: './items-preview.component.scss',\n})\nexport class ItemsPreviewComponent {\n  @Input() cartItems: CartItem[] | undefined;\n\n  expandedItem = signal<number | null>(null);\n\n  setExpandedItem(index: number) {\n    this.expandedItem.set(index);\n  }\n\n  ngOnInit(): void {}\n}\n",
            "styleUrl": "./items-preview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-accordion class=\"items\">\n  <ng-container *ngFor=\"let cartItem of cartItems; let i = index\">\n    <div class=\"item-row\">\n      <app-item-preview\n        class=\"item\"\n        [cartItem]=\"cartItem\"\n        [expanded]=\"expandedItem() === i\"\n        (opened)=\"setExpandedItem(i)\"\n      ></app-item-preview>\n    </div>\n  </ng-container>\n</mat-accordion>\n"
        },
        {
            "name": "ItemsSummaryModalComponent",
            "id": "component-ItemsSummaryModalComponent-5c9d48427ac0d35e2fb6eaadf6ef0183a1da94de9518c5664e1725c8c284472bbbc90699bd1221bf9678648f17824ff85d8326ff924d6ad45d716b3ddf6fdb02",
            "file": "src/app/travler/items-summary-modal/items-summary-modal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-items-summary-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "items-summary-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cartItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "itemName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "ItemsPreviewComponent",
                    "type": "component"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { MaterialModule } from '../../material.module';\nimport { CommonModule } from '@angular/common';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CartItem } from '../../services/cart.service';\nimport { ItemsPreviewComponent } from '../items-preview/items-preview.component';\nimport { Observable } from 'rxjs';\nimport { LanguageService, LanguageType } from '../../services/lang.service';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\n\n@Component({\n  selector: 'app-items-summary-modal',\n  templateUrl: 'items-summary-modal.component.html',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    ItemsPreviewComponent,\n    LanguageDirectionDirective,\n    TranslateModule,\n  ],\n  styleUrl: 'items-summary-modal.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItemsSummaryModalComponent {\n  public cartItems: CartItem;\n  public itemName: string | undefined;\n\n  public lang$: Observable<LanguageType> = new Observable<LanguageType>();\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: CartItem,\n    private languageService: LanguageService,\n    private propertiesTranslationPipe: PropertiesTranslationPipe\n  ) {\n    // TODOL: add sub for cart item remove and close modal\n    this.lang$ = this.languageService.currentLanguage$;\n    this.cartItems = data;\n    this.itemName = this.propertiesTranslationPipe.transform(\n      this.cartItems.item,\n      this.languageService.currentLanguage,\n      'Name'\n    );\n  }\n}\n",
            "styleUrl": "items-summary-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "CartItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "propertiesTranslationPipe",
                        "type": "PropertiesTranslationPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "CartItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propertiesTranslationPipe",
                        "type": "PropertiesTranslationPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  *ngIf=\"lang$ | async; let lang\"\n  class=\"available-add-ons\"\n  appLanguageDirection\n>\n  <h2 class=\"title\" mat-dialog-title>\n    {{ \"itemPreview.title\" | translate : { itemName: itemName } }}\n  </h2>\n  <mat-dialog-content class=\"modal-content\">\n    <app-items-preview [cartItems]=\"[cartItems]\"></app-items-preview>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"center\">\n    <button mat-button mat-dialog-close>\n      {{ \"itemPreview.close\" | translate }}\n    </button>\n  </mat-dialog-actions>\n</div>\n"
        },
        {
            "name": "LanguagePickerComponent",
            "id": "component-LanguagePickerComponent-2a4a4ab298224e36e032a65dfa05741c2799811088c48a06b1f4b8c1b1cf7a69bef192b55e1f04932fee016fa731f0417614fb84d236dcd2688e26a6effda24c",
            "file": "src/app/components/language-picker/language-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-language-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./language-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SupportedLanguages | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SupportedLanguages[] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "SupportedLanguages",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "SupportedLanguages",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "ClickOutsideDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { AfterViewInit, Component, OnInit } from '@angular/core';\nimport {\n  LanguageService,\n  SupportedLanguages,\n} from '../../services/lang.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { ClickOutsideDirective } from '../../directives/outside.directive';\n\n@Component({\n  selector: 'app-language-picker',\n  imports: [CommonModule, LanguageDirectionDirective, ClickOutsideDirective],\n  templateUrl: './language-picker.component.html',\n  styleUrl: './language-picker.component.scss',\n})\nexport class LanguagePickerComponent implements OnInit {\n  isOpen = false;\n  languages: SupportedLanguages[] | undefined;\n  currentLanguage: SupportedLanguages | undefined;\n\n  constructor(\n    private translate: TranslateService,\n    private languageService: LanguageService\n  ) {}\n\n  ngOnInit(): void {\n    this.languages = this.languageService.supportedLanguages;\n    this.currentLanguage = this.languageService.activeSupportedLanguages;\n  }\n\n  toggleDropdown(): void {\n    this.isOpen = !this.isOpen;\n  }\n\n  closeDropdown(): void {\n    this.isOpen = false;\n  }\n\n  selectLanguage(lang: SupportedLanguages): void {\n    this.currentLanguage = lang;\n    this.isOpen = false;\n    localStorage.setItem('locale', lang.languageType);\n    this.translate.use(lang.languageType);\n  }\n}\n",
            "styleUrl": "./language-picker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  *ngIf=\"currentLanguage\"\n  clickOutside\n  class=\"language-picker\"\n  [class.open]=\"isOpen\"\n  (clickOutside)=\"closeDropdown()\"\n>\n  <div class=\"selected-language\" (click)=\"toggleDropdown()\">\n    <span class=\"language-flag\">{{ currentLanguage.languageIcon }} </span>\n    <span class=\"arrow-down\"></span>\n  </div>\n\n  <div *ngIf=\"isOpen\" class=\"dropdown-menu\" appLanguageDirection>\n    <div\n      *ngFor=\"let lang of languages\"\n      class=\"language-option\"\n      (click)=\"selectLanguage(lang)\"\n    >\n      <span class=\"language-flag\">{{ lang.languageIcon }} </span>\n      <span class=\"language-name\">{{ lang.languageName }}</span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LoadFileComponent",
            "id": "component-LoadFileComponent-7e1bb98921346417146f03cfce9748149cbda88edf92e05049c180ccc118d5b26f8ae7d325c71679a0c89a2a8c4dd12a3cc9857bc7d8418cbd3f56fb7b468087",
            "file": "src/app/components/load-file/load-file.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "load-file",
            "styleUrls": [
                "./load-file.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./load-file.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "fileRemoved",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                },
                {
                    "name": "fileSelected",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentFile",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "doneUploadFiles",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showPreview",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fileBrowseHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatBytes",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileDropped",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateUpload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "DndDirective",
                    "type": "directive"
                },
                {
                    "name": "ImagePreviewComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { trigger, transition, style, animate } from '@angular/animations';\nimport { Component, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { Subject } from 'rxjs';\nimport { MaterialModule } from '../../material.module';\nimport { CommonModule } from '@angular/common';\nimport { DndDirective } from '../../directives/dnd.directive';\nimport { ImagePreviewComponent } from '../image-preview/image-preview.component';\n\n@Component({\n  selector: 'load-file',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    TranslateModule,\n    DndDirective,\n    ImagePreviewComponent,\n  ],\n  templateUrl: './load-file.component.html',\n  styleUrls: ['./load-file.component.scss'],\n\n  animations: [\n    trigger('slideState', [\n      transition(':enter', [\n        style({ opacity: 0, transform: 'translateX(100%)' }),\n        animate(\n          '0.5s ease-out',\n          style({ opacity: 1, transform: 'translateX(0)' })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '0.2s ease-in',\n          style({ opacity: 0, transform: 'translateX(-100%)' })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class LoadFileComponent implements OnDestroy {\n  showPreview = false;\n  currentFile: any = null;\n  doneUploadFiles = true;\n\n  @Output() fileSelected = new EventEmitter<File>();\n  @Output() fileRemoved = new EventEmitter<void>();\n\n  private destroy$ = new Subject<void>();\n\n  constructor(private translate: TranslateService) {\n    // Subscribe to your RTL service if needed or set a default value.\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  onFileDropped(event: any) {\n    if (event && event.length > 0) {\n      this.prepareFile(event[0]); // Only take the first file\n    }\n  }\n\n  fileBrowseHandler(event: any) {\n    if (event.target.files && event.target.files.length > 0) {\n      this.prepareFile(event.target.files[0]); // Only take the first file\n    }\n  }\n\n  deleteFile() {\n    this.showPreview = false;\n    setTimeout(() => {\n      this.currentFile = null;\n      this.doneUploadFiles = true;\n    }, 200);\n    this.fileRemoved.emit();\n  }\n\n  simulateUpload() {\n    if (!this.currentFile) return;\n\n    this.doneUploadFiles = false;\n    this.currentFile.progress = 0;\n\n    const progressInterval = setInterval(() => {\n      if (this.currentFile && this.currentFile.progress < 100) {\n        this.currentFile.progress += 5;\n      } else {\n        clearInterval(progressInterval);\n        this.doneUploadFiles = true;\n\n        if (this.currentFile) {\n          this.fileSelected.emit(this.currentFile);\n        }\n      }\n    }, 100);\n  }\n\n  prepareFile(file: File) {\n    const acceptedTypes = ['image/png', 'image/jpeg', 'image/jpg'];\n\n    if (acceptedTypes.includes(file.type)) {\n      // Replace any existing file\n      this.currentFile = file;\n      setTimeout(() => {\n        this.showPreview = true;\n      }, 200);\n      this.currentFile.progress = 0;\n      this.simulateUpload();\n    } else {\n      // Show error notification\n      console.error(this.translate.instant('notifications.errors.fileFormat'));\n      // You can add a toast notification here\n    }\n  }\n\n  formatBytes(bytes: number, decimals: number): string {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const dm = decimals <= 0 ? 0 : decimals || 2;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".uploader-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  margin: 0 auto;\n  width: 400px;\n}\n\n.uploader-title {\n  font-size: 24px;\n  margin-bottom: 20px;\n  color: #333;\n}\n\n.container {\n  max-width: 450px;\n  min-width: 185px;\n  padding: 1rem;\n  text-align: center;\n  border: dashed 2px #979797;\n  position: relative;\n  margin: 0 auto;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #f5f5f5;\n    border-color: #666;\n  }\n\n  input {\n    opacity: 0;\n    position: absolute;\n    z-index: 2;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    cursor: pointer;\n  }\n\n  label {\n    color: white;\n    width: 183px;\n    height: 44px;\n    border-radius: 21.5px;\n    background-color: #db202f;\n    padding: 10px 20px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n    display: inline-block;\n\n    &:hover {\n      background-color: darken(#db202f, 10%);\n    }\n  }\n\n  h3 {\n    font-size: 20px;\n    font-weight: 600;\n    color: #38424c;\n    margin: 15px 0;\n  }\n\n  .dnd-text {\n    margin-top: 15px;\n  }\n}\n\n.fileover {\n  animation: shake 1s;\n  animation-iteration-count: infinite;\n  background-color: #f0f0f0;\n}\n\n.single-file {\n  display: flex;\n  padding: 1rem;\n  justify-content: space-between;\n  // align-items: center;\n  border: dashed 1px #979797;\n  margin-bottom: 1rem;\n  gap: 15px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  height: 100%;\n  max-width: 450px;\n  min-width: 185px;\n  margin: auto;\n\n  .info {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    margin: 7px 0;\n\n    .top-row {\n      display: flex;\n      flex-direction: column;\n\n      gap: 5px;\n\n      .name {\n        font-size: 16px;\n        font-weight: 500;\n        color: #353f4a;\n        margin: 0;\n        word-break: break-word;\n      }\n\n      .size {\n        font-size: 14px;\n        font-weight: 500;\n        color: #a4a4a4;\n      }\n    }\n\n    .bottom-row {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n\n      .progress-cont {\n        height: 8px;\n        width: 100%;\n        border-radius: 4px;\n        background-color: #e0e0e0;\n        position: relative;\n        overflow: hidden;\n\n        .progress {\n          width: 0;\n          height: 100%;\n          position: absolute;\n          z-index: 1;\n          top: 0;\n          // TODO: rtl right ltr left\n          left: 0;\n          border-radius: 4px;\n          background-color: #4c97cb;\n          transition: 0.5s all;\n        }\n      }\n\n      .delete {\n        display: flex;\n        cursor: pointer;\n        align-self: flex-end;\n\n        &:hover path {\n          fill: #db202f;\n        }\n      }\n    }\n  }\n}\n\n@keyframes shake {\n  0% {\n    transform: translate(1px, 1px) rotate(0deg);\n  }\n\n  10% {\n    transform: translate(-1px, -2px) rotate(-1deg);\n  }\n\n  20% {\n    transform: translate(-3px, 0px) rotate(1deg);\n  }\n\n  30% {\n    transform: translate(3px, 2px) rotate(0deg);\n  }\n\n  40% {\n    transform: translate(1px, -1px) rotate(1deg);\n  }\n\n  50% {\n    transform: translate(-1px, 2px) rotate(-1deg);\n  }\n\n  60% {\n    transform: translate(-3px, 1px) rotate(0deg);\n  }\n\n  70% {\n    transform: translate(3px, 1px) rotate(-1deg);\n  }\n\n  80% {\n    transform: translate(-1px, -1px) rotate(1deg);\n  }\n\n  90% {\n    transform: translate(1px, 2px) rotate(0deg);\n  }\n\n  100% {\n    transform: translate(1px, -2px) rotate(-1deg);\n  }\n}\n",
                    "styleUrl": "./load-file.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"uploader-container\">\n  <div class=\"uploader-content\">\n    <div\n      class=\"container\"\n      [@slideState]\n      *ngIf=\"!currentFile\"\n      fileDnd\n      (fileDropped)=\"onFileDropped($event)\"\n    >\n      <input\n        type=\"file\"\n        #fileDropRef\n        id=\"fileDropRef\"\n        accept=\"image/png, image/jpeg, image/jpg\"\n        (change)=\"fileBrowseHandler($event)\"\n      />\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"63\"\n        height=\"64\"\n        viewBox=\"0 0 63 64\"\n      >\n        <g fill=\"#3B454F\" fill-rule=\"nonzero\">\n          <path\n            d=\"M42.656 15.135a1.953 1.953 0 0 1-1.391-.578L31.5 4.795l-9.765 9.762a1.97 1.97 0 1 1-2.785-2.785L30.106.616a1.97 1.97 0 0 1 2.785 0l11.157 11.156a1.97 1.97 0 0 1-1.392 3.363z\"\n          />\n          <path\n            d=\"M31.5 36.791a1.97 1.97 0 0 1-1.969-1.969V2.01a1.97 1.97 0 0 1 3.938 0v32.812a1.97 1.97 0 0 1-1.969 1.969z\"\n          />\n          <path\n            d=\"M55.781 63.041H7.22A7.225 7.225 0 0 1 0 55.822V41.385a4.599 4.599 0 0 1 4.594-4.594h7.234a4.567 4.567 0 0 1 4.402 3.276l2.814 9.382a.658.658 0 0 0 .628.467h23.656a.658.658 0 0 0 .628-.467l2.814-9.385a4.572 4.572 0 0 1 4.402-3.273h7.234A4.599 4.599 0 0 1 63 41.385v14.437a7.225 7.225 0 0 1-7.219 7.219zM4.594 40.729a.656.656 0 0 0-.657.656v14.437a3.286 3.286 0 0 0 3.282 3.282H55.78a3.286 3.286 0 0 0 3.282-3.282V41.385a.656.656 0 0 0-.657-.656h-7.234a.65.65 0 0 0-.628.467L47.73 50.58a4.628 4.628 0 0 1-4.402 3.274H19.672a4.567 4.567 0 0 1-4.402-3.276l-2.814-9.382a.65.65 0 0 0-.628-.467H4.594z\"\n          />\n        </g>\n      </svg>\n      <h3 class=\"dnd-text\">{{ \"loadFiles.dnd\" | translate }}</h3>\n      <h3>{{ \"loadFiles.or\" | translate }}</h3>\n      <label for=\"fileDropRef\">{{ \"loadFiles.browse\" | translate }}</label>\n    </div>\n\n    <div class=\"file-preview\" [@slideState] *ngIf=\"showPreview\">\n      <div class=\"single-file\">\n        <div class=\"file-icon\">\n          <app-image-preview [attachment]=\"currentFile\"></app-image-preview>\n        </div>\n        <div class=\"info\">\n          <div class=\"top-row\">\n            <h4 class=\"name\">{{ currentFile?.name }}</h4>\n            <p class=\"size\">{{ formatBytes(currentFile?.size, 0) }}</p>\n          </div>\n          <div class=\"bottom-row\">\n            <div class=\"progress-cont\">\n              <div\n                class=\"progress\"\n                [style.width]=\"currentFile?.progress + '%'\"\n              ></div>\n            </div>\n            <div class=\"delete\" (click)=\"deleteFile()\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"14\"\n                height=\"18\"\n                viewBox=\"0 0 14 18\"\n              >\n                <path\n                  fill=\"#B1B1B1\"\n                  fill-rule=\"nonzero\"\n                  d=\"M1 16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2H3c-1.1 0-2 .9-2 2v10zm3.17-7.83a.996.996 0 0 1 1.41 0L7 9.59l1.42-1.42a.996.996 0 1 1 1.41 1.41L8.41 11l1.42 1.42a.996.996 0 1 1-1.41 1.41L7 12.41l-1.42 1.42a.996.996 0 1 1-1.41-1.41L5.59 11 4.17 9.58a.996.996 0 0 1 0-1.41zM10.5 1L9.79.29C9.61.11 9.35 0 9.09 0H4.91c-.26 0-.52.11-.7.29L3.5 1H1c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1h-2.5z\"\n                />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-8a66ff81baca9377d90b40ab40c9dc01e1f8edfada3bc41e5295493c2f72cacc6de5fbba0cb69760116601f915e03a07c350cab2dcd6c2d23996311144ce0f5d",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "signInForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { take } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-login',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    LanguageDirectionDirective,\n    TranslateModule,\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n})\nexport class LoginComponent {\n  signInForm: FormGroup;\n  loading = false;\n  showPassword = false;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {\n    this.signInForm = this.formBuilder.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.signInForm.valid) {\n      this.loading = true;\n      this.authService\n        .login(\n          this.signInForm.get('username')?.value,\n          this.signInForm.get('password')?.value\n        )\n        .pipe(take(1))\n        .subscribe((allowed) => {\n          this.loading = false;\n\n          if (allowed) {\n            this.router.navigate(['/admin']);\n          }\n        });\n    } else {\n      console.error('Form is invalid');\n    }\n  }\n\n  togglePasswordVisibility(): void {\n    this.showPassword = !this.showPassword;\n  }\n}\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"login-container\" appLanguageDirection>\n  <div class=\"login-card\">\n    <h1 class=\"login-title\">\n      {{ \"login.title\" | translate }}\n      <span class=\"highlight\">{{ \"login.companyName\" | translate }}</span>\n    </h1>\n\n    <form class=\"login-form\" [formGroup]=\"signInForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"username\">{{ \"login.username\" | translate }}</label>\n        <input\n          type=\"text\"\n          id=\"username\"\n          [placeholder]=\"'login.usernamePlaceholder' | translate\"\n          formControlName=\"username\"\n          class=\"form-control\"\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"password\">{{ \"login.password\" | translate }}</label>\n        <div class=\"password-input-container\">\n          <input\n            [type]=\"showPassword ? 'text' : 'password'\"\n            id=\"password\"\n            placeholder=\"********\"\n            formControlName=\"password\"\n            class=\"form-control\"\n          />\n          <button\n            *ngIf=\"signInForm.controls['password'].value\"\n            type=\"button\"\n            class=\"password-toggle-btn\"\n            (click)=\"togglePasswordVisibility()\"\n            [attr.aria-label]=\"showPassword ? 'Hide password' : 'Show password'\"\n          >\n            <i\n              class=\"eye-icon\"\n              [ngClass]=\"showPassword ? 'eye-closed' : 'eye-open'\"\n            ></i>\n          </button>\n        </div>\n      </div>\n      <button type=\"submit\" class=\"submit-btn\" [disabled]=\"signInForm.invalid\">\n        {{ \"login.submit\" | translate }}\n      </button>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-0faf788ba4012c270b006c5b55f66380ad2bcabc7b7da3a6d3896729f7d77c4972f89a94a24cc7c81f073a2937c38fe4c2b80b8fccd37fd3593767eb138bf838",
            "file": "src/app/travler/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bottomMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'bottomMenu'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isBottomMenuNotInView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isTopMenuNotInView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "lang$",
                    "defaultValue": "new Observable<LanguageType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "menuWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuWrapper'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "topMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'topMenu'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkMenuVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "_",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToCategory",
                    "args": [
                        {
                            "name": "categoryUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "CategoryComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CategoryComponent } from '../category/category.component';\nimport { Category } from '../travler.models';\nimport { CommonModule } from '@angular/common';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { Observable } from 'rxjs';\nimport { LanguageService, LanguageType } from '../../services/lang.service';\nimport { ItemsService } from '../../services/items.service';\n\n@Component({\n  selector: 'app-menu',\n  imports: [\n    CommonModule,\n    LanguageDirectionDirective,\n    PropertiesTranslationPipe,\n    TranslateModule,\n    CategoryComponent,\n  ],\n  templateUrl: './menu.component.html',\n  styleUrl: './menu.component.scss',\n})\nexport class MenuComponent implements AfterViewInit {\n  @ViewChild('menuWrapper') menuWrapper!: ElementRef<HTMLDivElement>;\n  @ViewChild('topMenu') topMenu!: ElementRef<HTMLDivElement>;\n  @ViewChild('bottomMenu') bottomMenu!: ElementRef<HTMLDivElement>;\n\n  lang$: Observable<LanguageType> = new Observable<LanguageType>();\n\n  categories: Category[] = [];\n  isTopMenuNotInView: boolean = false;\n  isBottomMenuNotInView: boolean = false;\n\n  constructor(\n    private itemsService: ItemsService,\n    private languageService: LanguageService\n  ) {\n    this.itemsService.allItems$.pipe().subscribe((categories) => {\n      this.categories = categories;\n    });\n  }\n\n  ngOnInit(): void {\n    this.lang$ = this.languageService.currentLanguage$;\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.checkMenuVisibility();\n    }, 100);\n  }\n\n  onScroll(_: Event) {\n    this.checkMenuVisibility();\n  }\n\n  scrollToCategory(categoryUuid: string): void {\n    const element = document.getElementById(categoryUuid);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n      element.classList.add('heartbeat');\n      setTimeout(() => {\n        element.classList.remove('heartbeat');\n      }, 2500);\n    }\n  }\n\n  private checkMenuVisibility() {\n    if (!this.menuWrapper || !this.topMenu || !this.bottomMenu) return;\n\n    const wrapperRect = this.menuWrapper.nativeElement.getBoundingClientRect();\n    const topMenuRect = this.topMenu.nativeElement.getBoundingClientRect();\n    const bottomMenuRect =\n      this.bottomMenu.nativeElement.getBoundingClientRect();\n\n    this.isTopMenuNotInView =\n      topMenuRect.bottom < wrapperRect.top || topMenuRect.top < wrapperRect.top;\n\n    this.isBottomMenuNotInView =\n      bottomMenuRect.top > wrapperRect.bottom ||\n      bottomMenuRect.bottom > wrapperRect.bottom;\n  }\n}\n",
            "styleUrl": "./menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<ng-container *ngIf=\"lang$ | async; let lang\">\n  <div\n    class=\"menu-wrapper\"\n    #menuWrapper\n    (scroll)=\"onScroll($event)\"\n    [ngClass]=\"{\n      'top-gradient': isTopMenuNotInView,\n      'bottom-gradient': isBottomMenuNotInView\n    }\"\n  >\n    <div #topMenu></div>\n    <div class=\"content\" appLanguageDirection>\n      <ul class=\"categories\">\n        <li\n          class=\"category\"\n          *ngFor=\"let category of categories\"\n          (click)=\"scrollToCategory(category.uuid)\"\n        >\n          <img\n            [src]=\"category.imageUrl\"\n            alt=\"{{ category.enName }}\"\n            class=\"category-image\"\n          />\n          <div class=\"category-name\">\n            {{ category | propertiesTranslation : lang : \"Name\" }}\n          </div>\n        </li>\n      </ul>\n\n      <div *ngFor=\"let category of categories\" [id]=\"category.uuid\">\n        <app-category [category]=\"category\"></app-category>\n      </div>\n    </div>\n    <div #bottomMenu></div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "MenuIconComponent",
            "id": "component-MenuIconComponent-f166144d3c4b0141a7f2c7a20d3f96f46a086dc9f021e4fcf8607668f9b2ea24f7f37afc5f4795161b938af1c3e19de3e1b6f97caed3bf48ddf47d75797745bd",
            "file": "src/app/components/menu-icon/menu-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "menu-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "menuStateChanged",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleMenuOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'menu-icon',\n  imports: [],\n  templateUrl: './menu-icon.component.html',\n  styleUrl: './menu-icon.component.scss',\n})\nexport class MenuIconComponent {\n  @Output() menuStateChanged = new EventEmitter<boolean>();\n\n  menuOpen = false;\n\n  toggleMenuOpen(): void {\n    this.menuOpen = !this.menuOpen;\n    this.menuStateChanged.emit(this.menuOpen);\n  }\n}\n",
            "styleUrl": "./menu-icon.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div id=\"menu-icon\" [class.open]=\"menuOpen\" (click)=\"toggleMenuOpen()\">\n  <span></span>\n  <span></span>\n  <span></span>\n  <span></span>\n</div>\n"
        },
        {
            "name": "NoDataComponent",
            "id": "component-NoDataComponent-573d646e41ed4e697cfb7b8b290e432e5eedcf0cf1789f1b5331933ef59d6e0d22f19b94ea754ad8e3021e5959d8ee70bce13f3911ad76810ff3cb3c96733f56",
            "file": "src/app/components/no-data/no-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-no-data",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./no-data.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-no-data',\n  imports: [],\n  templateUrl: './no-data.component.html',\n  styleUrl: './no-data.component.scss'\n})\nexport class NoDataComponent {\n\n}\n",
            "styleUrl": "./no-data.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 300\">\n  <!-- Background -->\n  <rect width=\"400\" height=\"300\" fill=\"#f8f9fa\" rx=\"10\" ry=\"10\" />\n\n  <!-- Box shadow -->\n  <ellipse\n    cx=\"200\"\n    cy=\"210\"\n    rx=\"70\"\n    ry=\"15\"\n    fill=\"#e9ecef\"\n    class=\"box-shadow\"\n  />\n\n  <!-- Empty box -->\n  <g class=\"empty-box\">\n    <!-- Box -->\n    <rect\n      x=\"150\"\n      y=\"130\"\n      width=\"100\"\n      height=\"80\"\n      rx=\"3\"\n      fill=\"#e9ecef\"\n      stroke=\"#ced4da\"\n      stroke-width=\"2\"\n    />\n    <rect\n      x=\"150\"\n      y=\"130\"\n      width=\"100\"\n      height=\"15\"\n      rx=\"3\"\n      fill=\"#dee2e6\"\n      stroke=\"#ced4da\"\n      stroke-width=\"2\"\n    />\n\n    <!-- Box panels -->\n    <line\n      x1=\"150\"\n      y1=\"160\"\n      x2=\"250\"\n      y2=\"160\"\n      stroke=\"#ced4da\"\n      stroke-width=\"1\"\n      stroke-dasharray=\"5,3\"\n    />\n    <line\n      x1=\"200\"\n      y1=\"130\"\n      x2=\"200\"\n      y2=\"210\"\n      stroke=\"#ced4da\"\n      stroke-width=\"1\"\n      stroke-dasharray=\"5,3\"\n    />\n  </g>\n\n  <!-- Box lid -->\n  <g class=\"box-lid\">\n    <rect\n      x=\"145\"\n      y=\"110\"\n      width=\"110\"\n      height=\"20\"\n      rx=\"3\"\n      fill=\"#dee2e6\"\n      stroke=\"#ced4da\"\n      stroke-width=\"2\"\n    />\n    <rect x=\"175\" y=\"118\" width=\"50\" height=\"5\" rx=\"2\" fill=\"#ced4da\" />\n  </g>\n\n  <!-- Floating item placeholders -->\n  <g class=\"item-placeholder\" opacity=\"0.7\" transform=\"translate(-190, -50)\">\n    <rect\n      x=\"290\"\n      y=\"100\"\n      width=\"40\"\n      height=\"50\"\n      rx=\"3\"\n      fill=\"#e9ecef\"\n      stroke=\"#dee2e6\"\n      stroke-width=\"1\"\n    />\n    <line\n      x1=\"300\"\n      y1=\"115\"\n      x2=\"320\"\n      y2=\"115\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n    <line\n      x1=\"300\"\n      y1=\"125\"\n      x2=\"320\"\n      y2=\"125\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n    <line\n      x1=\"300\"\n      y1=\"135\"\n      x2=\"310\"\n      y2=\"135\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </g>\n\n  <g class=\"item-placeholder2\" opacity=\"0.5\" transform=\"translate(230, -30)\">\n    <rect\n      x=\"70\"\n      y=\"90\"\n      width=\"40\"\n      height=\"50\"\n      rx=\"3\"\n      fill=\"#e9ecef\"\n      stroke=\"#dee2e6\"\n      stroke-width=\"1\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"105\"\n      x2=\"100\"\n      y2=\"105\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"115\"\n      x2=\"100\"\n      y2=\"115\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"125\"\n      x2=\"90\"\n      y2=\"125\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </g>\n\n  <g class=\"item-placeholder3\" opacity=\"0.6\" transform=\"translate(-190, -70)\">\n    <rect\n      x=\"260\"\n      y=\"140\"\n      width=\"40\"\n      height=\"50\"\n      rx=\"3\"\n      fill=\"#e9ecef\"\n      stroke=\"#dee2e6\"\n      stroke-width=\"1\"\n    />\n    <line\n      x1=\"270\"\n      y1=\"155\"\n      x2=\"290\"\n      y2=\"155\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n    <line\n      x1=\"270\"\n      y1=\"165\"\n      x2=\"290\"\n      y2=\"165\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n    <line\n      x1=\"270\"\n      y1=\"175\"\n      x2=\"280\"\n      y2=\"175\"\n      stroke=\"#adb5bd\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </g>\n\n  <!-- Text -->\n  <g class=\"text\">\n    <text\n      x=\"200\"\n      y=\"240\"\n      font-family=\"Arial, sans-serif\"\n      font-size=\"20\"\n      text-anchor=\"middle\"\n      fill=\"#495057\"\n      font-weight=\"bold\"\n    >\n      No Items Found\n    </text>\n    <text\n      x=\"200\"\n      y=\"265\"\n      font-family=\"Arial, sans-serif\"\n      font-size=\"14\"\n      text-anchor=\"middle\"\n      fill=\"#6c757d\"\n    >\n      Create your first item to get started\n    </text>\n  </g>\n</svg>\n"
        },
        {
            "name": "NoResultsComponent",
            "id": "component-NoResultsComponent-7159c2ef75f3b948659607f61031c7277dc9301a9daffc00541c883f67f3a585a32e9b6224d0e8e6c03b8a8bf3f3f33278c9a5eaa7d863c0128868ffcfb5ccd4",
            "file": "src/app/components/no-results/no-results.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-no-results",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./no-results.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "titleParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-no-results',\n  imports: [CommonModule, TranslateModule],\n  templateUrl: './no-results.component.html',\n  styleUrl: './no-results.component.scss',\n})\nexport class NoResultsComponent {\n  @Input() titleParams: string | undefined;\n  @Input() subtitle: string | undefined;\n}\n",
            "styleUrl": "./no-results.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"no-results-wrapper\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 300\">\n    <!-- Background -->\n    <rect width=\"400\" height=\"300\" fill=\"#f8f9fa\" rx=\"10\" ry=\"10\" />\n\n    <!-- Empty document icons -->\n    <g class=\"doc\" opacity=\"0.7\">\n      <rect\n        x=\"290\"\n        y=\"100\"\n        width=\"40\"\n        height=\"50\"\n        rx=\"3\"\n        fill=\"#e9ecef\"\n        stroke=\"#dee2e6\"\n        stroke-width=\"1\"\n      />\n      <line\n        x1=\"300\"\n        y1=\"115\"\n        x2=\"320\"\n        y2=\"115\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n      <line\n        x1=\"300\"\n        y1=\"125\"\n        x2=\"320\"\n        y2=\"125\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n      <line\n        x1=\"300\"\n        y1=\"135\"\n        x2=\"310\"\n        y2=\"135\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n    </g>\n\n    <g class=\"doc2\" opacity=\"0.5\">\n      <rect\n        x=\"70\"\n        y=\"90\"\n        width=\"40\"\n        height=\"50\"\n        rx=\"3\"\n        fill=\"#e9ecef\"\n        stroke=\"#dee2e6\"\n        stroke-width=\"1\"\n      />\n      <line\n        x1=\"80\"\n        y1=\"105\"\n        x2=\"100\"\n        y2=\"105\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n      <line\n        x1=\"80\"\n        y1=\"115\"\n        x2=\"100\"\n        y2=\"115\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n      <line\n        x1=\"80\"\n        y1=\"125\"\n        x2=\"90\"\n        y2=\"125\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n    </g>\n\n    <g class=\"doc3\" opacity=\"0.6\">\n      <rect\n        x=\"260\"\n        y=\"170\"\n        width=\"40\"\n        height=\"50\"\n        rx=\"3\"\n        fill=\"#e9ecef\"\n        stroke=\"#dee2e6\"\n        stroke-width=\"1\"\n      />\n      <line\n        x1=\"270\"\n        y1=\"185\"\n        x2=\"290\"\n        y2=\"185\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n      <line\n        x1=\"270\"\n        y1=\"195\"\n        x2=\"290\"\n        y2=\"195\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n      <line\n        x1=\"270\"\n        y1=\"205\"\n        x2=\"280\"\n        y2=\"205\"\n        stroke=\"#adb5bd\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n    </g>\n\n    <!-- Question Mark -->\n    <text\n      class=\"question-mark\"\n      x=\"115\"\n      y=\"180\"\n      font-family=\"Arial, sans-serif\"\n      font-size=\"40\"\n      fill=\"#adb5bd\"\n      font-weight=\"bold\"\n    >\n      ?\n    </text>\n\n    <!-- Magnifying Glass -->\n    <g class=\"magnifier\">\n      <!-- Glass Circle -->\n      <circle\n        cx=\"200\"\n        cy=\"120\"\n        r=\"50\"\n        fill=\"none\"\n        stroke=\"#6c757d\"\n        stroke-width=\"8\"\n      />\n\n      <!-- Handle -->\n      <line\n        x1=\"235\"\n        y1=\"160\"\n        x2=\"265\"\n        y2=\"190\"\n        stroke=\"#6c757d\"\n        stroke-width=\"10\"\n        stroke-linecap=\"round\"\n        class=\"magnifier-handle\"\n      />\n\n      <!-- Search Pulse -->\n      <circle\n        cx=\"200\"\n        cy=\"120\"\n        r=\"65\"\n        fill=\"none\"\n        stroke=\"#6c757d\"\n        stroke-width=\"3\"\n        stroke-linecap=\"round\"\n        class=\"search-pulse\"\n        opacity=\"0.3\"\n      />\n\n      <!-- \"X\" in the glass to indicate no results -->\n      <line\n        x1=\"180\"\n        y1=\"100\"\n        x2=\"220\"\n        y2=\"140\"\n        stroke=\"#005cbb\"\n        stroke-width=\"5\"\n        stroke-linecap=\"round\"\n      />\n      <line\n        x1=\"220\"\n        y1=\"100\"\n        x2=\"180\"\n        y2=\"140\"\n        stroke=\"#005cbb\"\n        stroke-width=\"5\"\n        stroke-linecap=\"round\"\n      />\n    </g>\n\n    <!-- Text -->\n    <g class=\"text\">\n      <text\n        x=\"200\"\n        y=\"230\"\n        font-family=\"Arial, sans-serif\"\n        font-size=\"20\"\n        text-anchor=\"middle\"\n        fill=\"#495057\"\n        font-weight=\"bold\"\n      >\n        {{\n          !titleParams\n            ? (\"noResults.title\" | translate)\n            : (\"noResults.titleWithParams\" | translate : { value: titleParams })\n        }}\n      </text>\n      <text\n        x=\"200\"\n        y=\"255\"\n        font-family=\"Arial, sans-serif\"\n        font-size=\"14\"\n        text-anchor=\"middle\"\n        fill=\"#6c757d\"\n      >\n        {{ subtitle ? subtitle : (\"noResults.subTitle\" | translate) }}\n      </text>\n    </g>\n  </svg>\n</div>\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-8f85fd5d137b1c2ae15ea9b883fcc68355859c1e5e92f8e944b6376c1486c6fd8467b6c7630aeafb85ed865113618cad62a403ed3325aa662f5fe97d846372cf",
            "file": "src/app/components/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [
                "./notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationColor | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationIcon | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "isRtl",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "NOTIFICATIONS",
                    "defaultValue": "new Map<\n    NotificationType,\n    NotificationConfigurations\n  >([\n    [\n      'INFO',\n      {\n        title: 'info',\n        color: '#4070f4',\n        icon: 'info_outline',\n      },\n    ],\n    [\n      'ERROR',\n      {\n        title: 'error',\n        color: '#e41749',\n        icon: 'close_outline',\n      },\n    ],\n    [\n      'SUCCESS',\n      {\n        title: 'success',\n        color: '#12c99b',\n        icon: 'done',\n      },\n    ],\n    [\n      'WARNING',\n      {\n        title: 'warning',\n        color: '#f2a600',\n        icon: 'warning_amber_outline',\n      },\n    ],\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "notificationShowId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "showNotification",
                    "defaultValue": "'hide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"hide\" | \"show\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationTitle | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport { Component, OnDestroy } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { LanguageService } from '../../services/lang.service';\nimport {\n  NotificationsService,\n  NotificationType,\n  Notification,\n} from '../../services/notifications.service';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\n\ntype NotificationTitle = 'info' | 'success' | 'warning' | 'error';\ntype NotificationIcon =\n  | 'info_outline'\n  | 'done'\n  | 'warning_amber_outline'\n  | 'close_outline';\ntype NotificationColor = '#4070f4' | '#12c99b' | '#f2a600' | '#e41749';\n\ninterface NotificationConfigurations {\n  title: NotificationTitle;\n  icon: NotificationIcon;\n  color: NotificationColor;\n}\n\n@Component({\n  selector: 'app-notification',\n  imports: [CommonModule, MaterialModule, TranslateModule],\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss'],\n  animations: [\n    trigger('showHideNotification', [\n      state(\n        'hide',\n        style({\n          transform: 'translateX(calc(100vw + 30px))',\n        })\n      ),\n      state(\n        'show',\n        style({\n          transform: 'translateX(0)',\n        })\n      ),\n      transition('show => hide', [animate('0.5s')]),\n      transition('hide => show', [animate('0.2s')]),\n    ]),\n  ],\n})\n// export class NotificationComponent {\nexport class NotificationComponent implements OnDestroy {\n  private readonly NOTIFICATIONS = new Map<\n    NotificationType,\n    NotificationConfigurations\n  >([\n    [\n      'INFO',\n      {\n        title: 'info',\n        color: '#4070f4',\n        icon: 'info_outline',\n      },\n    ],\n    [\n      'ERROR',\n      {\n        title: 'error',\n        color: '#e41749',\n        icon: 'close_outline',\n      },\n    ],\n    [\n      'SUCCESS',\n      {\n        title: 'success',\n        color: '#12c99b',\n        icon: 'done',\n      },\n    ],\n    [\n      'WARNING',\n      {\n        title: 'warning',\n        color: '#f2a600',\n        icon: 'warning_amber_outline',\n      },\n    ],\n  ]);\n  show = false;\n  showNotification: 'hide' | 'show' = 'hide';\n  isRtl = false;\n  title: NotificationTitle | undefined;\n  icon: NotificationIcon | undefined;\n  color: NotificationColor | undefined;\n  message: string | undefined;\n  private notificationShowId: NodeJS.Timeout | undefined;\n  private destroy$: Subject<void> = new Subject();\n  constructor(\n    private languageService: LanguageService,\n    private notificationsService: NotificationsService,\n    private translate: TranslateService\n  ) {\n    this.languageService.rtl$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((rtl) => (this.isRtl = rtl));\n    this.notificationsService.notification$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((notification: Notification | null) => {\n        if (!!notification) {\n          const currentNotification = this.NOTIFICATIONS.get(notification.type);\n          this.message = notification.message;\n          this.title = this.translate.instant(\n            `notifications.title.${currentNotification?.title}`\n          );\n          this.icon = currentNotification?.icon;\n          this.color = currentNotification?.color;\n          this.show = true;\n          setTimeout(() => (this.showNotification = 'show'), 100);\n          this.notificationShowId = setTimeout(() => {\n            this.showNotification = 'hide';\n            this.notificationsService.setNotification(null);\n            setTimeout(() => (this.show = false), 1000);\n          }, 500000);\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  close(): void {\n    this.showNotification = 'hide';\n    setTimeout(() => (this.show = false), 1000);\n    clearTimeout(this.notificationShowId);\n    this.notificationsService.setNotification(null);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.toast {\n  position: fixed;\n  top: 25px;\n  right: 30px;\n  border-radius: 12px;\n  background: #fff;\n  padding: 20px 35px 20px 25px;\n  box-shadow: 0 6px 20px -5px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  z-index: 9999;\n  min-width: 250px;\n  max-width: 350px;\n  direction: ltr;\n}\n\n.stick-left {\n  left: 30px;\n}\n\n.stick-right {\n  right: 30px;\n}\n\n@media only screen and (max-width: 760px) {\n  .toast {\n    max-width: 320px;\n  }\n}\n\n.toast .toast-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.toast-content .check {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 35px;\n  min-width: 35px;\n  color: #fff;\n  font-size: 20px;\n  border-radius: 50%;\n}\n\n.toast-content .message {\n  display: flex;\n  flex-direction: column;\n  margin: 0 20px;\n  gap: 10px;\n}\n\n.message .text {\n  font-size: 16px;\n  font-weight: 400;\n  color: #666666;\n}\n\n.message .text.text-1 {\n  font-weight: 600;\n  color: #333;\n}\n\n.toast .close {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  padding: 5px;\n  cursor: pointer;\n  opacity: 0.7;\n}\n\n.toast .close:hover {\n  opacity: 1;\n}\n\n.progress {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  height: 3px;\n  width: 100%;\n}\n\n.inner-progress {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  animation: progress 5s linear forwards;\n}\n\n@keyframes progress {\n  100% {\n    right: 100%;\n  }\n}\n",
                    "styleUrl": "./notification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div\n  class=\"toast\"\n  [class.rtl]=\"isRtl\"\n  [ngClass]=\"{ 'stick-left': !isRtl, 'stick-right': isRtl }\"\n  [@showHideNotification]=\"showNotification\"\n>\n  <div class=\"toast-content\">\n    <div class=\"check\" [style.background-color]=\"color\">\n      <mat-icon>{{ icon }}</mat-icon>\n    </div>\n    <div class=\"message\" [class.rtl]=\"isRtl\">\n      <span class=\"text text-1\">{{ title }}</span>\n      <span class=\"text text-2\">{{ message }}</span>\n    </div>\n  </div>\n  <div class=\"close\" (click)=\"close()\">\n    <mat-icon\n      aria-hidden=\"false\"\n      aria-label=\"Example home icon\"\n      fontIcon=\"close_outline\"\n    ></mat-icon>\n  </div>\n  <ng-container *ngIf=\"show\">\n    <div class=\"progress\">\n      <div class=\"inner-progress\" [style.background-color]=\"color\"></div>\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "OrdersOverviewComponent",
            "id": "component-OrdersOverviewComponent-a8232e1bf0346d87dfb871ed63e485acef7fa2caca5aa497c7e935303e5ff9b7fb6901eb53d199456d2c061fbc58db4815932c0071c669cf4f284c89f018b7c1",
            "file": "src/app/admin/orders-overview/orders-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-orders-overview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./orders-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-orders-overview',\n  imports: [],\n  templateUrl: './orders-overview.component.html',\n  styleUrl: './orders-overview.component.scss'\n})\nexport class OrdersOverviewComponent {\n\n}\n",
            "styleUrl": "./orders-overview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>orders-overview works!</p>\n"
        },
        {
            "name": "ScheduleOverviewComponent",
            "id": "component-ScheduleOverviewComponent-000a5876a835800824ab0bf6c727f6ebe30c502e90abecf290ea84c26e8c0c602bc8c6aea915d585e63caf1361061d652a302355a78104ece881c37d6c0028ac",
            "file": "src/app/admin/schedule-overview/schedule-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule-overview",
            "styleUrls": [
                "./schedule-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availabilityFilter",
                    "defaultValue": "new FormControl('all')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<Item>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "dayFilter",
                    "defaultValue": "new FormControl('all')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "dayOptions",
                    "defaultValue": "[\n    { value: 'all', viewValue: 'All Days' },\n    { value: 'monday', viewValue: 'Monday' },\n    { value: 'tuesday', viewValue: 'Tuesday' },\n    { value: 'wednesday', viewValue: 'Wednesday' },\n    { value: 'thursday', viewValue: 'Thursday' },\n    { value: 'friday', viewValue: 'Friday' },\n    { value: 'saturday', viewValue: 'Saturday' },\n    { value: 'sunday', viewValue: 'Sunday' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'name',\n    'monday',\n    'tuesday',\n    'wednesday',\n    'thursday',\n    'friday',\n    'saturday',\n    'sunday',\n    'actions',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[\n    { value: 'all', viewValue: 'All Items' },\n    { value: 'available', viewValue: 'Available Items' },\n    { value: 'unavailable', viewValue: 'Unavailable Items' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDayName",
                    "args": [
                        {
                            "name": "day",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDisplayName",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveItemAvailability",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleAvailability",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "day",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "day",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\nimport { MaterialModule } from '../../material.module';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport { Item } from '../../travler/travler.models';\nimport { ItemsService } from '../../services/items.service';\n\n@Component({\n  selector: 'app-schedule-overview',\n  templateUrl: './schedule-overview.component.html',\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    PropertiesTranslationPipe,\n    LanguageDirectionDirective,\n  ],\n  styleUrls: ['./schedule-overview.component.scss'],\n})\nexport class ScheduleOverviewComponent implements OnInit {\n  dataSource = new MatTableDataSource<Item>([]);\n  displayedColumns: string[] = [\n    'name',\n    'monday',\n    'tuesday',\n    'wednesday',\n    'thursday',\n    'friday',\n    'saturday',\n    'sunday',\n    'actions',\n  ];\n  availabilityFilter = new FormControl('all');\n  dayFilter = new FormControl('all');\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  filterOptions = [\n    { value: 'all', viewValue: 'All Items' },\n    { value: 'available', viewValue: 'Available Items' },\n    { value: 'unavailable', viewValue: 'Unavailable Items' },\n  ];\n\n  dayOptions = [\n    { value: 'all', viewValue: 'All Days' },\n    { value: 'monday', viewValue: 'Monday' },\n    { value: 'tuesday', viewValue: 'Tuesday' },\n    { value: 'wednesday', viewValue: 'Wednesday' },\n    { value: 'thursday', viewValue: 'Thursday' },\n    { value: 'friday', viewValue: 'Friday' },\n    { value: 'saturday', viewValue: 'Saturday' },\n    { value: 'sunday', viewValue: 'Sunday' },\n  ];\n\n  constructor(private itemsService: ItemsService) {}\n\n  ngOnInit(): void {\n    this.loadItems();\n\n    // Set up filters\n    this.availabilityFilter.valueChanges.subscribe(() => {\n      this.applyFilters();\n    });\n\n    this.dayFilter.valueChanges.subscribe(() => {\n      this.applyFilters();\n    });\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  loadItems(): void {\n    this.itemsService.allItems$.subscribe((categories) => {\n      // Initialize availability if not present\n      const items = categories.map((category) => category.items).flat();\n      const itemsWithAvailability = items.map((item) => {\n        if (!item.availability) {\n          item.availability = {\n            monday: false,\n            tuesday: false,\n            wednesday: false,\n            thursday: false,\n            friday: false,\n            saturday: false,\n            sunday: false,\n          };\n        }\n        return item;\n      });\n\n      this.dataSource.data = itemsWithAvailability;\n    });\n  }\n\n  toggleAvailability(item: Item, day: string): void {\n    if (item.availability) {\n      item.availability[day as keyof typeof item.availability] =\n        !item.availability[day as keyof typeof item.availability];\n      this.saveItemAvailability(item);\n    }\n  }\n\n  saveItemAvailability(item: Item): void {\n    // this.itemService.updateItem(item).subscribe({\n    //   next: () => {\n    //     // You might want to show a snackbar confirmation here\n    //   },\n    //   error: (err) => {\n    //     console.error('Error updating item availability:', err);\n    //     // Handle error, maybe revert the change in UI\n    //   }\n    // });\n  }\n\n  applyFilters(): void {\n    this.dataSource.filterPredicate = (data: Item, filter: string) => {\n      const availabilityFilterValue = this.availabilityFilter.value;\n      const dayFilterValue = this.dayFilter.value;\n\n      // Handle day filter\n      if (dayFilterValue !== 'all' && data.availability) {\n        if (availabilityFilterValue === 'available') {\n          return data.availability[\n            dayFilterValue as keyof typeof data.availability\n          ];\n        } else if (availabilityFilterValue === 'unavailable') {\n          return !data.availability[\n            dayFilterValue as keyof typeof data.availability\n          ];\n        }\n        // If 'all availability' is selected, just return true when filtering by day\n        return true;\n      }\n\n      // Handle availability filter across all days\n      if (availabilityFilterValue !== 'all' && data.availability) {\n        const isAvailableOnAnyDay = Object.values(data.availability).some(\n          (value) => value\n        );\n\n        if (availabilityFilterValue === 'available') {\n          return isAvailableOnAnyDay;\n        } else {\n          return !isAvailableOnAnyDay;\n        }\n      }\n\n      // Default case: no filtering\n      return true;\n    };\n\n    // This triggers the filter\n    this.dataSource.filter = 'trigger';\n  }\n\n  getDayName(day: string): string {\n    return day.charAt(0).toUpperCase() + day.slice(1);\n  }\n\n  getDisplayName(item: Item): string {\n    // Return name based on language preference, defaulting to English\n    // You can customize this based on your app's language settings\n    return item.enName;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* schedule-overview.component.scss */\n.schedule-container {\n  margin: 20px;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.filters-container {\n  padding: 16px 24px;\n  background-color: #f5f5f5;\n\n  h2 {\n    margin-bottom: 16px;\n    color: #333;\n  }\n}\n\n.filters {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n\n  mat-form-field {\n    min-width: 200px;\n  }\n}\n\n.schedule-table {\n  width: 100%;\n\n  th {\n    background-color: #f0f0f0;\n    text-align: center;\n    font-weight: 500;\n  }\n\n  .mat-column-name {\n    padding-left: 16px;\n    min-width: 180px;\n    max-width: 250px;\n  }\n\n  .mat-column-monday,\n  .mat-column-tuesday,\n  .mat-column-wednesday,\n  .mat-column-thursday,\n  .mat-column-friday,\n  .mat-column-saturday,\n  .mat-column-sunday {\n    width: 60px;\n    text-align: center;\n  }\n\n  td.mat-cell {\n    padding: 12px 0;\n\n    mat-checkbox {\n      display: flex;\n      justify-content: center;\n    }\n  }\n}\n\n// Responsive adjustments\n@media screen and (max-width: 768px) {\n  .filters {\n    flex-direction: column;\n\n    mat-form-field {\n      width: 100%;\n    }\n  }\n\n  .schedule-table {\n    // Make the table scrollable horizontally on smaller screens\n    display: block;\n    overflow-x: auto;\n\n    .mat-column-name {\n      min-width: 150px;\n    }\n  }\n}\n",
                    "styleUrl": "./schedule-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- schedule-overview.component.html -->\n<div class=\"schedule-container mat-elevation-z8\">\n  <div class=\"filters-container\">\n    <h2>Item Availability Schedule</h2>\n\n    <div class=\"filters\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Filter by availability</mat-label>\n        <mat-select [formControl]=\"availabilityFilter\">\n          <mat-option\n            *ngFor=\"let option of filterOptions\"\n            [value]=\"option.value\"\n          >\n            {{ option.viewValue }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Filter by day</mat-label>\n        <mat-select [formControl]=\"dayFilter\">\n          <mat-option *ngFor=\"let option of dayOptions\" [value]=\"option.value\">\n            {{ option.viewValue }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <table mat-table [dataSource]=\"dataSource\" matSort class=\"schedule-table\">\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Item Name</th>\n      <td mat-cell *matCellDef=\"let item\">{{ getDisplayName(item) }}</td>\n    </ng-container>\n\n    <!-- Monday Column -->\n    <ng-container matColumnDef=\"monday\">\n      <th mat-header-cell *matHeaderCellDef>Mon</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <mat-checkbox\n          color=\"primary\"\n          [checked]=\"item.availability?.monday\"\n          (change)=\"toggleAvailability(item, 'monday')\"\n          aria-label=\"Available on Monday\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Tuesday Column -->\n    <ng-container matColumnDef=\"tuesday\">\n      <th mat-header-cell *matHeaderCellDef>Tue</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <mat-checkbox\n          color=\"primary\"\n          [checked]=\"item.availability?.tuesday\"\n          (change)=\"toggleAvailability(item, 'tuesday')\"\n          aria-label=\"Available on Tuesday\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Wednesday Column -->\n    <ng-container matColumnDef=\"wednesday\">\n      <th mat-header-cell *matHeaderCellDef>Wed</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <mat-checkbox\n          color=\"primary\"\n          [checked]=\"item.availability?.wednesday\"\n          (change)=\"toggleAvailability(item, 'wednesday')\"\n          aria-label=\"Available on Wednesday\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Thursday Column -->\n    <ng-container matColumnDef=\"thursday\">\n      <th mat-header-cell *matHeaderCellDef>Thu</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <mat-checkbox\n          color=\"primary\"\n          [checked]=\"item.availability?.thursday\"\n          (change)=\"toggleAvailability(item, 'thursday')\"\n          aria-label=\"Available on Thursday\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Friday Column -->\n    <ng-container matColumnDef=\"friday\">\n      <th mat-header-cell *matHeaderCellDef>Fri</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <mat-checkbox\n          color=\"primary\"\n          [checked]=\"item.availability?.friday\"\n          (change)=\"toggleAvailability(item, 'friday')\"\n          aria-label=\"Available on Friday\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Saturday Column -->\n    <ng-container matColumnDef=\"saturday\">\n      <th mat-header-cell *matHeaderCellDef>Sat</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <mat-checkbox\n          color=\"primary\"\n          [checked]=\"item.availability?.saturday\"\n          (change)=\"toggleAvailability(item, 'saturday')\"\n          aria-label=\"Available on Saturday\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Sunday Column -->\n    <ng-container matColumnDef=\"sunday\">\n      <th mat-header-cell *matHeaderCellDef>Sun</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <mat-checkbox\n          color=\"primary\"\n          [checked]=\"item.availability?.sunday\"\n          (change)=\"toggleAvailability(item, 'sunday')\"\n          aria-label=\"Available on Sunday\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Actions Column -->\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\n      <td mat-cell *matCellDef=\"let item\">\n        <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Actions\">\n          <mat-icon>more_vert</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n          <button mat-menu-item (click)=\"saveItemAvailability(item)\">\n            <mat-icon>save</mat-icon>\n            <span>Save Changes</span>\n          </button>\n          <button mat-menu-item>\n            <mat-icon>edit</mat-icon>\n            <span>Edit Item</span>\n          </button>\n        </mat-menu>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n  </table>\n\n  <mat-paginator\n    [pageSizeOptions]=\"[100, 25, 50, 100]\"\n    showFirstLastButtons\n  ></mat-paginator>\n</div>\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-ab168ae9d6fc66b6af4c8b321ed8a20fc5d6ca876fc56a4fc05ef257f6873094d4491486152ab9e2ced193a2ece8a82ef9adaef8ca8c9fd2d70909445953e41c",
            "file": "src/app/travler/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "filteredCategories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "filteredItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "lang$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageType> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "seatchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'seatchInput'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "showSuggestions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "stickyLeft",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "clearResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterResults",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "languageDirection",
                            "type": "LanguageDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollToResult",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "PropertiesTranslationPipe",
                    "type": "pipe"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChildren } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { debounceTime, distinctUntilChanged, Observable } from 'rxjs';\nimport { Category, Item } from '../travler.models';\nimport { ItemsService } from '../../services/items.service';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { PropertiesTranslationPipe } from '../../pipes/properties-translation.pipe';\nimport {\n  LanguageDirection,\n  LanguageService,\n  LanguageType,\n} from '../../services/lang.service';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { LanguageDirectionDirective } from '../../directives/language-direction.directive';\n\n@Component({\n  selector: 'app-search',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    PropertiesTranslationPipe,\n    LanguageDirectionDirective,\n    TranslateModule,\n  ],\n  templateUrl: './search.component.html',\n  styleUrl: './search.component.scss',\n})\nexport class SearchComponent implements OnInit {\n  @ViewChildren('seatchInput') seatchInput: any;\n\n  allItems: Category[] = [];\n\n  searchControl = new FormControl('');\n  filteredCategories: Category[] = [];\n  filteredItems: Item[] = [];\n  showSuggestions = false;\n\n  stickyLeft = false;\n\n  public lang$: Observable<LanguageType> | undefined;\n\n  constructor(\n    private languageService: LanguageService,\n    private itemsService: ItemsService\n  ) {}\n\n  ngOnInit() {\n    this.lang$ = this.languageService.currentLanguage$;\n\n    this.itemsService.allItems$.pipe().subscribe((items) => {\n      this.allItems = items;\n    });\n\n    this.searchControl.valueChanges\n      .pipe(debounceTime(300), distinctUntilChanged())\n      .subscribe((searchTerm) => {\n        if (searchTerm) {\n          this.filterResults(searchTerm);\n        } else {\n          this.clearResults();\n        }\n      });\n  }\n\n  filterResults(searchTerm: string) {\n    searchTerm = searchTerm.toLowerCase();\n\n    this.filteredCategories = this.allItems.filter(\n      (category) =>\n        category.enName.toLowerCase().includes(searchTerm) ||\n        category.heName.toLowerCase().includes(searchTerm) ||\n        category.esName.toLowerCase().includes(searchTerm)\n    );\n\n    this.filteredItems = this.allItems\n      .flatMap((category) => category.items)\n      .filter(\n        (item) =>\n          item.enName.toLowerCase().includes(searchTerm) ||\n          item.heName.toLowerCase().includes(searchTerm) ||\n          item.esName.toLowerCase().includes(searchTerm)\n      )\n      .slice(0, 5);\n  }\n\n  clearResults() {\n    this.filteredCategories = [];\n    this.filteredItems = [];\n  }\n\n  toggleSearch(): void {\n    if (!this.showSuggestions) {\n      this.seatchInput?.first?.nativeElement?.focus();\n    } else {\n      this.clearResults();\n      this.searchControl.setValue('');\n      this.onBlur();\n    }\n  }\n\n  onFocus() {\n    this.showSuggestions = true;\n  }\n\n  onBlur() {\n    if (!this.searchControl.value) {\n      setTimeout(() => {\n        this.showSuggestions = false;\n      }, 200);\n    }\n  }\n\n  scrollToResult(uuid: string) {\n    setTimeout(() => {\n      const element = document.getElementById(uuid);\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n\n        element.classList.add('heartbeat');\n        setTimeout(() => {\n          element.classList.remove('heartbeat');\n        }, 2500);\n      }\n      this.clearResults();\n      this.searchControl.setValue('');\n      setTimeout(() => {\n        this.showSuggestions = false;\n      }, 200);\n    }, 100);\n  }\n\n  languageChanged(languageDirection: LanguageDirection): void {\n    this.stickyLeft = languageDirection === 'rtl';\n  }\n}\n",
            "styleUrl": "./search.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemsService",
                        "type": "ItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"search-container\"\n  appLanguageDirection\n  (languageChanged)=\"languageChanged($event)\"\n>\n  <div class=\"search-wrapper\" [class.open]=\"showSuggestions\">\n    <div\n      class=\"search-button center-position\"\n      [style.left]=\"stickyLeft ? '0' : ''\"\n      [style.right]=\"!stickyLeft ? '0' : ''\"\n      [class.active]=\"showSuggestions\"\n      (click)=\"toggleSearch()\"\n    >\n      <div class=\"search-icon\"></div>\n    </div>\n\n    <input\n      #seatchInput\n      type=\"text\"\n      [formControl]=\"searchControl\"\n      placeholder=\"\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n    />\n  </div>\n\n  <div\n    class=\"suggestions-container\"\n    *ngIf=\"showSuggestions && searchControl.value\"\n  >\n    <div class=\"suggestions\" *ngIf=\"lang$ | async; let lang\">\n      <div class=\"categories\" *ngIf=\"filteredCategories.length > 0\">\n        <div\n          *ngFor=\"let category of filteredCategories\"\n          class=\"suggestion-item\"\n          (click)=\"scrollToResult(category.uuid)\"\n        >\n          <span>{{ category | propertiesTranslation : lang : \"Name\" }}</span>\n          <span>{{ \"menu.category\" | translate }}</span>\n        </div>\n      </div>\n\n      <div class=\"items\" *ngIf=\"filteredItems.length > 0\">\n        <div\n          *ngFor=\"let item of filteredItems\"\n          class=\"suggestion-item\"\n          (click)=\"scrollToResult(item.uuid)\"\n        >\n          <span>{{ item | propertiesTranslation : lang : \"Name\" }}</span>\n          <span>{{ \"menu.item\" | translate }}</span>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"filteredCategories.length === 0 && filteredItems.length === 0\"\n      >\n        <!-- Translate and style -->\n        <div class=\"suggestion-item\">No Item</div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TravlerComponent",
            "id": "component-TravlerComponent-8ef58e36aabcb1cb15ac8d34e7d17b7181db6d760e608ef355eb9763e5aa0a08339e38eae2225326c9df028162d9e86454ed6261b0b09bf4b5985779a61a5b34",
            "file": "src/app/travler/travler.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-travler",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./travler.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MaterialModule",
                    "type": "module"
                },
                {
                    "name": "HeaderActionsComponent",
                    "type": "component"
                },
                {
                    "name": "LanguageDirectionDirective",
                    "type": "directive"
                },
                {
                    "name": "LanguagePickerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { MaterialModule } from '../material.module';\nimport { LanguagePickerComponent } from '../components/language-picker/language-picker.component';\nimport { LanguageDirectionDirective } from '../directives/language-direction.directive';\nimport { HeaderActionsComponent } from './header-actions/header-actions.component';\n\n@Component({\n  selector: 'app-travler',\n  imports: [\n    RouterOutlet,\n    MaterialModule,\n    HeaderActionsComponent,\n    LanguageDirectionDirective,\n    LanguagePickerComponent,\n  ],\n  templateUrl: './travler.component.html',\n  styleUrl: './travler.component.scss',\n})\nexport class TravlerComponent {}\n",
            "styleUrl": "./travler.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-image\"></div>\n\n<div class=\"app-wrapper\">\n  <div class=\"header\" appLanguageDirection>\n    <div class=\"header-actions\">\n      <app-header-actions></app-header-actions>\n    </div>\n    <div class=\"header-language\">\n      <app-language-picker></app-language-picker>\n    </div>\n  </div>\n  <div class=\"travler-app\">\n    <router-outlet />\n  </div>\n\n  <div class=\"footer\">\n    <img class=\"candle\" [src]=\"'/candle.svg'\" />\n    <div class=\"scroll-container\">\n      <span class=\"scroll-text\">\n        המערכת נבנתה לעילוי נשמת דניאל בן שרה קביאטק ע״ה\n      </span>\n    </div>\n    <img class=\"candle\" [src]=\"'/candle.svg'\" />\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-00876bc0830d4ad9c325faa7d9531a8861e05611d9b882073b5cc1edef6c5537f06ddb5da4e6895340f1c4c87769e58a20a87d72c4fe6845c27931ea00f73fa9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { AuthGuard } from '../auth.guard';\nimport { CategoriesOverviewComponent } from './categories-overview/categories-overview.component';\nimport { AddOnsOverviewComponent } from './add-ons-overview/add-ons-overview.component';\nimport { ItemsOverviewComponent } from './items-overview/items-overview.component';\nimport { OrdersOverviewComponent } from './orders-overview/orders-overview.component';\nimport { ScheduleOverviewComponent } from './schedule-overview/schedule-overview.component';\nimport { GeneralOverviewComponent } from './general-overview/general-overview.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        component: GeneralOverviewComponent,\n      },\n      {\n        path: 'general-overview',\n        component: GeneralOverviewComponent,\n      },\n      {\n        path: 'categories-overview',\n        component: CategoriesOverviewComponent,\n      },\n      {\n        path: 'items-overview',\n        component: ItemsOverviewComponent,\n      },\n      {\n        path: 'add-ons-overview',\n        component: AddOnsOverviewComponent,\n      },\n      {\n        path: 'orders-overview',\n        component: OrdersOverviewComponent,\n      },\n      {\n        path: 'schedule-overview',\n        component: ScheduleOverviewComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes)],\n})\nexport class AdminModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-22acc7caf46d8f235b061424abfdcfbfd532215e9ae9d3e7c783f8bf69fb58878b56ee52d7f5f16e314d86904d1b3abaee5a436a5bb2e01c645b51e053c91a29",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport {\n  MAT_FORM_FIELD_DEFAULT_OPTIONS,\n  MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@NgModule({\n  imports: [\n    MatDividerModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatSlideToggleModule,\n    MatExpansionModule,\n    MatListModule,\n    MatSidenavModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatTabsModule,\n    MatBadgeModule,\n    MatMenuModule,\n    MatChipsModule,\n    MatAutocompleteModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [\n    MatDividerModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatSlideToggleModule,\n    MatExpansionModule,\n    MatListModule,\n    MatSidenavModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatTabsModule,\n    MatBadgeModule,\n    MatMenuModule,\n    MatChipsModule,\n    MatAutocompleteModule,\n    MatProgressSpinnerModule,\n  ],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: { subscriptSizing: 'dynamic' },\n    },\n  ],\n})\nexport class MaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TravlerModule",
            "id": "module-TravlerModule-b4c307c752ca73e098fcd97e27643c9e90fda0fbfd55f3bf995854d3ff55227c8088d57ae013c7c2f21ccb04a064c5c755dce7bc8be3673291ef9e5c4ca9806e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/travler/travler.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MenuComponent } from './menu/menu.component';\nimport { TravlerComponent } from './travler.component';\nimport { CartComponent } from './cart/cart.component';\n\n// TODO: add canActivate: [AuthGuard] for traveler\nconst routes: Routes = [\n  {\n    path: '',\n    component: TravlerComponent,\n    children: [\n      { path: '', component: MenuComponent },\n      { path: 'cart', component: CartComponent },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes)],\n})\nexport class TravlerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes, withViewTransitions()),\n    provideAnimationsAsync(),\n    provideHttpClient(withInterceptorsFromDi()),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JwtInterceptor,\n      multi: true,\n    },\n    importProvidersFrom(\n      TranslateModule.forRoot({\n        defaultLanguage: localStorage.getItem('locale') || 'en',\n        loader: {\n          provide: TranslateLoader,\n          useFactory: HttpLoaderFactory,\n          deps: [HttpClient],\n        },\n        extend: true,\n      })\n    ),\n  ],\n}"
            },
            {
                "name": "TOKEN_HEADER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/jwt.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'authorization'"
            },
            {
                "name": "TRANSLATE_KEY_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/dashboard/dashboard.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dashboard.menu.buttons.titles'"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DeleteTyep",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"category\" | \"item\" | \"add-on\"",
                "file": "src/app/admin/delete-confirmation-modal/delete-confirmation-modal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LanguageCode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"EN\" | \"ES\" | \"HE\"",
                "file": "src/app/services/lang.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LanguageDirection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"rtl\" | \"ltr\"",
                "file": "src/app/services/lang.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LanguageIcon",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"🇺🇸\" | \"🇪🇸\" | \"🇮🇱\"",
                "file": "src/app/services/lang.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LanguageName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"English\" | \"Español\" | \"עברית\"",
                "file": "src/app/services/lang.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LanguageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"en\" | \"es\" | \"he\"",
                "file": "src/app/services/lang.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ModalAddOn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "NotificationColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"#4070f4\" | \"#12c99b\" | \"#f2a600\" | \"#e41749\"",
                "file": "src/app/components/notification/notification.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "NotificationIcon",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info_outline\" | \"done\" | \"warning_amber_outline\" | \"close_outline\"",
                "file": "src/app/components/notification/notification.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "NotificationTitle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info\" | \"success\" | \"warning\" | \"error\"",
                "file": "src/app/components/notification/notification.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "NotificationType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"INFO\" | \"SUCCESS\" | \"WARNING\" | \"ERROR\"",
                "file": "src/app/services/notifications.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes, withViewTransitions()),\n    provideAnimationsAsync(),\n    provideHttpClient(withInterceptorsFromDi()),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JwtInterceptor,\n      multi: true,\n    },\n    importProvidersFrom(\n      TranslateModule.forRoot({\n        defaultLanguage: localStorage.getItem('locale') || 'en',\n        loader: {\n          provide: TranslateLoader,\n          useFactory: HttpLoaderFactory,\n          deps: [HttpClient],\n        },\n        extend: true,\n      })\n    ),\n  ],\n}"
                }
            ],
            "src/app/admin/jwt.interceptor.ts": [
                {
                    "name": "TOKEN_HEADER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/jwt.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'authorization'"
                }
            ],
            "src/app/admin/dashboard/dashboard.component.ts": [
                {
                    "name": "TRANSLATE_KEY_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/dashboard/dashboard.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dashboard.menu.buttons.titles'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.config.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/admin/delete-confirmation-modal/delete-confirmation-modal.component.ts": [
                {
                    "name": "DeleteTyep",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"category\" | \"item\" | \"add-on\"",
                    "file": "src/app/admin/delete-confirmation-modal/delete-confirmation-modal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/services/lang.service.ts": [
                {
                    "name": "LanguageCode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"EN\" | \"ES\" | \"HE\"",
                    "file": "src/app/services/lang.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "LanguageDirection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"rtl\" | \"ltr\"",
                    "file": "src/app/services/lang.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "LanguageIcon",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"🇺🇸\" | \"🇪🇸\" | \"🇮🇱\"",
                    "file": "src/app/services/lang.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "LanguageName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"English\" | \"Español\" | \"עברית\"",
                    "file": "src/app/services/lang.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "LanguageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"en\" | \"es\" | \"he\"",
                    "file": "src/app/services/lang.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts": [
                {
                    "name": "ModalAddOn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "src/app/components/notification/notification.component.ts": [
                {
                    "name": "NotificationColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"#4070f4\" | \"#12c99b\" | \"#f2a600\" | \"#e41749\"",
                    "file": "src/app/components/notification/notification.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "NotificationIcon",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info_outline\" | \"done\" | \"warning_amber_outline\" | \"close_outline\"",
                    "file": "src/app/components/notification/notification.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "NotificationTitle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info\" | \"success\" | \"warning\" | \"error\"",
                    "file": "src/app/components/notification/notification.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/services/notifications.service.ts": [
                {
                    "name": "NotificationType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"INFO\" | \"SUCCESS\" | \"WARNING\" | \"ERROR\"",
                    "file": "src/app/services/notifications.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/admin/add-on-form/add-on-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddOnFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/add-ons-overview/add-ons-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddOnsOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdminService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/admin.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MessagesRes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/admin.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WeddingGuest",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/categories-overview/categories-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoriesOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/category-form/category-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/dashboard/dashboard.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardMenuButton",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/dashboard/dashboard.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRANSLATE_KEY_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/delete-confirmation-modal/delete-confirmation-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteConfirmationModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/delete-confirmation-modal/delete-confirmation-modal.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DeleteTyep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/general-overview/general-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GeneralOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/item-form/item-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/items-overview/items-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/jwt.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_HEADER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/orders-overview/orders-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrdersOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/schedule-overview/schedule-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/image-preview/image-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImagePreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/language-picker/language-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguagePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/load-file/load-file.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadFileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu-icon/menu-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/no-data/no-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/no-results/no-results.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoResultsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationConfigurations",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "NotificationColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "NotificationIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "NotificationTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/dnd.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DndDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/language-direction.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LanguageDirectionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/add-on-uuids-to-add-ons.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "AddOnUuidsToAddOnsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/preview-item-cost.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PreviewItemCostPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/properties-translation.pipe.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PropertiesTranslationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/properties-translation.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PropertiesTranslationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GuestDetails",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cart.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cart.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cart.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializableCartItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/items.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItemsService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/lang.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/lang.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SupportedLanguages",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/lang.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageCode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/lang.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageDirection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/lang.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/lang.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/lang.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notifications.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notifications.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "NotificationType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/printer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReceiptPrinterService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/printer.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PrintResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/printer.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReceiptData",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/category/category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/header-actions/header-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemAddOnsSelectionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckboxState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/item-add-ons-selections/item-add-ons-selections.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ModalAddOn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/item-preview/item-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/item-preview/item-preview.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItemPermutation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/item-preview/item-preview.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupedCartItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/item/item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/items-preview/items-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/items-summary-modal/items-summary-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsSummaryModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/travler.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TravlerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/travler.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddOn",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/travler.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/travler/travler.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            }
        ]
    }
}